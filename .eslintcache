[{"/Users/mohammad/MyProjects/museumdental-payment-admin/src/MenuList.js":"1","/Users/mohammad/MyProjects/museumdental-payment-admin/src/App.js":"2","/Users/mohammad/MyProjects/museumdental-payment-admin/src/serviceWorker.js":"3","/Users/mohammad/MyProjects/museumdental-payment-admin/src/TokenVerifier.js":"4","/Users/mohammad/MyProjects/museumdental-payment-admin/src/services/UserService.js":"5","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Dashboard.js":"6","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TodayReceivedPaymentView.js":"7","/Users/mohammad/MyProjects/museumdental-payment-admin/src/CopyRight.js":"8","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/Chart.js":"9","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/DashboardPreview.js":"10","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/FindByRef.js":"11","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/FindByRef.js":"12","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/CalendarView.js":"13","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/CalendarView.js":"14","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/DateFormatter.js":"15","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/BookService.js":"16","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/BookingTable.js":"17","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/BookingTable.js":"18","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/BookingView.js":"19","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/BookingView.js":"20","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/BookingView.js":"21","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/Chart.js":"22","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/Chart.js":"23","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/CurrentVisits.js":"24","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/services/BookService.js":"25","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/services/BookService.js":"26","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/Corporates.js":"27","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/services/PatientService.js":"28","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/PersonsBox.js":"29","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/Corporates.js":"30","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/Corporates.js":"31","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/DateFormatter.js":"32","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/Title.js":"33","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/DateFormatter.js":"34","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/Title.js":"35","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/PersonsBox.js":"36","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/PriceCalculator.js":"37","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/PriceCalculator.js":"38","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/services/api.js":"39","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/BookingDialog.js":"40","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/Corporates.js":"41","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PatientDialog.js":"42","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/DateFormatter.js":"43","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/MonthView.js":"44","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/WeekView.js":"45","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/WeekView.js":"46","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/MonthView.js":"47","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/DayView.js":"48","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/BookingDialog.js":"49","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/WeekViewCell.js":"50","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/WeekViewCell.js":"51","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/DayViewCell.js":"52","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/WeekViewCell.js":"53","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PayDialog.js":"54","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/NewBookingDialog.js":"55","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/PatientDialog.js":"56","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/ChooseClinicDialog.js":"57","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GlobalPath.js":"58","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/NewPaymentDialog.js":"59","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/ViewPaymentDialog.js":"60","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/PaymentService.js":"61","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/PaymentsTable.js":"62","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GlobalState.js":"63","/Users/mohammad/MyProjects/museumdental-payment-admin/src/theme.js":"64","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Role.js":"65","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TodayLinkSentView.js":"66","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/Title.js":"67","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/CurrentVisits.js":"68","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/DashboardPreview.js":"69","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/FindByRef.js":"70","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/CalendarView.js":"71","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PatientsTable.js":"72","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/BookingTable.js":"73","/Users/mohammad/MyProjects/museumdental-payment-admin/src/services/api.js":"74","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/BookingTable.js":"75","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PriceCalculator.js":"76","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/BookingDialog.js":"77","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/Corporates.js":"78","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/DateFormatter.js":"79","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/Title.js":"80","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/DayViewCell.js":"81","/Users/mohammad/MyProjects/museumdental-payment-admin/src/InvoiceDialog.js":"82","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/NewBookingDialog.js":"83","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/services/api.js":"84","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/NewBookingDialog.js":"85","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/EditOVBookingDialog.js":"86","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/TimeStampDialog.js":"87","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/services/BookService.js":"88","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/DateField.js":"89","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/DateDialog.js":"90","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/PayDialog.js":"91","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/PayDialog.js":"92","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/PriceCalculator.js":"93","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/WeekView.js":"94","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/DayView.js":"95","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/CurrentVisits.js":"96","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/PersonsBox.js":"97","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/MonthViewCell.js":"98","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/services/PDFService.js":"99","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/NewBookingDialog.js":"100","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/DateField.js":"101","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Navigator.js":"102","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/DashboardPreview.js":"103","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/api.js":"104","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TotalReceivedPaymentView.js":"105","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/CalendarView.js":"106","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/services/BookService.js":"107","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/Chart.js":"108","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/CurrentVisits.js":"109","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/PriceCalculator.js":"110","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/services/BookService.js":"111","/Users/mohammad/MyProjects/museumdental-payment-admin/src/services/InvoiceService.js":"112","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Admin/calendar-admin/colors.js":"113","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/services/PDFService.js":"114","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/services/PDFService.js":"115","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/PayDialog.js":"116","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/ResendEmailsDialog.js":"117","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/PDFService.js":"118","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/WeekView.js":"119","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/DayView.js":"120","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/DayView.js":"121","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/BookingDialog.js":"122","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/DayViewCell.js":"123","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/MonthViewCell.js":"124","/Users/mohammad/MyProjects/museumdental-payment-admin/src/index.js":"125","/Users/mohammad/MyProjects/museumdental-payment-admin/src/SignIn.js":"126","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/DashboardPreview.js":"127","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/FindByRef.js":"128","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TotalLinkSentView.js":"129","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/BookingView.js":"130","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/ResultsTimeReport.js":"131","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/Title.js":"132","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/DateFormatter.js":"133","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/services/PDFService.js":"134","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/services/api.js":"135","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/BookingDialog.js":"136","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/MonthView.js":"137","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/MonthViewCell.js":"138","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/DayViewCell.js":"139","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/NewOVBookingDialog.js":"140","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Menu.js":"141","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/BookingTable.js":"142","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/services/api.js":"143","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/DayViewCell.js":"144","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/MonthView.js":"145","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/WeekView.js":"146","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/BookingView.js":"147","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/calendar-util.js":"148","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/calendar-util.js":"149","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/calendar-util.js":"150"},{"size":10992,"mtime":1620401870818,"results":"151","hashOfConfig":"152"},{"size":859,"mtime":1616154925882,"results":"153","hashOfConfig":"152"},{"size":4969,"mtime":1616154925927,"results":"154","hashOfConfig":"152"},{"size":519,"mtime":1616154925923,"results":"155","hashOfConfig":"152"},{"size":372,"mtime":1620221201876,"results":"156","hashOfConfig":"152"},{"size":21121,"mtime":1620393323723,"results":"157","hashOfConfig":"152"},{"size":2436,"mtime":1620398516579,"results":"158","hashOfConfig":"152"},{"size":402,"mtime":1616154925883,"results":"159","hashOfConfig":"152"},{"size":3220,"mtime":1620221123615,"results":"160","hashOfConfig":"152"},{"size":1668,"mtime":1616154925887,"results":"161","hashOfConfig":"152"},{"size":7820,"mtime":1616154925918,"results":"162","hashOfConfig":"152"},{"size":7774,"mtime":1616154925909,"results":"163","hashOfConfig":"152"},{"size":13490,"mtime":1616154925920,"results":"164","hashOfConfig":"152"},{"size":13490,"mtime":1616154925888,"results":"165","hashOfConfig":"152"},{"size":838,"mtime":1620221123623,"results":"166","hashOfConfig":"152"},{"size":4517,"mtime":1620278095248,"results":"167","hashOfConfig":"152"},{"size":34614,"mtime":1616154925903,"results":"168","hashOfConfig":"152"},{"size":37960,"mtime":1616154925885,"results":"169","hashOfConfig":"152"},{"size":3714,"mtime":1616154925917,"results":"170","hashOfConfig":"152"},{"size":3714,"mtime":1616154925886,"results":"171","hashOfConfig":"152"},{"size":3808,"mtime":1616154925892,"results":"172","hashOfConfig":"152"},{"size":3220,"mtime":1616154925892,"results":"173","hashOfConfig":"152"},{"size":3220,"mtime":1616154925886,"results":"174","hashOfConfig":"152"},{"size":5885,"mtime":1616154925892,"results":"175","hashOfConfig":"152"},{"size":4196,"mtime":1616154925890,"results":"176","hashOfConfig":"152"},{"size":5987,"mtime":1616154925916,"results":"177","hashOfConfig":"152"},{"size":48,"mtime":1616154925903,"results":"178","hashOfConfig":"152"},{"size":1177,"mtime":1620278191662,"results":"179","hashOfConfig":"152"},{"size":33056,"mtime":1616154925894,"results":"180","hashOfConfig":"152"},{"size":48,"mtime":1616154925918,"results":"181","hashOfConfig":"152"},{"size":48,"mtime":1616154925886,"results":"182","hashOfConfig":"152"},{"size":747,"mtime":1616154925909,"results":"183","hashOfConfig":"152"},{"size":342,"mtime":1616154925920,"results":"184","hashOfConfig":"152"},{"size":747,"mtime":1616154925887,"results":"185","hashOfConfig":"152"},{"size":342,"mtime":1616154925895,"results":"186","hashOfConfig":"152"},{"size":52898,"mtime":1616154925910,"results":"187","hashOfConfig":"152"},{"size":578,"mtime":1616154925895,"results":"188","hashOfConfig":"152"},{"size":578,"mtime":1616154925920,"results":"189","hashOfConfig":"152"},{"size":238,"mtime":1616154925922,"results":"190","hashOfConfig":"152"},{"size":61742,"mtime":1616154925917,"results":"191","hashOfConfig":"152"},{"size":48,"mtime":1620221123618,"results":"192","hashOfConfig":"152"},{"size":157616,"mtime":1619441025939,"results":"193","hashOfConfig":"152"},{"size":838,"mtime":1616154925904,"results":"194","hashOfConfig":"152"},{"size":2543,"mtime":1616154925889,"results":"195","hashOfConfig":"152"},{"size":3968,"mtime":1616154925897,"results":"196","hashOfConfig":"152"},{"size":3968,"mtime":1616154925889,"results":"197","hashOfConfig":"152"},{"size":2543,"mtime":1616153694047,"results":"198","hashOfConfig":"152"},{"size":3776,"mtime":1617613800591,"results":"199","hashOfConfig":"152"},{"size":43268,"mtime":1616154925902,"results":"200","hashOfConfig":"152"},{"size":5960,"mtime":1616154925914,"results":"201","hashOfConfig":"152"},{"size":6224,"mtime":1616154925921,"results":"202","hashOfConfig":"152"},{"size":8672,"mtime":1616154925896,"results":"203","hashOfConfig":"152"},{"size":14594,"mtime":1617461482414,"results":"204","hashOfConfig":"152"},{"size":13230,"mtime":1616154925904,"results":"205","hashOfConfig":"152"},{"size":18806,"mtime":1616154925919,"results":"206","hashOfConfig":"152"},{"size":157616,"mtime":1620221123632,"results":"207","hashOfConfig":"152"},{"size":14752,"mtime":1618392395751,"results":"208","hashOfConfig":"152"},{"size":671,"mtime":1620449289411,"results":"209","hashOfConfig":"152"},{"size":20707,"mtime":1620618868338,"results":"210","hashOfConfig":"152"},{"size":28743,"mtime":1620619362158,"results":"211","hashOfConfig":"152"},{"size":2333,"mtime":1620447116204,"results":"212","hashOfConfig":"152"},{"size":16822,"mtime":1620449077537,"results":"213","hashOfConfig":"152"},{"size":113,"mtime":1616154925891,"results":"214","hashOfConfig":"152"},{"size":2920,"mtime":1620221606143,"results":"215","hashOfConfig":"152"},{"size":278,"mtime":1616154925917,"results":"216","hashOfConfig":"152"},{"size":2360,"mtime":1620400142651,"results":"217","hashOfConfig":"152"},{"size":342,"mtime":1620221123643,"results":"218","hashOfConfig":"152"},{"size":5808,"mtime":1620221123618,"results":"219","hashOfConfig":"152"},{"size":1668,"mtime":1616154925892,"results":"220","hashOfConfig":"152"},{"size":7820,"mtime":1616154925887,"results":"221","hashOfConfig":"152"},{"size":15534,"mtime":1618392544965,"results":"222","hashOfConfig":"152"},{"size":15640,"mtime":1618749442792,"results":"223","hashOfConfig":"152"},{"size":37960,"mtime":1616154925917,"results":"224","hashOfConfig":"152"},{"size":192,"mtime":1616154925928,"results":"225","hashOfConfig":"152"},{"size":42814,"mtime":1616154925908,"results":"226","hashOfConfig":"152"},{"size":578,"mtime":1616154925905,"results":"227","hashOfConfig":"152"},{"size":43268,"mtime":1620221123609,"results":"228","hashOfConfig":"152"},{"size":48,"mtime":1616154925892,"results":"229","hashOfConfig":"152"},{"size":747,"mtime":1616154925892,"results":"230","hashOfConfig":"152"},{"size":342,"mtime":1616154925912,"results":"231","hashOfConfig":"152"},{"size":8586,"mtime":1616154925913,"results":"232","hashOfConfig":"152"},{"size":22638,"mtime":1616154925900,"results":"233","hashOfConfig":"152"},{"size":13841,"mtime":1616154925887,"results":"234","hashOfConfig":"152"},{"size":238,"mtime":1616154925900,"results":"235","hashOfConfig":"152"},{"size":15468,"mtime":1618392204911,"results":"236","hashOfConfig":"152"},{"size":29416,"mtime":1619443925601,"results":"237","hashOfConfig":"152"},{"size":10442,"mtime":1616154925912,"results":"238","hashOfConfig":"152"},{"size":4517,"mtime":1620278100244,"results":"239","hashOfConfig":"152"},{"size":7371,"mtime":1619443382384,"results":"240","hashOfConfig":"152"},{"size":11675,"mtime":1618830512583,"results":"241","hashOfConfig":"152"},{"size":13232,"mtime":1616154925887,"results":"242","hashOfConfig":"152"},{"size":13229,"mtime":1616154925894,"results":"243","hashOfConfig":"152"},{"size":578,"mtime":1620221123642,"results":"244","hashOfConfig":"152"},{"size":4478,"mtime":1617613862423,"results":"245","hashOfConfig":"152"},{"size":3585,"mtime":1616154925920,"results":"246","hashOfConfig":"152"},{"size":5808,"mtime":1616154925886,"results":"247","hashOfConfig":"152"},{"size":33056,"mtime":1616154925919,"results":"248","hashOfConfig":"152"},{"size":8111,"mtime":1616154925897,"results":"249","hashOfConfig":"152"},{"size":313,"mtime":1616154925922,"results":"250","hashOfConfig":"152"},{"size":15658,"mtime":1616154925893,"results":"251","hashOfConfig":"152"},{"size":7371,"mtime":1620221123622,"results":"252","hashOfConfig":"152"},{"size":3252,"mtime":1616154925902,"results":"253","hashOfConfig":"152"},{"size":2140,"mtime":1620400019565,"results":"254","hashOfConfig":"152"},{"size":238,"mtime":1620221123661,"results":"255","hashOfConfig":"152"},{"size":2436,"mtime":1620398488393,"results":"256","hashOfConfig":"152"},{"size":13490,"mtime":1616154925913,"results":"257","hashOfConfig":"152"},{"size":4587,"mtime":1616154925899,"results":"258","hashOfConfig":"152"},{"size":3220,"mtime":1616154925908,"results":"259","hashOfConfig":"152"},{"size":5504,"mtime":1616154925909,"results":"260","hashOfConfig":"152"},{"size":578,"mtime":1616154925888,"results":"261","hashOfConfig":"152"},{"size":4227,"mtime":1616154925921,"results":"262","hashOfConfig":"152"},{"size":1436,"mtime":1616154925928,"results":"263","hashOfConfig":"152"},{"size":145,"mtime":1616154925881,"results":"264","hashOfConfig":"152"},{"size":313,"mtime":1616154925890,"results":"265","hashOfConfig":"152"},{"size":1501,"mtime":1616154925899,"results":"266","hashOfConfig":"152"},{"size":13228,"mtime":1616154925919,"results":"267","hashOfConfig":"152"},{"size":15187,"mtime":1616154925911,"results":"268","hashOfConfig":"152"},{"size":313,"mtime":1620221123659,"results":"269","hashOfConfig":"152"},{"size":4285,"mtime":1616154925913,"results":"270","hashOfConfig":"152"},{"size":3266,"mtime":1616154925896,"results":"271","hashOfConfig":"152"},{"size":3266,"mtime":1616154925889,"results":"272","hashOfConfig":"152"},{"size":60541,"mtime":1616154925885,"results":"273","hashOfConfig":"152"},{"size":13504,"mtime":1618392305500,"results":"274","hashOfConfig":"152"},{"size":15150,"mtime":1617461384699,"results":"275","hashOfConfig":"152"},{"size":152,"mtime":1616154925927,"results":"276","hashOfConfig":"152"},{"size":10363,"mtime":1620222645970,"results":"277","hashOfConfig":"152"},{"size":1668,"mtime":1616154925918,"results":"278","hashOfConfig":"152"},{"size":7820,"mtime":1616154925893,"results":"279","hashOfConfig":"152"},{"size":2360,"mtime":1620400139788,"results":"280","hashOfConfig":"152"},{"size":3743,"mtime":1616154925908,"results":"281","hashOfConfig":"152"},{"size":8233,"mtime":1616154925912,"results":"282","hashOfConfig":"152"},{"size":342,"mtime":1616154925888,"results":"283","hashOfConfig":"152"},{"size":747,"mtime":1616154925918,"results":"284","hashOfConfig":"152"},{"size":1245,"mtime":1616154925916,"results":"285","hashOfConfig":"152"},{"size":238,"mtime":1616154925907,"results":"286","hashOfConfig":"152"},{"size":67511,"mtime":1616154925891,"results":"287","hashOfConfig":"152"},{"size":2543,"mtime":1616154925920,"results":"288","hashOfConfig":"152"},{"size":8138,"mtime":1616154925921,"results":"289","hashOfConfig":"152"},{"size":9528,"mtime":1616154925920,"results":"290","hashOfConfig":"152"},{"size":30188,"mtime":1619443559438,"results":"291","hashOfConfig":"152"},{"size":4226,"mtime":1616154925901,"results":"292","hashOfConfig":"152"},{"size":38082,"mtime":1616154925891,"results":"293","hashOfConfig":"152"},{"size":238,"mtime":1616154925890,"results":"294","hashOfConfig":"152"},{"size":8838,"mtime":1616154925889,"results":"295","hashOfConfig":"152"},{"size":2543,"mtime":1616154925897,"results":"296","hashOfConfig":"152"},{"size":4287,"mtime":1616154925921,"results":"297","hashOfConfig":"152"},{"size":3857,"mtime":1620395435329,"results":"298","hashOfConfig":"152"},{"size":221,"mtime":1616154925898,"results":"299","hashOfConfig":"152"},{"size":221,"mtime":1616154925890,"results":"300","hashOfConfig":"152"},{"size":221,"mtime":1616153694048,"results":"301","hashOfConfig":"152"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"305"},"1efnpcu",{"filePath":"306","messages":"307","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"309"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"321"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"321"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"334"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"305"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"309"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"321"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"309"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"321"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"305"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"321"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"321"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"309"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"309"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"305"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"309"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"309"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"309"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"305"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"334"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"309"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"321"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"305"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"422","messages":"423","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"334"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"321"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"309"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"433","messages":"434","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"309"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"309"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"309"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"309"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"451","messages":"452","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"309"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"309"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"471","messages":"472","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"305"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"305"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"478","messages":"479","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"309"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"321"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"305"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"321"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"500","messages":"501","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"502","messages":"503","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"305"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"309"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"321"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"321"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"309"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"522","messages":"523","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"524","messages":"525","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"321"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"309"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"534","messages":"535","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"536","messages":"537","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"309"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"321"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"309"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"309"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"557","messages":"558","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"309"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"321"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"568","messages":"569","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"309"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"309"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"321"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"321"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"321"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"309"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"597","messages":"598","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"599","messages":"600","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"309"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"608","messages":"609","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"610","messages":"611","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"612","messages":"613","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"614","messages":"615","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"309"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"309"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"630","messages":"631","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"309"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"635","messages":"636","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"637","messages":"638","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"639","messages":"640","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"643","messages":"644","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"645","messages":"646","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"647","messages":"648","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"649","messages":"650","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mohammad/MyProjects/museumdental-payment-admin/src/MenuList.js",["657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679"],"import DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport NewReleasesIcon from \"@material-ui/icons/NewReleases\";\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport TimelineIcon from \"@material-ui/icons/Timeline\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\nimport PlaylistAddCheckIcon from \"@material-ui/icons/PlaylistAddCheck\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport EventNoteIcon from \"@material-ui/icons/EventNote\";\nimport AirplanemodeActiveIcon from \"@material-ui/icons/AirplanemodeActive\";\nimport AccessibilityIcon from '@material-ui/icons/Accessibility';\n\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';\nimport SendIcon from '@material-ui/icons/Send';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\n\n\n/// PCR ------------------\nimport FindByRef from \"./PCR/FindByRef\";\nimport BookingTable from \"./PCR/BookingTable\";\nimport DashboardPreview from \"./PCR/DashboardPreview\";\nimport UnmatchedRecords from \"./PCR/UnmatchedRecords\";\n// import CalendarView from \"./PCR/calendar/CalendarView\";\nimport PCRCalendarView from \"./PCR/calendar-admin/CalendarView\";\n//-----------------------\n\n/// Gynae -------------------\nimport GynaeBookingTable from \"./Gynae/BookingTable\";\nimport GynaeDashboardPreview from \"./Gynae/DashboardPreview\";\nimport GynaeFindByRef from \"./Gynae/FindByRef\";\nimport GynaeCalendarView from \"./Gynae/calendar-admin/CalendarView\";\n//----------------------------\n\n/// GP -------------------\nimport GPBookingTable from \"./GP/BookingTable\";\nimport GPDashboardPreview from \"./GP/DashboardPreview\";\nimport GPFindByRef from \"./GP/FindByRef\";\nimport GPCalendarView from \"./GP/calendar-admin/CalendarView\";\n//----------------------------\n\n/// GP -------------------\nimport STDBookingTable from \"./STD/BookingTable\";\nimport STDDashboardPreview from \"./STD/DashboardPreview\";\nimport STDFindByRef from \"./STD/FindByRef\";\nimport STDCalendarView from \"./STD/calendar-admin/CalendarView\";\n//----------------------------\n\n// OV Admin ----------------\nimport OVBookingTable from \"./OV/BookingTable\";\nimport OVCalendarView from \"./OV/calendar-admin/CalendarView\";\nimport PatientsTable from \"./OV/PatientsTable\";\n\n//---------------\n\n\n// Museum Admin ----------------\nimport PaymentsTable from \"./Museum/PaymentsTable\";\nimport MuseumDashboard from \"./Museum/DashboardPreview\"\n\n//---------------\n\nimport LinkIcon from '@material-ui/icons/Link';\n\nexport const MenuList_Museum_Admin = [\n  {\n    index: 0,\n    id: `dashboard`,\n    title: `Dashboard`,\n    icon: <DashboardIcon />,\n  },\n  {\n    index: 1,\n    id: `paymentsTable`,\n    title: `Payment Links`,\n    icon: <LinkIcon />,\n  },\n  {\n    index: 2,\n    id: `paidpaymentsTable`,\n    title: `Successful Payments`,\n    icon: <DoneOutlineIcon />,\n  },\n  {\n    index: 3,\n    id: `refundpaymentsTable`,\n    title: `Refunded Payments`,\n    icon: <KeyboardReturnIcon />,\n  },\n  {\n    index: 4,\n    id: `deletedpaymentsTable`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n\n]\n\n//---------------\nexport const MenuList_OV_Admin = [\n  {\n    index: 0,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Archived Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  {\n    index: 8,\n    id: `patientsList`,\n    title: `Patients`,\n    icon: <AccessibilityIcon />,\n  },\n\n\n\n];\n\n\n\nexport const MenuList_Admin = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_Gynae = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_GP = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_STD = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_PCR = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `liveBookings`,\n    title: `Live Bookings`,\n    icon: <LiveTvIcon />,\n  },\n  { index: 4, id: `oldBookings`, title: `Old Bookings`, icon: <HistoryIcon /> },\n  {\n    index: 5,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 6,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 7,\n    id: `completedBookings`,\n    title: `Completed Bookings`,\n    icon: <PlaylistAddCheckIcon />,\n  },\n  {\n    index: 8,\n    id: `positiveBookings`,\n    title: `Positive Results`,\n    icon: <AddCircleOutlineIcon />,\n  },\n  {\n    index: 9,\n    id: `latebookings`,\n    title: `40 Hours Late`,\n    icon: <HourglassEmptyIcon />,\n  },\n  {\n    index: 10,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 11,\n    id: `trBookings`,\n    title: `TR Bookings`,\n    icon: <AirplanemodeActiveIcon />,\n  },\n  {\n    index: 12,\n    id: `unmatchedRecords`,\n    title: `Unmatched Records`,\n    icon: <WarningIcon />,\n  },\n  {\n    index: 13,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  // {\n  //   index: 14,\n  //   id: `adminCalendarView`,\n  //   title: `Admin Calendar`,\n  //   icon: <EventNoteIcon />,\n  // },\n  { index: 15, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const getMenuContent = (role, index) => {\n   if (role === \"museumadmin\") {\n    switch (index) {\n      case 0:\n        return <MuseumDashboard/>;  \n      case 1:\n        return <PaymentsTable date=\"all\"/>;  \n        case 2:\n          return <PaymentsTable date=\"paid\"/>;  \n          case 3:\n            return <PaymentsTable date=\"refund\"/>;  \n            case 4:\n              return <PaymentsTable date=\"deleted\"/>;  \n            \n      default:\n        return `Page Not Found!`;\n    }\n  } else {\n    return `Page Not Found!`;\n  }\n};\n\nexport const getMenuRole = (role) => {\n  switch (role) {\n    case \"museumadmin\":\n      return MenuList_Museum_Admin;\n    default:\n      return [];\n  }\n};\n\nexport const getMenuId = (role, index) => {\n  const MenuList = getMenuRole(role);\n  for (var i = 0; i < MenuList.length; i++) {\n    if (MenuList[i].index === index) {\n      return MenuList[i].id;\n    }\n  }\n\n  return `Page Not Found!`;\n};\n\nexport const getMenuIndex = (role, id) => {\n  const MenuList = getMenuRole(role);\n  for (var i = 0; i < MenuList.length; i++) {\n    if (MenuList[i].id === id) {\n      return MenuList[i].index;\n    }\n  }\n\n  return -1;\n};\n",["680","681"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/App.js",["682","683","684","685","686"],"import React, { Fragment, Suspense, lazy } from \"react\";\nimport { MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport theme from \"./theme\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport GlobalState from \"./GlobalState\";\nimport Navigator from './Navigator';\n\n\n\n\n// Configure JSS\n\n\nfunction App() {\n  const [state, setState] = React.useState({currentMenuIndex:0});\n\n  return (\n    <GlobalState.Provider value={[state, setState]}>\n      <BrowserRouter>\n        <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          <GlobalStyles />\n\n       \n\n              <Navigator/>\n\n       \n\n\n        </MuiThemeProvider>\n      </BrowserRouter>\n    </GlobalState.Provider>\n  );\n}\n\nserviceWorker.register();\n\nexport default App;\n",["687","688"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/serviceWorker.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/TokenVerifier.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/services/UserService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Dashboard.js",["689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TodayReceivedPaymentView.js",["708"],"import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Title from \"./Title\";\n\nimport { Grid, LinearProgress } from \"@material-ui/core\";\n\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport PaymentService from \"./services/PaymentService\";\n\nconst useStyles = makeStyles((theme) => ({\n  countLabel: {\n   fontSize: \"2rem\",\n   color: theme.palette.secondary.main\n  },\n\n   Icon: {\n    fontSize: \"2rem\"\n\n  },\n\n\n}));\n\nexport default function TodayReceivedPaymentView() {\n  const classes = useStyles();\n\n  const [data, setData] = React.useState(null);\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false);\n\n  const loadData = async () => {\n    setLoading(true);\n\n    try {\n      const res = await PaymentService.getTodayReceivedAmount();\n\n      setData(res.data.result);\n\n      setLoading(false);\n    } catch (err) {\n      console.error(err);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [refresh]);\n\n  useEffect(() => {\n    loadData();\n    const interval = setInterval(() => {\n      setRefresh((refresh) => !refresh);\n    }, 30000);\n\n    return () =>\n    {\n      clearInterval(interval)\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div style={{ position: \"relative\" }}>\n        {loading && (\n          <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n            <LinearProgress color=\"primary\" />\n          </div>\n        )}\n        <Title>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            {/* <Grid item>\n              <div style={{ paddingTop: \"5px\" }}>\n                <HourglassEmptyIcon className={classes.Icon} />\n              </div>\n            </Grid> */}\n            <Grid item>\n                <div style={{width:\"100%\", textAlign:\"center\", fontSize:\"1.5rem\"}}>\n                    Today Money Received\n                </div>\n            </Grid>\n            <Grid item></Grid>\n            <Grid item>\n                {data !== null && <div className={classes.countLabel}>\n                {`£${(\n                    data\n                  ).toLocaleString(\"en-GB\")}`}\n                \n                  </div>\n                }\n            </Grid>\n          </Grid>\n\n\n        </Title>\n      </div>\n    </React.Fragment>\n  );\n}\n",["709","710"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/CopyRight.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/Chart.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/DashboardPreview.js",["711","712","713"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/FindByRef.js",["714","715","716","717","718"],"import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GlobalState from './../GlobalState';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\nimport BookService from './services/BookService';\nimport PersonsBox from './PersonsBox';\nimport { width } from '@material-ui/system';\n\n\nconst isBoolean = (param) => typeof(param) === \"boolean\"\n\nconst useFocus = (initialFocus = false, id = \"\") => {\n    const [focus, setFocus] = React.useState(initialFocus)\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\n    return ([\n        setFocusWithTrueDefault, {\n            autoFocus: focus,\n            key: `${id}${focus}`,\n            onFocus: () => setFocus(true),\n            onBlur: () => setFocus(false),\n        },\n    ])\n}\n\n\nfunction TextMaskCustom(props) {\n    const { inputRef, ...other } = props;\n  \n    return (\n      <MaskedInput\n        {...other}\n        ref={(ref) => {\n          inputRef(ref ? ref.inputElement : null);\n        }}\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\n        // placeholderChar={'\\u2000'}\n        showMask\n      />\n    );\n  }\n  \n  TextMaskCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n  };\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n        marginTop: \"20px\"\n      },  \n\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n\n    Find: {\n        width: \"80px\"\n    },\n\n    Clear:{\n        marginRight: \"20px\"\n    },\n\n    title:{\n        marginTop : \"20px\"\n    },\n\n    TextBox:{\n        marginTop: \"30px\",\n        \"& > *\" :\n        {\n            textAlign: \"center\"\n        },\n  \n    },\n\n    TextField:{\n\n    },\n\n    NoRecordsFound:{\n        marginTop: \"20px\",\n        color: \"red\",\n        fontWeight: \"600\",\n        fontSize: \"14px\",\n    },\n\n    PersonsBox:{\n        marginTop : \"20px\",\n        marginBottom: \"50px\",\n    }\n\n}));\n\nexport default function FindByRef() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  \n  const [setFocus, focusProps] = useFocus(true);\n\n//   useEffect( () =>\n//   {\n//      findRecords();\n//   }, [state.findRecords]);\n\n useEffect ( () => {\n    setState(state => ({...state, foundRecords : []}));\n }, [])\n\n  useEffect( () => {\n    BookService.getBookingsByRef(state.ref).then( (res)=>\n    {\n        if (res.data.length > 0)\n        {\n            setState(state => ({...state, foundRecords : res.data}));\n        }\n    });\n    }, [state.RefreshPersonInfo]);\n\n    const handleChange = (event) =>\n    {\n        setState(state => ({...state, ref : event.target.value}));\n        setState(state => ({...state, refError : false})); \n    }\n\n    const clearField = () =>\n    {\n        setState(state => ({...state, refError : false})); \n        setState(state => ({...state, ref : '___-___-___'}));\n        setState(state => ({...state, foundRecords : []}));\n        setFocus();\n    }\n\n    const findRecords = () =>\n    {\n        if (!state.ref || state.ref.indexOf('_') >= 0)\n        {\n            setState(state => ({...state, refError : true}));  \n            return;\n        }\n\n        setState(state => ({...state, submiting : true}));\n        setState(state => ({...state, foundRecords : []}));\n\n        BookService.getBookingsByRef(state.ref).then( (res)=>\n        {\n            setState(state => ({...state, submiting : false}));\n            if (res.data.length > 0)\n            {\n                setState(state => ({...state, foundRecords : res.data}));\n            }\n            else\n            {\n                setState(state => ({...state, foundRecords : null}));\n            }\n            \n            console.log(res.data);\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n            setState(state => ({...state, submiting : false}));\n        });\n    }\n\n  return (\n    <React.Fragment>\n        <CssBaseline />\n        <div className={classes.title}>\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\n                Find Booking Appoinments\n            </Typography>  \n        </div> \n\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\n\n        <Grid item xs={12} md={12}>\n            <FormControl className={classes.TextBox}>\n                <TextField\n                    {...focusProps}\n                    autoFocus \n                    pattern=\"[0-9]*\"\n                    error = {state.refError ? true : false} \n                    value = {state.ref}\n                    className = {classes.TextField}\n                    width = \"50px\"\n                    onChange={handleChange}\n                    label=\"Reference No.\"\n                    helperText=\"Enter Your 9-digits Reference No.\"\n                    name=\"refNo\"\n                    id=\"refNo\"\n                    variant=\"outlined\"\n                    \n                    size=\"medium\"\n                    margin=\"normal\"\n                    fullWidth = {true}\n                    InputProps={{\n                        inputComponent: TextMaskCustom,\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\n                    }}\n\n                    onKeyPress= {event => {\n                        if (event.key === 'Enter') {\n                            findRecords();\n                        }\n                      }}\n                />         \n            </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n               \n                <Button\n                    disabled = {state.submiting}\n                    color=\"default\"\n                    onClick = {clearField}\n                    onTouchTap = {clearField}\n                    className={classes.Clear}\n                >\n                    Clear \n                </Button>  \n            \n                <Button\n                    type=\"button\"\n                    disabled = {state.submiting}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = {findRecords}\n                    onTouchTap = {findRecords}\n                    className={classes.Find}\n                >\n                    Find \n                </Button>  \n        </Grid>\n\n        <Grid item xs={12} md={12}>\n\n                    \n\n            {state.foundRecords && state.foundRecords.length > 0 && (\n                <React.Fragment>\n\n                    <div className={classes.PersonsBox}>\n                          <PersonsBox/>\n                    </div>\n                    \n\n\n                </React.Fragment>\n            )}   \n\n            {!state.foundRecords && (\n                <React.Fragment>\n\n                <div className={classes.root}>\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\n                </div> \n                   \n                </React.Fragment>\n            )}\n\n        </Grid>\n        \n        \n        </Grid>\n        \n    </React.Fragment>\n   \n  );\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/FindByRef.js",["719","720","721","722"],"import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GlobalState from './../GlobalState';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\nimport BookService from './services/BookService';\nimport PersonsBox from './PersonsBox';\n\n\nconst isBoolean = (param) => typeof(param) === \"boolean\"\n\nconst useFocus = (initialFocus = false, id = \"\") => {\n    const [focus, setFocus] = React.useState(initialFocus)\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\n    return ([\n        setFocusWithTrueDefault, {\n            autoFocus: focus,\n            key: `${id}${focus}`,\n            onFocus: () => setFocus(true),\n            onBlur: () => setFocus(false),\n        },\n    ])\n}\n\n\nfunction TextMaskCustom(props) {\n    const { inputRef, ...other } = props;\n  \n    return (\n      <MaskedInput\n        {...other}\n        ref={(ref) => {\n          inputRef(ref ? ref.inputElement : null);\n        }}\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\n        // placeholderChar={'\\u2000'}\n        showMask\n      />\n    );\n  }\n  \n  TextMaskCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n  };\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n        marginTop: \"20px\"\n      },  \n\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n\n    Find: {\n        width: \"80px\"\n    },\n\n    Clear:{\n        marginRight: \"20px\"\n    },\n\n    title:{\n        marginTop : \"20px\"\n    },\n\n    TextBox:{\n        marginTop: \"30px\",\n        \"& > *\" :\n        {\n            textAlign: \"center\"\n        },\n  \n    },\n\n    TextField:{\n\n    },\n\n    NoRecordsFound:{\n        marginTop: \"20px\",\n        color: \"red\",\n        fontWeight: \"600\",\n        fontSize: \"14px\",\n    },\n\n    PersonsBox:{\n        marginTop : \"20px\",\n        marginBottom: \"50px\"\n    }\n\n}));\n\nexport default function FindByRef() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  \n  const [setFocus, focusProps] = useFocus(true);\n\n//   useEffect( () =>\n//   {\n//      findRecords();\n//   }, [state.findRecords]);\n\n useEffect ( () => {\n    setState(state => ({...state, foundRecords : []}));\n }, [])\n\n  useEffect( () => {\n    BookService.getBookingsByRef(state.ref).then( (res)=>\n    {\n        if (res.data.length > 0)\n        {\n            setState(state => ({...state, foundRecords : res.data}));\n        }\n    });\n    }, [state.RefreshPersonInfo]);\n\n    const handleChange = (event) =>\n    {\n        setState(state => ({...state, ref : event.target.value}));\n        setState(state => ({...state, refError : false})); \n    }\n\n    const clearField = () =>\n    {\n        setState(state => ({...state, refError : false})); \n        setState(state => ({...state, ref : '___-___-___'}));\n        setState(state => ({...state, foundRecords : []}));\n        setFocus();\n    }\n\n    const findRecords = () =>\n    {\n        if (!state.ref || state.ref.indexOf('_') >= 0)\n        {\n            setState(state => ({...state, refError : true}));  \n            return;\n        }\n\n        setState(state => ({...state, submiting : true}));\n        setState(state => ({...state, foundRecords : []}));\n\n        BookService.getBookingsByRef(state.ref).then( (res)=>\n        {\n            setState(state => ({...state, submiting : false}));\n            if (res.data.length > 0)\n            {\n                setState(state => ({...state, foundRecords : res.data}));\n            }\n            else\n            {\n                setState(state => ({...state, foundRecords : null}));\n            }\n            \n            console.log(res.data);\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n            setState(state => ({...state, submiting : false}));\n        });\n    }\n\n  return (\n    <React.Fragment>\n        <CssBaseline />\n        <div className={classes.title}>\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\n                Find Booking Appoinments\n            </Typography>  \n        </div> \n\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\n\n        <Grid item xs={12} md={12}>\n            <FormControl className={classes.TextBox}>\n                <TextField\n                    {...focusProps}\n                    autoFocus \n                    pattern=\"[0-9]*\"\n                    error = {state.refError ? true : false} \n                    value = {state.ref}\n                    className = {classes.TextField}\n                    width = \"50px\"\n                    onChange={handleChange}\n                    label=\"Reference No.\"\n                    helperText=\"Enter Your 9-digits Reference No.\"\n                    name=\"refNo\"\n                    id=\"refNo\"\n                    variant=\"outlined\"\n                    \n                    size=\"medium\"\n                    margin=\"normal\"\n                    fullWidth = {true}\n                    InputProps={{\n                        inputComponent: TextMaskCustom,\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\n                    }}\n\n                    onKeyPress= {event => {\n                        if (event.key === 'Enter') {\n                            findRecords();\n                        }\n                      }}\n                />         \n            </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n               \n                <Button\n                    disabled = {state.submiting}\n                    color=\"default\"\n                    onClick = {clearField}\n                    onTouchTap = {clearField}\n                    className={classes.Clear}\n                >\n                    Clear \n                </Button>  \n            \n                <Button\n                    type=\"button\"\n                    disabled = {state.submiting}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = {findRecords}\n                    onTouchTap = {findRecords}\n                    className={classes.Find}\n                >\n                    Find \n                </Button>  \n        </Grid>\n\n        <Grid item xs={12} md={12}>\n\n                    \n\n            {state.foundRecords && state.foundRecords.length > 0 && (\n                <React.Fragment>\n\n                    <div className={classes.PersonsBox}>\n                          <PersonsBox/>\n                    </div>\n                    \n\n\n                </React.Fragment>\n            )}   \n\n            {!state.foundRecords && (\n                <React.Fragment>\n\n                <div className={classes.root}>\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\n                </div> \n                   \n                </React.Fragment>\n            )}\n\n        </Grid>\n        \n        \n        </Grid>\n        \n    </React.Fragment>\n   \n  );\n}",["723","724"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/CalendarView.js",["725","726","727"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MonthView from './MonthView';\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport WeekView from './WeekView';\nimport dateformat from 'dateformat';\nimport DayView from './DayView';\nimport GlobalState from '../../GlobalState';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\n\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    title: {\n        textAlign: \"center\",\n        fontSize: \"24px\",\n        fontColor: \"#333\"\n    },\n\n  }));\n\nexport default function CalendarView() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\n    const [year, setYear] = React.useState(new Date().getFullYear());\n\n    const [day, setDay] = React.useState(new Date());\n\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\n\n    const [weekDates, setWeekDates] = React.useState([]);\n\n    const [mode, setMode] = React.useState('month');\n    const [selectedTab, setSeletedTab] = React.useState('month');\n\n    const [filter,setFilter] = React.useState('');\n\n    const filterChanged = (event) =>{\n        setFilter(event.target.value);\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\n      }\n\n      const removeFilter = () =>\n      {\n        setFilter('');\n        setState(state => ({...state, dayViewCalFilter : ''}));\n      }\n\n\n    useEffect( () => {\n        const today = new Date();\n        const dayofWeek = today.getDay();\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\n        setFirstDayofWeek(firstdayofweek);\n        setState(state => ({...state, AdminCalendarCache : []}));\n\n        return () =>\n        {\n            setState(state => ({...state, AdminCalendarCache : []}));\n            removeFilter();\n        }\n       \n    }, []);\n\n\n    useEffect( () => {\n        const dates = [];\n        for (var i = 0; i < 7 ; i++)\n        {\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\n        }\n        setWeekDates(dates);\n\n    }, [firstDayofWeek]);\n\n    const handlePrevButton = (event) =>\n    {\n       if (mode === 'month')\n       {\n            if (month === 1)\n            {\n                setYear(year - 1);\n            } \n\n            const newMonth = month === 1 ? 12 : month - 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n       } \n       else if (mode === 'week')\n       {\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\n           setFirstDayofWeek(newFirstDayofWeek);\n\n           setDay(newFirstDayofWeek);\n           setMonth(newFirstDayofWeek.getMonth() + 1);\n           setYear(newFirstDayofWeek.getFullYear());\n\n       }\n       else if (mode === 'day')\n       {\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\n           setDay(newDay);\n\n           const dayofWeek = newDay.getDay();\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n           setMonth(newDay.getMonth() + 1);\n           setYear(newDay.getFullYear());\n       }\n    }\n\n    const handleNextButton = (event) =>\n    {\n        if (mode === 'month')\n        {\n            if (month === 12)\n            {\n                setYear(year + 1);\n            } \n       \n            const newMonth = month === 12 ? 1 : month + 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        }\n        else if (mode === 'week')\n        {\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\n            setFirstDayofWeek(newFirstDayofWeek);\n\n            setDay(newFirstDayofWeek);\n            setMonth(newFirstDayofWeek.getMonth() + 1);\n            setYear(newFirstDayofWeek.getFullYear());\n\n        }\n        else if (mode === 'day')\n        {\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n \n            setMonth(newDay.getMonth() + 1);\n            setYear(newDay.getFullYear());\n        }\n    }\n\n    const goToday = (event) => {\n        const newDay = new Date();\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n    }\n\n    const dayClicked = (event, date) =>\n    {\n        const newDay = new Date(date);\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n        setSeletedTab('day');\n        setMode('day');\n    }\n\n    const getContentFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            return (\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <DayView date={day}/>\n            );\n        }\n    }\n\n    const getCalendarTitleFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\n            let endofWeekStr = '';\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\n            {\n                endofWeekStr = dateformat(endOfWeek,'d');\n            }else\n            {\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\n            }\n\n            return (\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\n            );\n        }\n    }\n\n\n    const handleTabChanged = (event, value) => {\n        if (value && value.length)\n        {\n          setSeletedTab(value);\n          setMode(value);\n        }\n    };\n\n    const getPrevButtonTitle = (_mode) =>\n    {\n        return `Previuos ${mode}`;\n    }\n\n    const getNextButtonTitle = (_mode) =>\n    {\n        return `Next ${mode}`;\n    }\n\n    return (\n        <React.Fragment>\n\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\n            >  \n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"prev\"\n                                onClick = {handlePrevButton}\n                                >\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"next\"\n                                onClick = {handleNextButton}\n                                >\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\n                </div>\n\n            </Grid>\n\n            <Grid item md={6}>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-end\"\n                        spacing = {3}\n                        >\n                            <Grid item>\n                                    {getCalendarTitleFromMode(mode)}\n                            </Grid>\n                            {mode === 'day' && (\n                                        <Grid item>\n                                                <TextField\n                                                    variant=\"standard\"\n                                                    style={{marginBottom : \"5px\"}}\n                                                    value={filter}\n                                                    onChange={filterChanged}\n                                                    margin=\"normal\"\n                                                    size=\"small\"\n                                                    id=\"filter\"\n                                                    label=\"Filter\"\n                                                    name=\"filter\"\n                                                    autoComplete=\"off\"\n                                                    InputProps={{\n                                                        endAdornment : \n                                                            <InputAdornment position=\"end\">\n                                                                <Tooltip title=\"Clear\">\n                                                                            <IconButton\n                                                                            aria-label=\"remove filter\"\n                                                                            onClick={() => removeFilter()}\n                                                                            onMouseDown={() => removeFilter()}\n                                                                        >\n                                                                            <CloseIcon/>\n                                                                        </IconButton>\n                                                                </Tooltip>\n                                                            \n                                                            </InputAdornment>\n                                                          \n                                                    }}\n                                                   \n                                                />\n                                        </Grid>\n                            )}\n                           \n                    </Grid>\n                \n            </Grid>\n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\n                    <ToggleButtonGroup\n                        value={selectedTab}\n                        exclusive\n                        onChange={handleTabChanged}\n                        aria-label=\"select view mode\"\n                    >\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\n                                month\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\n                                week\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\n                                day\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n            </Grid>\n\n           </Grid> \n\n             {getContentFromMode(mode)}\n\n        </React.Fragment>\n\n\n    );\n\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/CalendarView.js",["728","729","730"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/DateFormatter.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/BookService.js",["731"],"import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/optimalvision/book/bookappointment`, payload);\n   }\n\n\n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/optimalvision/book/sendregformemail?id=${bookingId}`);\n   }\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/optimalvision/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/optimalvision/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/optimalvision/book/getshouldrefundscount?`);\n   }\n\n   \n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/optimalvision/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/optimalvision/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/optimalvision/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/optimalvision/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/optimalvision/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/optimalvision/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/optimalvision/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/optimalvision/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/BookingTable.js",["732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750"],"import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from '../GlobalState';\nimport { getMenuIndex } from '../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n},\n\nnotifyIcon:{\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"50%\",\n  backgroundColor : \"rgb(220, 0, 78)\",\n  marginLeft: \"10px\"\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Archived Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n\n      {\n        field: \"_id\",\n        headerName: \" \",\n        width: 120,\n        renderCell: (params) => {\n          return (\n            <React.Fragment>\n              <IconButton\n                color=\"primary\"\n                onClick={(event) => openDetailsDialog(event, params.value)}\n              >\n                <SearchIcon />\n              </IconButton>\n\n              <span\n                style={{\n                  color: \"#058700\",\n                  fontWeight: \"500\",\n                  fontSize: \"0.8rem\",\n                }}\n              >\n                {params.getValue(\"questions\") && \"Self-Test\"}\n              </span>\n            </React.Fragment>\n          );\n        },\n      },\n\n      {\n        field: \"timeStamp\",\n        headerName: \"TimeStamp\",\n        width: 200,\n        valueFormatter: (params) => {\n          return formatTimeStamp(params.value);\n        },\n      },\n\n      {\n        field: \"bookingDate\",\n        headerName: \"B Date\",\n        width: 110,\n        valueFormatter: (params) => {\n          return FormatDateFromString(params.value);\n        },\n      },\n      {\n        field: \"bookingTimeNormalized\",\n        headerName: \"B Time\",\n        width: 200,\n        valueGetter: (params) => {\n          return params.getValue(\"bookingTime\");\n        },\n      },\n      { field: \"fullname\", headerName: \"Fullname\", width: 250 },\n      { field: \"email\", headerName: \"Email\", width: 200 },\n      { field: \"phone\", headerName: \"Telephone\", width: 150 },\n      {\n        field: \"faceToFaceConsultation\",\n        headerName: \"Consultation\",\n        width: 250,\n        renderCell: (params) => {\n          return (\n            <React.Fragment>\n              {params.getValue(\"faceToFaceConsultation\") && (\n                <span> Face to Face </span>\n              )}\n              {params.getValue(\"faceToFaceConsultation\") && (\n                <span style={{ paddingLeft: \"5px\", paddingRight: \"5px\" }}>\n                  {\" \"}\n                  -{\" \"}\n                </span>\n              )}\n              {params.getValue(\"telephoneConsultation\") && (\n                <span> Telephone </span>\n              )}\n            </React.Fragment>\n          );\n        },\n      },\n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {\n        field: \"_id\",\n        headerName: \" \",\n        width: 120,\n        renderCell: (params) => {\n          return (\n            <React.Fragment>\n              <IconButton\n                color=\"primary\"\n                onClick={(event) => openDetailsDialog(event, params.value)}\n              >\n                <SearchIcon />\n              </IconButton>\n\n              <span\n                style={{\n                  color: \"#058700\",\n                  fontWeight: \"500\",\n                  fontSize: \"0.8rem\",\n                }}\n              >\n                {params.getValue(\"questions\") && \"Self-Test\"}\n              </span>\n            </React.Fragment>\n          );\n        },\n      },\n\n\n\n\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 200 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\n      { field: 'email', headerName: 'Email', width: 200 },\n      { field: 'phone', headerName: 'Telephone', width: 150 },\n      { field: 'faceToFaceConsultation', headerName: 'Consultation', width: 250 , renderCell: (params) => {\n        return (\n          <React.Fragment>\n              {params.getValue('faceToFaceConsultation') && <span> Face to Face </span>}\n              {params.getValue('faceToFaceConsultation') && <span style={{paddingLeft:\"5px\", paddingRight:\"5px\"}}> - </span>}\n              {params.getValue('telephoneConsultation') && <span> Telephone </span>}\n          </React.Fragment>\n        )\n      }},\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n     \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.fullname?.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n              \n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.showCreateExcel && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen && selectedBooking && selectedBooking.fullname}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-from\"\n                        label=\"From\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {/* {FormatDateFromString(booking.birthDate)} */}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/BookingTable.js",["751","752","753","754","755","756","757","758","759","760","761","762","763","764"],"import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n},\n\nnotifyIcon:{\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"50%\",\n  backgroundColor : \"rgb(220, 0, 78)\",\n  marginLeft: \"10px\"\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Deleted Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n\n           <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n\n          \n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n        if (!params.value)\n        {\n           return ( \n              <React.Fragment>                    \n                    <CloseIcon className={classes.closeIcon}/>                        \n              </React.Fragment>\n           );\n        }\n        else\n        {\n           if (params.getValue('paidBy') === 'credit card')\n           {\n             return ( <CreditCardIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'cash')\n           {\n             return ( <LocalAtmIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'corporate')\n           {\n             return ( <BusinessIcon className={classes.checkIcon}/> );\n           }\n           else\n           {\n             return '';  \n           }\n        }\n  }\n },\n\n\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \n        return formatTimeStamp(params.value);\n        }\n      },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n          }\n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink}\n              //  onClick={\n              //   () => {\n              //     console.log(params.value);\n  \n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n              //     setState(state => ({...state, ref : params.value}));\n              //     setState(state => ({...state, refError : false})); \n              //     setState(state => ({...state, foundRecords : []}));\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\n              //   }\n              // }\n              \n              >\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\n      { field: 'email', headerName: 'Email', width: 200 },\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n            <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n               if (!params.value)\n               {\n                  return ( \n                    <React.Fragment>\n                                <CloseIcon className={classes.closeIcon}/> \n                                {parseInt(params.getValue('deposit')) > 0 && props.date === 'deleted' && (\n                                      <span className={classes.notifyIcon}>&nbsp;</span>\n                                )}\n\n                               \n                    </React.Fragment>\n                     \n                        \n                  \n                  \n                  );\n               }\n               else\n               {\n                  if (params.getValue('paidBy') === 'credit card')\n                  {\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'cash')\n                  {\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'corporate')\n                  {\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\n                  }\n                  else\n                  {\n                    return '';  \n                  }\n               }\n         }\n        },\n        { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n          return FormatDateFromString(params.value);\n      }\n   },\n  { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n    return params.getValue('bookingTime');\n  }},\n  { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n      if (params.value === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}>  BM </span>\n        );\n    \n      }else if (params.value === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> PA </span>\n        );\n      }\n      else{\n        return 'Unknown';\n      }\n    }\n  },\n  { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n    return (\n      <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n          <Link className={classes.RefLink}\n          //  onClick={\n          //   () => {\n          //     console.log(params.value);\n\n          //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n          //     setState(state => ({...state, ref : params.value}));\n          //     setState(state => ({...state, refError : false})); \n          //     setState(state => ({...state, foundRecords : []}));\n          //     setState(state => ({...state, findRecords : !state.findRecords}));\n          //   }\n          // }\n          \n          >\n            {params.value}\n          </Link>\n      </Tooltip>\n\n    );\n  }},\n  { field: 'fullname', headerName: 'Fullname', width: 250 },\n  { field: 'email', headerName: 'Email', width: 200 },\n  { field: 'phone', headerName: 'Tel', width: 150 },\n  { field: 'notes', headerName: 'Notes', width: 500 },\n\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n     \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.fullname.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n             || (element.service.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n               \n              \n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.showCreateExcel && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-from\"\n                        label=\"From\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {/* {FormatDateFromString(booking.birthDate)} */}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/BookingView.js",["765","766","767","768"],"import React, { useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport BookService from './services/BookService';\nimport * as dateformat from 'dateformat';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\nimport { LinearProgress } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function BookingView() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const seeMoreRecords = (event) => {\n    event.preventDefault();\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\n  }\n\n  const loadData = () => \n  {\n    setData({bookings: data.bookings, isFetching: true});\n    setLoading(true)\n    BookService.getRecentBookings().then( (res) =>{\n      setLoading(false)\n        setData({bookings: res.data, isFetching: false});\n\n    }).catch( (err) => {\n      setLoading(false)\n        console.log(err);\n        setData({bookings: data.bookings, isFetching: false});\n    });\n  }\n\n\n  useEffect( () => {\n          loadData();\n        },\n        [refresh]);   \n\n\n   useEffect( () => {\n     loadData();\n     const interval = setInterval(() => {\n       setRefresh(refresh => !refresh);\n     }, 30000);\n\n     return () =>\n     {\n       clearInterval(interval)\n     }\n     \n   }, []) ;    \n\n   const formatTimeStamp = (timeStamp) =>\n   {\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n     if (todayStr === timeStampStr)\n     {\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n     }\n     else\n     {\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n     }\n   }\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Recent Bookings</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>TimeStamp</TableCell>        \n            <TableCell>Fullname</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Tel</TableCell>\n            <TableCell>Booked Date</TableCell>\n            <TableCell>Booked Time</TableCell> \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.bookings.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\n              <TableCell>{row.fullname}</TableCell>\n              <TableCell>{row.email}</TableCell>\n              <TableCell>{row.phone}</TableCell>\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\n              <TableCell>{row.bookingTime}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\n          See more records\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/BookingView.js",["769","770","771","772"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/BookingView.js",["773","774","775","776"],"import React, { useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport BookService from './services/BookService';\nimport * as dateformat from 'dateformat';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\nimport { LinearProgress } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function BookingView() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const seeMoreRecords = (event) => {\n    event.preventDefault();\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\n  }\n\n  const loadData = () => \n  {\n    setData({bookings: data.bookings, isFetching: true});\n    setLoading(true)\n    BookService.getRecentBookings().then( (res) =>{\n      setLoading(false)\n        setData({bookings: res.data, isFetching: false});\n\n    }).catch( (err) => {\n      setLoading(false)\n        console.log(err);\n        setData({bookings: data.bookings, isFetching: false});\n    });\n  }\n\n\n  useEffect( () => {\n          loadData();\n        },\n        [refresh]);   \n\n\n   useEffect( () => {\n     loadData();\n     const interval = setInterval(() => {\n       setRefresh(refresh => !refresh);\n     }, 30000);\n\n     return () =>\n     {\n       clearInterval(interval)\n     }\n     \n   }, []) ;    \n\n   const formatTimeStamp = (timeStamp) =>\n   {\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n     if (todayStr === timeStampStr)\n     {\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n     }\n     else\n     {\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n     }\n   }\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Recent Bookings</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>TimeStamp</TableCell>        \n            <TableCell>Fullname</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Tel</TableCell>\n            <TableCell>Service</TableCell>\n            <TableCell>Booked Date</TableCell>\n            <TableCell>Booked Time</TableCell> \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.bookings.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\n              <TableCell>{row.fullname}</TableCell>\n              <TableCell>{row.email}</TableCell>\n              <TableCell>{row.phone}</TableCell>\n              <TableCell>{row.service}</TableCell>\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\n              <TableCell>{row.bookingTime}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\n          See more records\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/Chart.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/Chart.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/CurrentVisits.js",["777","778"],"import React, { useEffect } from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Title from \"./Title\";\nimport { Grid, LinearProgress, Tooltip } from \"@material-ui/core\";\nimport * as dateformat from \"dateformat\";\nimport BookService from \"./services/BookService\";\nimport BookingDialog from \"./BookingDialog\";\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    margin: \"5px\",\n    padding: \"5px\",\n    maxWidth: \"90px\",\n    minHeight: \"30px\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n    borderRadius: \"5px\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    align: \"center\",\n\n    \"&:hover\": {\n      background: \"#3f51b5\",\n      color: \"#ebedf7\",\n    },\n  },\n});\n\nconst isWeekend = (date) => {\n  return (\n    date.getDay() === 1 ||\n    date.getDay() === 2 ||\n    date.getDay() === 3 ||\n    date.getDay() === 6 ||\n    date.getDay() === 0\n  );\n};\n\nconst isThursday = (date) => {\n  return date.getDay() === 4; /// Thursday\n};\n\nconst isFriday = (date) => {\n  return date.getDay() === 5; /// Friday\n};\n\nconst getCurrentTimeSlot = (now) => {\n  if (isWeekend(now)) {\n    return null;\n  }\n\n  var min = now.getMinutes();\n  var hour = now.getHours();\n\n  if (isThursday(now) && hour < 13) {\n    return null;\n  }\n\n  if (isFriday(now) && hour >= 13) {\n    return null;\n  }\n\n  if (hour < 10 || hour >= 18) return null;\n\n  const slotMinStr = min < 30 ? \"00\" : \"30\";\n  const pmStr = hour >= 12 ? \"PM\" : \"AM\";\n\n  if (hour > 12) hour = hour - 12;\n\n  const slotHourStr = `0${hour}`;\n\n  return `${slotHourStr}:${slotMinStr} ${pmStr}`;\n};\n\nconst getCurrentTimeSlotLabel = (timeStr) => {\n  if (!timeStr) {\n    return \"Closed\";\n  }\n\n  let endTimeStr = \"\";\n  switch (timeStr) {\n    case \"10:00 AM\":\n      endTimeStr = \"10:30 AM\";\n      break;\n    case \"10:30 AM\":\n      endTimeStr = \"11:00 AM\";\n      break;\n    case \"11:00 AM\":\n      endTimeStr = \"11:30 AM\";\n      break;\n    case \"11:30 AM\":\n      endTimeStr = \"12:00 PM\";\n      break;\n    case \"12:00 PM\":\n      endTimeStr = \"12:30 PM\";\n      break;\n    case \"12:30 PM\":\n      endTimeStr = \"01:00 PM\";\n      break;\n    case \"01:00 PM\":\n      endTimeStr = \"01:30 PM\";\n      break;\n    case \"01:30 PM\":\n      endTimeStr = \"02:00 PM\";\n      break;\n    case \"02:00 PM\":\n      endTimeStr = \"02:30 PM\";\n      break;\n    case \"02:30 PM\":\n      endTimeStr = \"03:00 PM\";\n      break;\n    case \"03:00 PM\":\n      endTimeStr = \"03:30 PM\";\n      break;\n    case \"03:30 PM\":\n      endTimeStr = \"04:00 PM\";\n      break;\n    case \"04:00 PM\":\n      endTimeStr = \"04:30 PM\";\n      break;\n    case \"04:30 PM\":\n      endTimeStr = \"05:00 PM\";\n      break;\n    case \"05:00 PM\":\n      endTimeStr = \"05:30 PM\";\n      break;\n    case \"05:30 PM\":\n      endTimeStr = \"06:00 PM\";\n      break;\n\n    default:\n      endTimeStr = \"\";\n      break;\n  }\n\n  return `${timeStr} - ${endTimeStr}`;\n};\n\nexport default function CurrentVisits() {\n  const classes = useStyles();\n\n  const [current, setCurrent] = React.useState(new Date());\n  const [bookings, setBookings] = React.useState([]);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrent(new Date());\n    }, 30000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useEffect(() => {\n    const currentTimeSlot = getCurrentTimeSlot(current);\n    if (!currentTimeSlot) return;\n    const todayStr = dateformat(current, \"yyyy-mm-dd\");\n    setLoading(true);\n    BookService.getBookingsByDateStrandTime(todayStr, currentTimeSlot)\n      .then((res) => {\n        setLoading(false);\n        if (res.data.status === \"OK\") {\n          setBookings([...res.data.bookings]);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }, [current]);\n\n  const getBookingsBox = (_bookings) => {\n    if (_bookings && _bookings.length > 0) {\n      return (\n        <div className={classes.root}>\n          <Grid\n            container\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n            spacing={0}\n          >\n            {_bookings.map((booking) => (\n              <Grid item>\n                <div\n                  className={classes.bookingBox}\n                  onClick={(event) => bookingCliked(event, booking)}\n                >\n                  <span style={{ textAlign: \"center\" }}>\n                    {\" \"}\n                    {`${booking.surnameCapital}`.substring(0, 10)}{\" \"}\n                  </span>\n                </div>\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      );\n    }\n  };\n\n  const bookingCliked = (event, booking) => {\n    setSelectedBooking(booking);\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  return (\n    <React.Fragment>\n      {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Title>Current Visits</Title>\n      <Typography component=\"p\" variant=\"h6\">\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\n      </Typography>\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\n        on {dateformat(current, \"dd mmmm, yyyy\")}\n      </Typography>\n\n      {getBookingsBox(bookings)}\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={openDialog}\n        onClose={handleCloseDialog}\n      />\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/services/BookService.js",["779"],"import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/gp/book/addnewbooking`, payload);\n   }\n\n\n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/gp/book/sendregformemail?id=${bookingId}`);\n   }\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/gp/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/gp/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/gp/book/getshouldrefundscount?`);\n   }\n\n   \n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/gp/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gp/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gp/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/gp/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gp/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gp/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gp/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gp/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gp/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/gp/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/gp/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/gp/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/gp/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/gp/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/gp/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/gp/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/gp/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/gp/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/gp/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/gp/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/services/BookService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/Corporates.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/services/PatientService.js",["780"],"import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class PatientService {\n\n\n   static registerNewPatient = (payload) =>\n   {\n      return API.post(`/api/optimalvision/patient/registernewpatient`, payload);\n   }\n\n   static updatePatient = (payload) =>\n   {\n      return API.post(`/api/optimalvision/patient/updatepatient`, payload);\n   } \n\n   static deletePatient = (id) =>\n   {\n      return API.post(`/api/optimalvision/patient/deletepatient?id=${id}`);\n   } \n\n   static unDeletePatient = (id) =>\n   {\n      return API.post(`/api/optimalvision/patient/undeletepatient?id=${id}`);\n   } \n   \n    static getPatientById = (id) =>\n    {\n       return API.get(`/api/optimalvision/patient/getpatientbyid?id=${id}`);\n    }\n\n    static getPatientByPatientId = (patiantID) =>\n    {\n       return API.get(`/api/optimalvision/patient/getpatientbypatientid?patiantID=${patiantID}`);\n    }\n\n    static getAllPatients = () =>\n    {\n      return API.get(`/api/optimalvision/patient/getallpatients`);\n    }\n\n    static getDeletedPatients= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/patiant/getdeletedpatients`);\n    }\n\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/PersonsBox.js",["781","782","783","784","785","786","787","788","789"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport GlobalState from './../GlobalState';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\nimport PDFService from './services/PDFService';\n\nimport {calculatePrice} from './PriceCalculator';\n\n\nimport bookingService from './services/BookService';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\n\nimport PrintIcon from '@material-ui/icons/Print';\n\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor : \"#373737\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxRed: {\n    backgroundColor : \"#dc2626\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor : \"#fafafa\",\n    color: \"#333\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n     listStyle: \"none\",\n     padding: \"0\",\n     margin: \"0\"\n  },\n\n  li: {\n    marginBottom : \"15px\"\n  },\n\n\n  icon: {\n    marginRight : \"8px\"\n  },\n\n  root: {\n    width: '100%',\n  },\n\n  lineThrough:{\n    textDecoration : \"line-through\",\n  },\n\n\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails:{\n    textAlign: \"left\",\n  },\n\n  infoTitle:{\n    fontWeight: \"800\",\n    marginRight: \"10px\"\n  },\n\n  infoData:{\n    fontWeight: \"400\",\n  },\n\n  title:\n  {\n    // textAlign : \"center\",\n    // fontWeight : \"500\",\n    // margin: \"10px\",\n    // backgroundColor : \"#eee\",\n    // padding : \"10px\",\n    // borderRadius : \"4px\"\n    textAlign: \"center\",\n    fontWeight : \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\"\n\n  },\n\n  Accordion:{\n    backgroundColor : \"#f5f5f5\",\n    color: \"#222\"\n  },\n\n  AccordionDeleted:{\n    backgroundColor : \"#aaa\",\n    color: \"#555\"\n  },\n\n  DownloadForm:{\n      marginTop: \"10px\",\n      marginBottom : \"10px\"\n  },\n\n  infoDataCharges:{\n    fontSize : \"18px\",\n    color: \"green\",\n    fontWeight : \"600\"\n  },\n\n  infoDataChargesHigher:{\n    fontSize : \"18px\",\n    color: \"red\",\n    fontWeight : \"600\"\n  },\n  BookedLabel:{\n    color: \"#606060\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\"\n  },\n\n  PatientAttendedLabel:{\n    color: \"#0066aa\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\"\n  },\n\n  SampleTakenLabel:{\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\"\n  },\n\n  ReportSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  ReportCertSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  PositiveLabel:{\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\"\n  },\n\n\n  EditButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    width: \"400px\"   \n  },\n\n  RestoreButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#fafafa\",\n    color: \"#555\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\" ,\n    width: \"400px\"    \n  },\n\n\n  DeleteButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\"\n    },\n\n    padding: \"10px\",\n    width: \"400px\"   \n    \n  },\n\n  SaveButton:\n  {\n    marginBottom : \"10px\",\n    padding: \"10px\",\n\n    backgroundColor : \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n      \n    },\n    width: \"400px\"   \n\n  },\n\n  CancelButton:\n  {\n    marginBottom : \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    \n    padding : \"0px\"\n\n  },\n\n  checkIcon:{\n    color: \"green\",   \n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  centeredLabel : {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n\n\n\n\n\n\n}));\n\n\n\n\nexport default function PersonsBox() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [expanded, setExpanded] = React.useState('panel0');\n\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\n\n    const [saving, setSaving] =  React.useState(false);\n    const [deleting, setDeleting] =  React.useState(false);\n    const [restoring, setRestoring] =  React.useState(false);\n\n    const [validationError, setValidationError] = React.useState({});\n\n\n    const [bookingDate, setBookingDate] = React.useState('');\n    const [bookingTime, setBookingTime] = React.useState('');\n\n    const [fullname, setFullname] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [tel, setTel] = React.useState('');\n    const [service, setService] = React.useState('');\n    const [notes, setNotes] = React.useState('');\n\n\n    const bookingDateChanged = (event) =>\n    {\n      setBookingDate(event.target.value);\n      setValidationError({...validationError, bookingDateError : false});\n    }\n\n    const bookingTimeChanged = (event) =>\n    {\n      setBookingTime(event.target.value);\n      setValidationError({...validationError, bookingTimeError : false});\n    }\n\n    const fullnameChanged = (event) =>\n    {\n      setFullname(event.target.value);\n    }\n\n    const emailChanged = (event) =>\n    {\n      setEmail(event.target.value);\n    }\n\n    const telChanged = (event) =>\n    {\n      setTel(event.target.value);\n    }\n\n    const serviceChanged = (event) =>\n    {\n      setService(event.target.value);\n    }\n\n    const notesChanged = (event) =>\n    {\n      setNotes(event.target.value);\n    }\n\n\n    const handleChange = (panel) => (event, isExpanded) => {\n      setExpanded(isExpanded ? panel : false);\n    };\n\n    const getStatusLabel = (status) => {\n      if (status === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}> Booking Made </span>\n        );\n    \n      }else if (status === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\n        );\n    \n      }\n      else{\n        return 'Unknown';\n      }\n    }\n\n\n   const handleEditModeChanged = (edit, person) => {\n\n       if (edit)\n       {\n         setFullname(person.fullname);\n         setBookingDate(FormatDateFromString(person.bookingDate));\n         setBookingTime(person.bookingTime);\n         setEmail(person.email);\n         setTel(person.phone);\n         setService(person.service)\n         if (person.notes)\n         {\n          setNotes(person.notes);\n         }\n        \n         setEditMode({edit: edit, person: person});\n\n       }\n       else if (!edit && !person)\n       {\n         setEditMode({edit: edit, person: person});\n       }\n       else if (!edit && person)\n       {\n          const booking = {};\n          const bookingId = person._id;\n          booking.email = email;\n          booking.phone = tel;\n          booking.fullname = fullname;\n          booking.notes = notes;\n          booking.service = service;\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\n          booking.bookingTime = bookingTime;\n          booking.bookingRef = person.bookingRef;\n\n          if  (validateBooking(booking))\n          {\n            updateBooking({bookingId: bookingId, person: booking});\n          }\n       }\n   }\n\n   const validateDate = (str) =>\n   {\n     var error = false;\n     if (!str || str.length !== 10)\n     {\n       error = true;\n     }\n\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\n     {\n       error = true;\n     }\n\n     try\n     {\n       \n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n       if (!result)\n       {\n          error = true;\n       }\n\n       const year = parseInt(str.substr(0,4));\n       const month = parseInt(str.substr(5,2));\n       const day = parseInt(str.substr(8,2));\n\n       if (year < 1900)\n       {\n          error = true;\n       }\n\n       if (month < 1 || month > 12)\n       {\n         error = true;\n       }        \n\n       if (day > 31)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n\n\n     return !error;\n   }\n\n   const validateTime =(str) =>\n   {\n     var error = false;\n\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n     if (!result)\n     {\n        error = true;\n     }\n\n     try{\n       const hour = parseInt(str.substr(0,2));\n       const minute = parseInt(str.substr(3,2));\n\n       if (hour < 0 || hour > 12)\n       {\n         error = true;\n       }\n\n       if (minute < 0 || minute > 59)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n     return !error;\n   }\n\n   const validateBooking = (booking) =>\n   {\n      var error = false;\n\n      if (!validateDate(booking.bookingDate))\n      {\n        error = true;\n        setValidationError({...validationError, bookingDateError : true});\n      }\n\n      if (!validateTime(booking.bookingTime))\n      {\n        error = true;\n        setValidationError({...validationError, bookingTimeError : true});\n      }\n     \n\n      return !error;\n   }\n\n   const updateBooking = (payload) =>\n   {\n       setSaving(true);\n       bookingService.updateBooking(payload).then( (res) => {\n        setSaving(false);\n        setEditMode({edit: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n         setSaving(false);\n         setEditMode({edit: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const deleteBooking = (id) =>\n   {\n       setDeleting(true);\n       bookingService.deleteBooking(id).then( (res) => {\n        setDeleting(false);\n        setDeleteMode({delete: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n          setDeleting(false);\n          setDeleteMode({delete: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const restoreBooking = (id) =>\n   {\n       setRestoring(true);\n       bookingService.unDeleteBooking(id).then( (res) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const changeBackToBookingMade = (event, id) =>\n   {\n     setSaving(true);\n     bookingService.changeBackToBookingMade(id).then(res => {\n       setSaving(false);\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n     }).catch(err => {\n       console.log(err);\n       setSaving(false);\n     })\n   }\n\n\n\n   const handleDeleteModeChanged = (del, person) => {\n\n    if (del)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && !person)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && person)\n    {\n        deleteBooking(person._id);\n    }\n  }\n\n  const handleRestoreModeChanged = (restore, person) => {\n\n    if (restore)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && !person)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && person)\n    {\n        restoreBooking(person._id);\n    }\n  }\n\n  return (\n    <React.Fragment>\n          \n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\" alignItems=\"center\">\n          <div className={classes.title}> Following Records Found :</div>\n\n          {state.foundRecords.map((person,index) => (\n   \n                <Grid item xs={12} md={12} key={`panel${index}`}>\n                <div className={classes.root}>\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1bh-content\"\n                        id={`panel${index}bh-header`}\n                    >\n                      {person.deleted && (\n                          <Tooltip  title=\"This record has been deleted.\">\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\n                        </Tooltip>\n                      )}\n\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\n                        <Typography className={classes.secondaryHeading}>\n                        {`${person.fullname}`}\n                        </Typography>\n                    </AccordionSummary>\n\n                    <AccordionDetails className={classes.infoDetails}>\n                        \n\n\n                        <ul className={classes.ul}>\n\n                        {/* Restore Functionality ******************************************* */}  \n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\n                                Are you sure you want to restore this record?\n                              </div>\n                            </li>\n\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\n                                 <Button\n\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\n                                    className={classes.RestoreButton}\n                                 >\n                                   Restore This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Restore this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n\n                           {/*  ******************************************************************* */}\n\n                              {/* Edit Functionality ******************************************* */}\n\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\n                                    className={classes.EditButton}\n                                 >\n                                    Edit Booking Info\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    Save Changes\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                            \n                            {/* ****************************************************************************************** */}\n\n\n                            {/* Delete Functionality ******************************************* */}\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\n                                Are you sure you want to delete this record?\n                              </div>\n                            </li>\n\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\n                                    className={classes.DeleteButton}\n                                 >\n                                   Delete This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Delete this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                                 \n                            {/* ****************************************************************************************** */}\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \n                            \n\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                   {FormatDateFromString(person.bookingDate) }\n                                  </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingDateError}\n                                                      className={classes.TextBox} \n                                                      value={bookingDate}\n                                                      onChange = {bookingDateChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingTimeError}\n                                                      className={classes.TextBox} \n                                                      value={bookingTime}\n                                                      onChange = {bookingTimeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>FULLNAME</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.fullname}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={fullname}\n                                                      onChange = {fullnameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>EMAIL</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={email}\n                                                      onChange = {emailChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TEL</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={tel}\n                                                      onChange = {telChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SERVICE</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.service}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={service}\n                                                      onChange = {serviceChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>NOTES</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.notes}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={notes}\n                                                      onChange = {notesChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>STATUS</span> \n                                {getStatusLabel(person.status)} \n                            </li>\n      \n\n                        </ul>\n\n                    </AccordionDetails>\n                    </Accordion>\n                </div>\n            </Grid> \n          ))}\n    </Grid>\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/Corporates.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/Corporates.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/DateFormatter.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/Title.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/DateFormatter.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/Title.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/PersonsBox.js",["790"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport GlobalState from './../GlobalState';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\nimport PDFService from './services/PDFService';\n\nimport {calculatePrice} from './PriceCalculator';\n\n\nimport bookingService from './services/BookService';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\n\nimport PrintIcon from '@material-ui/icons/Print';\n\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor : \"#373737\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxRed: {\n    backgroundColor : \"#dc2626\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor : \"#fafafa\",\n    color: \"#333\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n     listStyle: \"none\",\n     padding: \"0\",\n     margin: \"0\"\n  },\n\n  li: {\n    marginBottom : \"15px\"\n  },\n\n\n  icon: {\n    marginRight : \"8px\"\n  },\n\n  root: {\n    width: '100%',\n  },\n\n  lineThrough:{\n    textDecoration : \"line-through\",\n  },\n\n\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails:{\n    textAlign: \"left\",\n  },\n\n  infoTitle:{\n    fontWeight: \"800\",\n    marginRight: \"10px\"\n  },\n\n  infoData:{\n    fontWeight: \"400\",\n  },\n\n  title:\n  {\n    // textAlign : \"center\",\n    // fontWeight : \"500\",\n    // margin: \"10px\",\n    // backgroundColor : \"#eee\",\n    // padding : \"10px\",\n    // borderRadius : \"4px\"\n    textAlign: \"center\",\n    fontWeight : \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\"\n\n  },\n\n  Accordion:{\n    backgroundColor : \"#f5f5f5\",\n    color: \"#222\"\n  },\n\n  AccordionDeleted:{\n    backgroundColor : \"#aaa\",\n    color: \"#555\"\n  },\n\n  DownloadForm:{\n      marginTop: \"10px\",\n      marginBottom : \"10px\"\n  },\n\n  infoDataCharges:{\n    fontSize : \"18px\",\n    color: \"green\",\n    fontWeight : \"600\"\n  },\n\n  infoDataChargesHigher:{\n    fontSize : \"18px\",\n    color: \"red\",\n    fontWeight : \"600\"\n  },\n  BookedLabel:{\n    color: \"#606060\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\"\n  },\n\n  PatientAttendedLabel:{\n    color: \"#0066aa\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\"\n  },\n\n  SampleTakenLabel:{\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\"\n  },\n\n  ReportSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  ReportCertSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  PositiveLabel:{\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\"\n  },\n\n\n  EditButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\"   \n  },\n\n  RestoreButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#fafafa\",\n    color: \"#555\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\"   \n  },\n\n\n  DeleteButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\"\n    },\n\n    padding: \"10px\"\n    \n  },\n\n  SaveButton:\n  {\n    marginBottom : \"10px\",\n    padding: \"10px\",\n\n    backgroundColor : \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\"\n    },\n\n  },\n\n  CancelButton:\n  {\n    marginBottom : \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    \n    padding : \"0px\"\n\n  },\n\n  checkIcon:{\n    color: \"green\",   \n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  centeredLabel : {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n\n\n\n\n\n\n}));\n\n\n\n\nexport default function PersonsBox() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [expanded, setExpanded] = React.useState('panel0');\n\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\n\n    const [saving, setSaving] =  React.useState(false);\n    const [deleting, setDeleting] =  React.useState(false);\n    const [restoring, setRestoring] =  React.useState(false);\n\n    const [validationError, setValidationError] = React.useState({});\n\n\n    const [bookingDate, setBookingDate] = React.useState('');\n    const [bookingTime, setBookingTime] = React.useState('');\n\n    const [gender, setGender] = React.useState('');\n    const [title, setTitle] = React.useState('');\n    const [forename, setForename] = React.useState('');\n    const [surname, setSurnme] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [dob, setDOB] = React.useState('');\n    const [tel, setTel] = React.useState('');\n    const [postCode, setPostCode] = React.useState('');\n    const [address, setAddress] = React.useState('');\n    const [notes, setNotes] = React.useState('');\n    const [passport, setPassport] = React.useState('');\n    const [passport2, setPassport2] = React.useState('');\n    const [certificate, setCertificate] = React.useState(false);\n    const [antiBodyTest, setAntiBodyTest] = React.useState(false);\n\n\n    const bookingDateChanged = (event) =>\n    {\n      setBookingDate(event.target.value);\n      setValidationError({...validationError, bookingDateError : false});\n    }\n\n    const bookingTimeChanged = (event) =>\n    {\n      setBookingTime(event.target.value);\n      setValidationError({...validationError, bookingTimeError : false});\n    }\n\n    const genderChanged = (event) =>\n    {\n      setGender(event.target.value);\n    }\n\n    const titleChanged = (event) =>\n    {\n      setTitle(event.target.value);\n    }\n\n    const forenameChanged = (event) =>\n    {\n      setForename(event.target.value);\n    }\n\n    const surnameChanged = (event) =>\n    {\n      setSurnme(event.target.value);\n    }\n\n    const emailChanged = (event) =>\n    {\n      setEmail(event.target.value);\n    }\n\n    const dobChanged = (event) =>\n    {\n      setDOB(event.target.value);\n      setValidationError({...validationError, dobError : false});\n    }\n\n    const telChanged = (event) =>\n    {\n      setTel(event.target.value);\n    }\n\n    const postCodeChanged = (event) =>\n    {\n      setPostCode(event.target.value);\n    }\n\n    const addressChanged = (event) =>\n    {\n      setAddress(event.target.value);\n    }\n\n    const passportChanged = (event) =>\n    {\n      setPassport(event.target.value);\n    }\n\n    const passport2Changed = (event) =>\n    {\n      setPassport2(event.target.value);\n    }\n\n    const certificateChanged = (event) =>\n    {\n      setCertificate(event.target.checked);\n    }\n\n    const antiBodyTestChanged = (event) =>\n    {\n      setAntiBodyTest(event.target.checked);\n    }\n\n\n    const handleChange = (panel) => (event, isExpanded) => {\n      setExpanded(isExpanded ? panel : false);\n    };\n\n    const getStatusLabel = (status) => {\n      if (status === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}> Booking Made </span>\n        );\n    \n      }else if (status === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\n        );\n    \n      }else if (status === 'sample_taken')\n      {\n        return (\n          <span  className={classes.SampleTakenLabel}> Sample Taken </span>\n        );\n    \n      }else if (status === 'report_sent')\n      {\n        return (\n          <span  className={classes.ReportSentLabel}> Report Sent </span>\n        );\n    \n      }else if (status === 'report_cert_sent')\n      {\n        return (\n          <span  className={classes.ReportCertSentLabel}> {`Report & Certificate Sent`} </span>\n        );\n      }\n      else if (status === 'positive')\n      {\n        return (\n          <span  className={classes.PositiveLabel}> {`POSITIVE`} </span>\n        );\n    \n      }\n      else{\n        return 'Unknown';\n      }\n    }\n\n   const downloadForm1 = (id) =>\n   {\n       PDFService.downloadCovidForm1(id).then( (res) => \n       {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n       }).catch( (err) =>\n       {\n           console.log(err);\n       });\n   }\n\n   const downloadForm2 = (id) =>\n   {\n        PDFService.downloadCovidForm2(id).then( (res) => \n        {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n        });\n   }\n\n   const downloadLabResults = (id) =>\n   {\n        PDFService.downloadPdfResult(id).then( (res) => \n        {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n        });\n   }\n\n   const downloadCertificate = (id) =>\n   {\n        PDFService.downloadPdfCert(id).then( (res) => \n        {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n        });\n   }\n\n   const handleEditModeChanged = (edit, person) => {\n\n       if (edit)\n       {\n         setForename(person.forenameCapital);\n         setSurnme(person.surnameCapital);\n         setBookingDate(FormatDateFromString(person.bookingDate));\n         setBookingTime(person.bookingTime.toUpperCase());\n         setGender(person.gender.toUpperCase());\n         setTitle(person.title.toUpperCase());\n         setEmail(person.email.toUpperCase());\n         setDOB(FormatDateFromString(person.birthDate));\n         setTel(person.phone.toUpperCase());\n         setPostCode(person.postCode.toUpperCase());\n         setAddress(person.address.toUpperCase());\n         if (person.notes)\n         {\n          setNotes(person.notes.toUpperCase());\n         }\n        \n         if (person.passportNumber)\n         {\n           setPassport(person.passportNumber.toUpperCase());\n         }\n        \n         if (person.passportNumber2)\n         {\n           setPassport2(person.passportNumber2.toUpperCase());\n         }\n        \n         setCertificate(person.certificate);\n         setAntiBodyTest(person.antiBodyTest);\n\n         setEditMode({edit: edit, person: person});\n\n       }\n       else if (!edit && !person)\n       {\n         setEditMode({edit: edit, person: person});\n       }\n       else if (!edit && person)\n       {\n          const booking = {};\n          const bookingId = person._id;\n          booking.certificate = certificate;\n          booking.antiBodyTest = antiBodyTest;\n          booking.gender = gender;\n          booking.title = title;\n          booking.birthDate = RevertFormatDateFromString(dob);\n          booking.email = email;\n          booking.phone = tel;\n          booking.postCode = postCode;\n          booking.address = address;\n          booking.passportNumber = passport;\n          booking.passportNumber2 = passport2;\n          booking.forename = forename;\n          booking.surname = surname;\n          booking.notes = notes;\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\n          booking.bookingTime = bookingTime;\n          booking.bookingRef = person.bookingRef;\n\n          if  (validateBooking(booking))\n          {\n            updateBooking({bookingId: bookingId, person: booking});\n          }\n       }\n   }\n\n   const validateDate = (str) =>\n   {\n     var error = false;\n     if (!str || str.length !== 10)\n     {\n       error = true;\n     }\n\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\n     {\n       error = true;\n     }\n\n     try\n     {\n       \n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n       if (!result)\n       {\n          error = true;\n       }\n\n       const year = parseInt(str.substr(0,4));\n       const month = parseInt(str.substr(5,2));\n       const day = parseInt(str.substr(8,2));\n\n       if (year < 1900)\n       {\n          error = true;\n       }\n\n       if (month < 1 || month > 12)\n       {\n         error = true;\n       }        \n\n       if (day > 31)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n\n\n     return !error;\n   }\n\n   const validateTime =(str) =>\n   {\n     var error = false;\n\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n     if (!result)\n     {\n        error = true;\n     }\n\n     try{\n       const hour = parseInt(str.substr(0,2));\n       const minute = parseInt(str.substr(3,2));\n\n       if (hour < 0 || hour > 12)\n       {\n         error = true;\n       }\n\n       if (minute < 0 || minute > 59)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n     return !error;\n   }\n\n   const validateBooking = (booking) =>\n   {\n      var error = false;\n\n      if (!validateDate(booking.bookingDate))\n      {\n        error = true;\n        setValidationError({...validationError, bookingDateError : true});\n      }\n\n      if (!validateDate(booking.birthDate))\n      {\n        error = true;\n        setValidationError({...validationError, dobError : true});\n      }\n\n      if (!validateTime(booking.bookingTime))\n      {\n        error = true;\n        setValidationError({...validationError, bookingTimeError : true});\n      }\n     \n\n      return !error;\n   }\n\n   const updateBooking = (payload) =>\n   {\n       setSaving(true);\n       bookingService.updateBooking(payload).then( (res) => {\n        setSaving(false);\n        setEditMode({edit: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n         setSaving(false);\n         setEditMode({edit: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const deleteBooking = (id) =>\n   {\n       setDeleting(true);\n       bookingService.deleteBooking(id).then( (res) => {\n        setDeleting(false);\n        setDeleteMode({delete: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n          setDeleting(false);\n          setDeleteMode({delete: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const restoreBooking = (id) =>\n   {\n       setRestoring(true);\n       bookingService.unDeleteBooking(id).then( (res) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const changeBackToBookingMade = (event, id) =>\n   {\n     setSaving(true);\n     bookingService.changeBackToBookingMade(id).then(res => {\n       setSaving(false);\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n     }).catch(err => {\n       console.log(err);\n       setSaving(false);\n     })\n   }\n\n\n\n   const handleDeleteModeChanged = (del, person) => {\n\n    if (del)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && !person)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && person)\n    {\n        deleteBooking(person._id);\n    }\n  }\n\n  const handleRestoreModeChanged = (restore, person) => {\n\n    if (restore)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && !person)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && person)\n    {\n        restoreBooking(person._id);\n    }\n  }\n\n  return (\n    <React.Fragment>\n          \n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"stretch\">\n          <div className={classes.title}> Following Records Found :</div>\n\n          {state.foundRecords.map((person,index) => (\n   \n                <Grid item xs={12} md={12} key={`panel${index}`}>\n                <div className={classes.root}>\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1bh-content\"\n                        id={`panel${index}bh-header`}\n                    >\n                      {person.deleted && (\n                          <Tooltip  title=\"This record has been deleted.\">\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\n                        </Tooltip>\n                      )}\n\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\n                        <Typography className={classes.secondaryHeading}>\n                        {`${person.forenameCapital} ${person.surnameCapital}`}\n                        </Typography>\n                    </AccordionSummary>\n\n                    <AccordionDetails className={classes.infoDetails}>\n                        \n\n\n                        <ul className={classes.ul}>\n\n                        {/* Restore Functionality ******************************************* */}  \n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\n                                Are you sure you want to restore this record?\n                              </div>\n                            </li>\n\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\n                                    className={classes.RestoreButton}\n                                 >\n                                   Restore This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Restore this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n\n                           {/*  ******************************************************************* */}\n\n                              {/* Edit Functionality ******************************************* */}\n\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\n                                    className={classes.EditButton}\n                                 >\n                                    Edit Booking Info\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    Save Changes\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                            \n                            {/* ****************************************************************************************** */}\n\n\n                            {/* Delete Functionality ******************************************* */}\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\n                                Are you sure you want to delete this record?\n                              </div>\n                            </li>\n\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\n                                    className={classes.DeleteButton}\n                                 >\n                                   Delete This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Delete this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                                 \n                            {/* ****************************************************************************************** */}\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \n                            \n\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                   {FormatDateFromString(person.bookingDate) }\n                                  </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingDateError}\n                                                      className={classes.TextBox} \n                                                      value={bookingDate}\n                                                      onChange = {bookingDateChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingTimeError}\n                                                      className={classes.TextBox} \n                                                      value={bookingTime}\n                                                      onChange = {bookingTimeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>GENDER</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.gender?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={gender}\n                                                      onChange = {genderChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>TITLE</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.title?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={title}\n                                                      onChange = {titleChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                             \n                            </li>\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>FORENAME</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.forenameCapital}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={forename}\n                                                      onChange = {forenameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SURNAME</span>\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.surnameCapital}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={surname}\n                                                      onChange = {surnameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>EMAIL</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={email}\n                                                      onChange = {emailChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>D.O.B</span>\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                            {FormatDateFromString(person.birthDate) }\n                                          </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      error={validationError.dobError} \n                                                      className={classes.TextBox} \n                                                      value={dob}\n                                                      onChange = {dobChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TEL</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={tel}\n                                                      onChange = {telChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>POST CODE</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.postCode?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={postCode}\n                                                      onChange = {postCodeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>ADDRESS</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.address?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={address}\n                                                      onChange = {addressChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>PASSPORT NO.</span>\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.passportNumber?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={passport}\n                                                      onChange = {passportChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SECOND PASSPORT NO.</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.passportNumber2?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={passport2}\n                                                      onChange = {passport2Changed}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>REQUEST FOR CERTIFICATE</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.certificate ? ( <CheckIcon className={classes.checkIcon}/> ) :  <CloseIcon className={classes.closeIcon}/> }</span>\n                                <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                    <FormControlLabel className={classes.formControl} \n                                          control={<Checkbox className={classes.formControl}  color=\"secondary\" name=\"certificate\" checked={certificate} onChange={certificateChanged} />}\n                                          label=''\n                                        />\n                                </span>    \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>REQUEST FOR ANTIBODY TEST</span>\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.antiBodyTest ? <CheckIcon className={classes.checkIcon}/> :  <CloseIcon className={classes.closeIcon}/> }</span>  \n                                <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                    <FormControlLabel className={classes.formControl} \n                                          control={<Checkbox className={classes.formControl}  color=\"secondary\" name=\"certificate\" checked={antiBodyTest} onChange={antiBodyTestChanged} />}\n                                          label=''\n                                        />\n                                </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>STATUS</span> \n                                {getStatusLabel(person.status)} \n                                \n                                {person.status === \"sample_taken\" &&\n                                          !(\n                                            editMode.edit && editMode.person._id === person._id\n                                          ) && (\n                                            <Button \n                                                  variant=\"outlined\"\n                                                  color=\"primary\"\n                                                  disabled = {saving}\n                                                  onClick = {event => changeBackToBookingMade(event,person._id)}\n\n                                                    >\n                                              Change Back To Booking Made\n                                            </Button>\n                                          )}\n\n                            </li>\n      \n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TOTAL CHARGES</span> <span className={calculatePrice(person) <= 199 ? classes.infoDataCharges : classes.infoDataChargesHigher}>{`£${calculatePrice(person)}`}</span>  \n                            </li>\n\n                            <li  hidden={person.deleted} >\n                                 <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadForm1(person._id)}}\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\n                                    className={classes.DownloadForm}\n                                 >\n                                    Download Registration Form\n                                </Button>\n                            </li>\n\n                            <li  hidden={person.deleted}>\n                                  <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadForm2(person._id)}}\n                                    // onTouchTap = {() => {downloadForm2(person._id)}}\n                                    className={classes.DownloadForm}\n                                    >\n                                    Download Lab Form\n                                 </Button>\n                            </li>\n\n                            <li hidden={ person.deleted || (person.status !== 'report_sent' && person.status !== 'report_cert_sent') }>\n                                 <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadLabResults(person._id)}}\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\n                                    className={classes.DownloadForm}\n                                 >\n                                    Download Lab Results\n                                </Button>\n                            </li>\n\n                            <li hidden={person.deleted || person.status !== 'report_cert_sent'}>\n                                 <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadCertificate(person._id)}}\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\n                                    className={classes.DownloadForm}\n                                 >\n                                    Download Certificate\n                                </Button>\n                            </li>\n\n                        </ul>\n\n                    </AccordionDetails>\n                    </Accordion>\n                </div>\n            </Grid> \n          ))}\n    </Grid>\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/PriceCalculator.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/PriceCalculator.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/services/api.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/BookingDialog.js",["791","792","793","794","795","796","797","798","799","800","801","802"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceService from \"../services/InvoiceService\";\nimport InvoiceDialog from \"../InvoiceDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n  },\n\n  infoData: {\n    fontWeight: \"400\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n\n    backgroundColor: \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"72px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const handleCloseTimeStampDialog = () => {\n    setOpenTimeStampDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseUndoPayDialog = () => {\n    setOpenUndoPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseResendDialog = () => {\n    setOpenResendDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleClosePayDialog = () => {\n    setOpenPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseRefundDialog = () => {\n    setOpenRefundDialog(false);\n    setSelectedBooking(null);\n  };\n\n  useEffect(() => {\n    if (booking) {\n      const isChanged =\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\n        bookingTime !== booking.bookingTime ||\n        fullname !== booking.fullname ||\n        email !== booking.email ||\n        tel !== booking.phone ||\n        notes !== booking.notes ||\n        service !== booking.packageName;\n\n      setRecordChanged(isChanged);\n    }\n  }, [fieldChanged]);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <div className={classes.BookedLabel}> Booking Made </div>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\n      );\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setFullname(person.fullname);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setEmail(person.email);\n      setTel(person.phone);\n      setService(person.packageName);\n      if (person.notes) {\n        setNotes(person.notes);\n      }\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.email = email;\n      booking.phone = tel;\n      booking.fullname = fullname;\n      booking.notes = notes;\n      booking.packageName = service;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const changeToPatientAttended = (event, id) => {\n    setSaving(true);\n    BookService.changeToPatientAttended(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const Pay = (event, id) => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  const refundPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.refundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setOpenRefundDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const updateShouldRefundsCount = async () => {\n    try {\n      const res = await BookService.getShouldRefundsCount();\n      if (res && res.data && res.data.status === \"OK\") {\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  };\n\n  const downloadRegForm = (id) => {\n    PDFService.downloadSTDRegForm(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendRegForm = (id) => {\n    setSaving(true);\n    setEmailSent(false);\n    BookService.sendRegFormEmail(id)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSent(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const onClose = () => {\n    setEmailSent(false);\n    setEmailSentInvoice(false);\n    setInvoice(null);\n\n    props.onClose();\n  };\n\n  ///*** Invoice  ******************/\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const fetchInvoice = async () => {\n    try {\n      setInvoiceLoaded(false);\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\n      setInvoice(res.data.invoice);\n      setInvoiceLoaded(true);\n    } catch (err) {\n      setInvoiceLoaded(true);\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (props.booking) {\n      fetchInvoice();\n    }\n  }, [props.booking, props.open]);\n\n  const handleCloseInvoiceDialog = (refresh) => {\n    setOpenInvoiceDialog(false);\n    setSelectedBooking(null);\n    fetchInvoice();\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  //***************************** */\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              style={\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\n              }\n            >\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\n                  <IconButton\n                    onClick={() => {\n                      navigator.clipboard.writeText(\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/std/${booking._id}`\n                      );\n                      setCopied(true);\n                      setTimeout(() => {\n                        setCopied(false);\n                      }, 1500);\n                    }}\n                    aria-label=\"delete\"\n                    className={classes.margin}\n                    size=\"small\"\n                  >\n                    <FileCopyOutlinedIcon\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\n                      fontSize=\"14px\"\n                    />\n                  </IconButton>\n                </Tooltip>\n\n                <span\n                  hidden={!copied}\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\n                >\n                  {\" \"}\n                  Copied{\" \"}\n                </span>\n              </div>\n\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"25x\",\n                  right: \"60px\",\n                  backgroundColor: CalendarColors.STD_COLOR,\n                  color: \"#fff\",\n                  padding: \"0px 5px\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                STD\n              </div>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.fullname}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={\n                          booking.tr\n                            ? {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#fff\",\n                                fontSize: 25,\n                              }\n                            : {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#333\",\n                                fontSize: 25,\n                              }\n                        }\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  // height: \"550px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Edit Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          deleteMode.delete ||\n                          (editMode.edit && editMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleEditModeChanged(true, booking);\n                          }}\n                          className={classes.EditButton}\n                        >\n                          Edit Booking Info\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={saving || !recordChanged}\n                          onClick={() => {\n                            handleEditModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          Save Changes\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={saving}\n                          onClick={() => {\n                            handleEditModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to delete this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        {booking.OTCCharges > 0 && (\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\n                            <div>\n                              <Button\n                                disabled={booking.OTCCharges > 0}\n                                type=\"button\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                  handleDeleteModeChanged(true, booking);\n                                }}\n                                className={classes.DeleteButton}\n                              >\n                                Delete This Record\n                              </Button>\n                            </div>\n                          </Tooltip>\n                        )}\n                        {booking.OTCCharges === 0 && (\n                          <Button\n                            disabled={booking.OTCCharges > 0}\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              handleDeleteModeChanged(true, booking);\n                            }}\n                            className={classes.DeleteButton}\n                          >\n                            Delete This Record\n                          </Button>\n                        )}\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Delete this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>FULLNAME</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.fullname}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>EMAIL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>TEL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>NOTES</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.notes}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={notes}\n                                onChange={notesChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span className={classes.infoTitle}>Package</span>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoData}\n                        >\n                          {booking.packageName}\n                        </span>\n                        <span\n                          hidden={\n                            !(\n                              editMode.edit &&\n                              editMode.person._id === booking._id\n                            )\n                          }\n                          className={classes.infoData}\n                        >\n                          <TextField\n                            fullWidth\n                            className={classes.TextBox}\n                            value={service}\n                            onChange={serviceChanged}\n                            inputProps={{\n                              style: {\n                                padding: 0,\n                              },\n                            }}\n                          ></TextField>\n                        </span>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\n                        {getStatusLabel(booking.status)}\n                        {booking.status === \"patient_attended\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeBackToBookingMade(event, booking._id)\n                              }\n                            >\n                              Change Back To Booking Made\n                            </Button>\n                          )}\n                        {booking.status === \"booked\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"default\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeToPatientAttended(event, booking._id)\n                              }\n                            >\n                              Change To Patient Attended\n                            </Button>\n                          )}\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoTitle}\n                        >\n                          Estimated Price\n                        </span>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoData}\n                        >\n                          {booking.estimatedPrice}\n                        </span>\n                      </li>\n\n                      <li hidden={booking.deleted || editMode.edit}>\n                        <Button\n                          disabled={!booking.formData}\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                        >\n                          Download Registration Form\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          booking.deleted || editMode.edit || booking.formData\n                        }\n                      >\n                        <Button\n                          disabled={!booking.email || booking.email.length < 3}\n                          startIcon={<SendIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            sendRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                          style={{ position: \"relative\" }}\n                        >\n                          Send Registration Form Email\n                          {emailSent && (\n                            <div\n                              style={{\n                                position: \"absolute\",\n                                right: \"10px\",\n                                top: \"5px\",\n                                color: \"#05ad19\",\n                              }}\n                            >\n                              Email Sent\n                            </div>\n                          )}\n                        </Button>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\n                        <span style={{ paddingLeft: \"0px\" }}>\n                          {!invoiceLoaded && (\n                            <span className={classes.invoiceNumber}> ... </span>\n                          )}\n                          {invoiceLoaded && invoice && (\n                            <span className={classes.invoiceNumber}>\n                              {\" \"}\n                              {invoice.invoiceNumber}{\" \"}\n                            </span>\n                          )}\n                          {invoiceLoaded && !invoice && (\n                            <span\n                              className={classes.invoiceNumber}\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\n                            >\n                              {\" \"}\n                              N/A{\" \"}\n                            </span>\n                          )}\n                        </span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.deleted && (\n                            <React.Fragment>\n                              {invoiceLoaded && !invoice && (\n                                <Button\n                                  variant=\"outlined\"\n                                  color=\"primary\"\n                                  className={classes.PayButton}\n                                  onClick={() => OpenInvoiceDialog()}\n                                >\n                                  Issue Invoice\n                                </Button>\n                              )}\n\n                              {invoiceLoaded && invoice && (\n                                <React.Fragment>\n                                  <Button\n                                    variant=\"outlined\"\n                                    startIcon={<PrintIcon />}\n                                    color=\"primary\"\n                                    className={classes.printInvoiceButton}\n                                    onClick={() => downloadInvoice(invoice._id)}\n                                  >\n                                    Download Invoice\n                                  </Button>\n\n                                  <Button\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    className={classes.editInvoiceButton}\n                                    onClick={() => OpenInvoiceDialog()}\n                                  >\n                                    Edit Invoice\n                                  </Button>\n\n                                  <Button\n                                    disabled={\n                                      !booking.email || booking.email.length < 3\n                                    }\n                                    startIcon={<SendIcon />}\n                                    type=\"button\"\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                      sendInvoiceEmail(\n                                        invoice._id,\n                                        booking.email\n                                      );\n                                    }}\n                                    style={{\n                                      position: \"relative\",\n                                      marginLeft: \"10px\",\n                                      paddingRight: \"130px\",\n                                      fontSize: \"0.8rem\",\n                                    }}\n                                  >\n                                    Send Invoice By Email\n                                    {emailSentInvoice && (\n                                      <div\n                                        style={{\n                                          position: \"absolute\",\n                                          right: \"10px\",\n                                          top: \"5px\",\n                                          color: \"#05ad19\",\n                                        }}\n                                      >\n                                        Email Sent\n                                      </div>\n                                    )}\n                                  </Button>\n                                </React.Fragment>\n                              )}\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>TOTAL CHARGES</span>{\" \"}\n                        <span\n                          style={{ paddingLeft: \"15px\" }}\n                          className={\n                            !booking.OTCCharges || booking.OTCCharges === 0\n                              ? classes.infoDataChargesHigher\n                              : classes.infoDataCharges\n                          }\n                        >{`£${booking.OTCCharges.toLocaleString(\n                          \"en-GB\"\n                        )}`}</span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.paid &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              className={classes.PayButton}\n                              onClick={(event) => Pay(event, booking._id)}\n                            >\n                              Pay\n                            </Button>\n                          )}\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          booking.paid && (\n                            <React.Fragment>\n                              <span className={classes.PayLabel}>\n                                {\" \"}\n                                <CheckIcon\n                                  className={classes.checkIconSmall}\n                                />{\" \"}\n                                Paid by {booking.paidBy}\n                                {booking.paidBy === \"corporate\"\n                                  ? ` \"${booking.corporate}\" `\n                                  : \"\"}\n                              </span>\n\n                              <Tooltip title=\"Undo Payment\">\n                                <IconButton\n                                  onClick={() => setOpenUndoPayDialog(true)}\n                                >\n                                  <UndoIcon style={{ color: \"red\" }} />\n                                </IconButton>\n                              </Tooltip>\n                            </React.Fragment>\n                          )}\n                      </li>\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n\n            <PayDialog\n              booking={selectedBooking}\n              open={openPayDialog}\n              price={invoice ? invoice.grandTotal : null}\n              handleClose={handleClosePayDialog}\n            />\n\n            <InvoiceDialog\n              booking={selectedBooking}\n              invoice={invoice}\n              open={openInvoiceDialog}\n              handleClose={handleCloseInvoiceDialog}\n            />\n          </Dialog>\n\n          <Dialog\n            open={openUndoPayDialog}\n            onClose={handleCloseUndoPayDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Undo Payment\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to undo payment for this booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\n                Back\n              </Button>\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\n                Yes, Undo Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <Dialog\n            open={openRefundDialog}\n            onClose={handleCloseRefundDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Refund Deposit\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to refund deposit payment for this\n                booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\n                Back\n              </Button>\n              <Button\n                onClick={refundPaymentClicked}\n                color=\"secondary\"\n                autoFocus\n              >\n                Yes, Refund Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/Corporates.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PatientDialog.js",["803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n    AppBar,\n    Backdrop,\n    Button,\n    Checkbox,\n    CircularProgress,\n    DialogActions,\n    DialogContentText,\n    Divider,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Toolbar,\n    Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport NumberFormat from \"react-number-format\";\n\nimport AccessAlarmsIcon from '@material-ui/icons/AccessAlarms';\nimport DateField from \"./DateField\";\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport PatientService from \"./services/PatientService\";\nimport dateFormat from \"dateformat\";\n\nimport SaveIcon from '@material-ui/icons/Save';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`vertical-tabpanel-${index}`}\n            aria-labelledby={`vertical-tab-${index}`}\n            {...other}\n            style={{ width: \"100%\" }}\n        >\n            {value === index && (\n                <div style={{ padding: \"20px\", width: \"100%\" }}>\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `vertical-tab-${index}`,\n        'aria-controls': `vertical-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n\n    root: {\n        paddingTop: \"8px\",\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        display: 'flex',\n        height: 224,\n    },\n    tabs: {\n        borderRight: `1px solid ${theme.palette.divider}`,\n    },\n\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 5,\n        color: \"#fff\",\n    },\n\n    titleCenter: {\n        width: \"100%\",\n        textAlign: \"center\",\n        fontSize: \"1.1rem\",\n        color: theme.palette.primary.main,\n        fontWeight: \"500\",\n        borderBottom: `2px dashed ${theme.palette.primary.main}`\n    },\n\n    eyeText: {\n        width: \"100%\",\n        textAlign: \"left\",\n        fontSize: \"1.1rem\",\n        color: theme.palette.primary.main,\n        fontWeight: \"500\",\n        paddingTop: \"15px\"\n    }\n\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function PatientDialog(props) {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [patient, setPatient] = React.useState({ formData: {} })\n    const [saving, setSaving] = React.useState(false);\n\n\n    const [patientIDError, setPatientIDError] = React.useState(false)\n    const [nameError, setNameError] = React.useState(false)\n    const [surnameError, setSurnameError] = React.useState(false)\n    const [birthDateError, setBirthDateError] = React.useState(false)\n\n    const [patientRepeated, setPatientRepeated] = React.useState(false)\n\n\n    const [value, setValue] = React.useState(0);\n\n    const [history, setHistory] = React.useState([]);\n    const [backupFormData, setBackUpFormData] = React.useState(null);\n\n    const [openDeleteDialog, setOpenDeleteDialog] = React.useState(false)\n\n    const handleCloseDeleteDialog = () => {\n        setOpenDeleteDialog(false)\n    }\n\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    useEffect(() => {\n        if (props.open) {\n            const _history = []\n\n            if (props.patient) {\n                setPatient({ ...props.patient, formData: props.patient.formData ? JSON.parse(props.patient.formData) : {} })\n                setBackUpFormData(props.patient.formData ? JSON.parse(props.patient.formData) : {})\n                if (props.patient.history) {\n                    props.patient.history.forEach(record => {\n                        _history.push(JSON.parse(record))\n                    });\n                    setSelectedVersion(0)\n                }\n            }\n            else {\n                setPatient({ formData: {},  name : props.name || '', surname: props.surname || ''})\n            }\n\n            setHistory(_history.reverse())\n\n        }\n    }, [props.patient, props.open])\n\n\n\n    const handleClose = () => {\n        props.handleClose();\n        setValue(0)\n        setPatient({ formData: {} })\n        setPatientIDError(false)\n        setNameError(false)\n        setSurnameError(false)\n        setPatientRepeated(false)\n    };\n\n    const saveClicked = async () => {\n\n        if (!validatePatient()) {\n            setValue(0)\n            return\n        }\n\n        try {\n            setPatientRepeated(false)\n            setSaving(true)\n            patient.formData = JSON.stringify(patient.formData)\n            if (props.patient) {\n                const res = await PatientService.updatePatient({ id: patient._id, patient: patient })\n                setSaving(false)\n                if (res.data.status === \"OK\") {\n                    setState(state => ({ ...state, patientDialogDataChanged: !state.patientDialogDataChanged }))\n                    handleClose();\n                }\n            } else {\n                const res = await PatientService.registerNewPatient({ patient: patient })\n                setSaving(false)\n                if (res.data.status === \"OK\") {\n                    setState(state => ({ ...state, patientDialogDataChanged: !state.patientDialogDataChanged }))\n                    handleClose();\n                } else if (res.data.status === \"FAILED\" && res.data.error === \"Repeated Patient!\") {\n                    setPatientIDError(true)\n                    setPatientRepeated(true)\n                    setValue(0)\n\n                }\n            }\n        }\n        catch (err) {\n            setSaving(false)\n            console.error(err)\n        }\n    }\n\n    const deleteClicked = async () => {\n\n        setOpenDeleteDialog(false)\n\n        setSaving(true)\n        try {\n            await PatientService.deletePatient(props.patient._id)\n            setSaving(false)\n            setState((state) => ({\n                ...state,\n                patientDialogDataChanged: !state.patientDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        }\n        catch (err) {\n            console.error(err)\n            setSaving(false)\n        }\n    }\n\n\n\n    const validatePatient = () => {\n        var error = false\n        if (!patient.patientID || patient.patientID.trim().length === 0) {\n            error = true\n            setPatientIDError(true)\n        }\n        if (!patient.name || patient.name.trim().length === 0) {\n            error = true\n            setNameError(true)\n        }\n\n        if (!patient.surname || patient.surname.trim().length === 0) {\n            error = true\n            setSurnameError(true)\n        }\n\n        if (patient.birthDate && patient.birthDate.length !== 10) {\n            setBirthDateError(true)\n            error = true\n        }\n\n        return !error\n\n    }\n\n    const formatDate = (date) => {\n        return dateFormat(date, \"dd-mm-yyyy , HH:MM:ss\")\n    }\n\n    const [selectedVersion, setSelectedVersion] = React.useState(0)\n\n    const showHistoryComboBox = () => {\n        return (\n            <React.Fragment>\n                <div style={{ marginTop: \"-10px\" }}>\n                    <span style={{ color: \"#fff\", fontWeight: \"500\", fontSize: \"1rem\", marginRight: \"10px\" }}>\n                        Version :\n                    </span>\n                    <Select\n                        label=\"Version\"\n                        labelId=\"version-label\"\n                        id=\"version-label\"\n                        style={{ color: \"#fff\", padding: \"0px 10px\" }}\n                        value={selectedVersion}\n                        onChange={(event) => {\n                            setSelectedVersion(event.target.value)\n                            if (event.target.value === 0) {\n                                setPatient({ ...patient, formData: backupFormData })\n                            } else {\n                                setPatient({ ...patient, formData: history[event.target.value - 1] })\n                            }\n\n                        }}\n\n                    >\n                        <MenuItem value={0}>{`${formatDate(patient.formData.timeStamp)} ( Current )`}</MenuItem>\n\n                        {history.map((item, index) => (\n                            <MenuItem value={index + 1}>{`${formatDate(item.timeStamp)} ( History )`}</MenuItem>\n                        ))\n                        }\n                    </Select>\n\n                </div>\n            </React.Fragment>\n        )\n    }\n\n\n    return (\n        <React.Fragment>\n            <React.Fragment>\n                <Dialog fullScreen open={props.open} onClose={handleClose} TransitionComponent={Transition}>\n                    <AppBar className={classes.appBar} style={(selectedVersion > 0 && history && history.length > 0) ? { backgroundColor: \"#777\" } : {}} color=\"secondary\">\n                        <Toolbar>\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                                <CloseIcon />\n                            </IconButton>\n                            <Typography variant=\"h6\" className={classes.title}>\n                                {props.title}\n                            </Typography>\n\n\n                            <Button startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" onClick={saveClicked} disabled={selectedVersion > 0 && history && history.length > 0}>\n                                {props.saveButtonText}\n                            </Button>\n                        </Toolbar>\n\n                        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\n\n                            {history && history.length > 0 && (\n                                <Grid item>\n                                    {showHistoryComboBox()}\n                                </Grid>\n                            )}\n                        </Grid>\n\n                    </AppBar>\n\n                    <div className={classes.root}>\n                        <Tabs\n                            orientation=\"vertical\"\n                            variant=\"scrollable\"\n                            value={value}\n                            onChange={handleChange}\n                            aria-label=\"Vertical tabs example\"\n                            indicatorColor=\"secondary\"\n                            textColor=\"secondary\"\n                            className={classes.tabs}\n                        >\n                            <Tab label=\"Personal Details\" {...a11yProps(0)} />\n                            <Tab label={`History & Symptoms`} {...a11yProps(1)} />\n                            <Tab label=\"Dry Eyes\" {...a11yProps(2)} />\n                            <Tab label=\"Ocular Examination\" {...a11yProps(3)} />\n                            <Tab label=\"Diagnostics\" {...a11yProps(4)} />\n                            <Tab label=\"Uncorrected VA\" {...a11yProps(5)} />\n                            <Tab label=\"Refraction\" {...a11yProps(6)} />\n                            <Tab label=\"Auto Refraction\" {...a11yProps(7)} />\n                            <Tab label=\"Manifest Refraction\" {...a11yProps(8)} />\n                            <Tab label=\"Target Refraction\" {...a11yProps(9)} />\n                            <Tab label=\"Recommendation\" {...a11yProps(10)} />\n                        </Tabs>\n                        <TabPanel value={value} index={0}>\n                            <Grid container spacing={4}>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        disabled={props.patient}\n                                        name=\"patientid\"\n                                        id=\"patientid\"\n                                        label=\"Patient ID\"\n                                        fullWidth\n                                        required\n                                        helperText={patientRepeated ? 'This PatientID is already assigned to another patient' : ''}\n                                        error={patientIDError}\n                                        value={patient.patientID || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, patientID: event.target.value })\n                                            setPatientIDError(false)\n                                        }}\n                                        autoComplete=\"none\"\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"firstname\"\n                                        id=\"firstname\"\n                                        label=\"First Name\"\n                                        fullWidth\n                                        required\n                                        error={nameError}\n                                        value={patient.name || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, name: event.target.value })\n                                            setNameError(false)\n                                        }}\n                                        autoComplete=\"none\"\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"surname\"\n                                        id=\"surname\"\n                                        label=\"Surname\"\n                                        fullWidth\n                                        required\n                                        error={surnameError}\n                                        value={patient.surname || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, surname: event.target.value })\n                                            setSurnameError(false)\n                                        }}\n                                        autoComplete=\"none\"\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <FormControl fullWidth variant=\"outlined\" >\n                                        <InputLabel id=\"gender-label\">Gender</InputLabel>\n                                        <Select\n                                            label=\"Gender\"\n                                            labelId=\"gender-label\"\n                                            id=\"gender-label\"\n                                            fullWidth\n                                            style={{ height: \"90px\" }}\n                                            value={patient.gender || ''}\n                                            onChange={(event) => {\n                                                setPatient({ ...patient, gender: event.target.value })\n                                            }}\n\n                                        >\n                                            <MenuItem value={\"Male\"}>Male</MenuItem>\n                                            <MenuItem value={\"Female\"}>Female</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={8} style={{ marginTop: \"-20px\" }} >\n                                    <DateField\n                                        error={birthDateError}\n                                        value={patient.birthDate || ''}\n                                        title=\"DOB\"\n                                        dateChanged={(value) => {\n                                            setPatient({ ...patient, birthDate: value })\n                                            setBirthDateError(false)\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"postcode\"\n                                        id=\"postcode\"\n                                        label=\"Postcode\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.postCode || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, postCode: event.target.value })\n                                        }}\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={8}>\n                                    <TextField\n                                        name=\"address\"\n                                        id=\"address\"\n                                        label=\"Address\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.address || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, address: event.target.value })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"hometel\"\n                                        id=\"hometel\"\n                                        label=\"Home Tel\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.homeTel || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, homeTel: event.target.value })\n                                        }}\n                                        variant=\"outlined\"\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"mobiletel\"\n                                        id=\"mobiletel\"\n                                        label=\"Mobile Tel\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.mobileTel || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, mobileTel: event.target.value })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"email\"\n                                        id=\"email\"\n                                        label=\"Email\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.email || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, email: event.target.value })\n                                        }}\n                                        variant=\"outlined\"\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"occupation\"\n                                        id=\"occupation\"\n                                        label=\"Occupation\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.occupation || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, occupation: event.target.value } })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"gpname\"\n                                        id=\"gpname\"\n                                        label={`GP Name & Address`}\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.gpname || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, gpname: event.target.value } })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"kincontact\"\n                                        id=\"kincontact\"\n                                        label=\"Next of Kin Contact\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.kincontact || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, kincontact: event.target.value } })\n                                        }}\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"prevsighttest\"\n                                        id=\"prevsignttest\"\n                                        label=\"Previous Sight Test\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.prevsighttest || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, prevsighttest: event.target.value } })\n                                        }}\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n\n                                {props.patient && (\n                                    <Grid item xs={12} style={{ marginTop: \"20px\" }}>\n                                        <Button\n                                            onClick={() => setOpenDeleteDialog(true)}\n                                            variant=\"contained\"\n                                            fullWidth\n                                            color=\"primary\"\n                                            // style={{ width: \"100px\" }}\n                                            style={{ backgroundColor: \"#c70000\", color: \"#fff\" }}\n                                            disabled={saving}\n                                        >\n                                            Delete This Patient\n                                  </Button>\n                                    </Grid>\n\n\n                                )}\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cc\"\n                                        id=\"cc\"\n                                        label=\"C.C\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cc || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cc: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"prevmedicalhistory\"\n                                        id=\"prevmedicalhistory\"\n                                        label=\"Previous Medical History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.prevmedicalhistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, prevmedicalhistory: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"prevocularhistory\"\n                                        id=\"prevocularhistory\"\n                                        label=\"Previous Ocular History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.prevocularhistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, prevocularhistory: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"familyhistory\"\n                                        id=\"familyhistory\"\n                                        label=\"Family History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.familyhistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, familyhistory: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"medications\"\n                                        id=\"medications\"\n                                        label=\"Medications\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.medications || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, medications: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"grafth\"\n                                        id=\"grafth\"\n                                        label=\"Graft H\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.grafth || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, grafth: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"allergies\"\n                                        id=\"allregies\"\n                                        label=\"Allergies\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.allergies || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, allergies: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"contactlenswearer\"\n                                        id=\"contactlenswearer\"\n                                        label=\"Contact Lens Wearer\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        placeholder={` Yes/No \\n Soft/RGP/EW`}\n                                        value={patient.formData.contactlenswearer || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, contactlenswearer: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"hobbies\"\n                                        id=\"hobbies\"\n                                        label=\"Lifestyle / Hobbies\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.hobbies || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, hobbies: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"vdu\"\n                                        id=\"vdu\"\n                                        label=\"VDU\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vdu || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vdu: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"driver\"\n                                        id=\"driver\"\n                                        label=\"Driver\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.driver || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, driver: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"othernotes\"\n                                        id=\"othernotes\"\n                                        label=\"Other Notes\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.othernotes || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, othernotes: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <Grid container spacing={4}>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"dryevehistory\"\n                                        id=\"dryevehistory\"\n                                        label=\"Dry Eye History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.dryeyehistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, dryeyehistory: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"nightvisionglare\"\n                                        id=\"nightvisionglare\"\n                                        label=\"Night Vision / Glare\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nightvisionglare || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nightvisionglare: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"ocularirritation\"\n                                        id=\"ocularirritation\"\n                                        label=\"Ocular Irritation\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ocularirritation || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ocularirritation: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"wateryeyes\"\n                                        id=\"wateryeyes\"\n                                        label=\"Watery Eyes\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.wateryeyes || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, wateryeyes: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"speedquestionariedone\"\n                                        id=\"speedquestionariedone\"\n                                        label=\"SPEED Questionnaire Done\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.speedquestionariedone || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, speedquestionariedone: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={3}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <div className={classes.titleCenter || ''}>\n                                        ANTERIOR SEGMENT\n                                    </div>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cornearight\"\n                                        id=\"cornearight\"\n                                        label=\"Cornea (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cornearight || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cornearight: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cornealeft\"\n                                        id=\"cornealeft\"\n                                        label=\"Cornea (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cornealeft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cornealeft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lidslashesright\"\n                                        id=\"lidslashesright\"\n                                        label={`Lids & Lashes (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lidslashesright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lidslashesright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lidslashesleft\"\n                                        id=\"lidslashesleft\"\n                                        label={`Lids & Lashes (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lidslashesleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lidslashesleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"conjunctivaright\"\n                                        id=\"conjunctivaright\"\n                                        label={`Conjunctiva (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.conjunctivaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, conjunctivaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"conjunctivaleft\"\n                                        id=\"conjunctivaleft\"\n                                        label={`Conjunctiva (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.conjunctivaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, conjunctivaleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupilright\"\n                                        id=\"pupilright\"\n                                        label={`Pupil/PERRLA/RPAD/SIZE (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupilright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupilright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupilleft\"\n                                        id=\"pupilleft\"\n                                        label={`Pupil/PERRLA/RPAD/SIZE (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupilleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupilleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acright\"\n                                        id=\"acright\"\n                                        label={`A.C. (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acleft\"\n                                        id=\"acleft\"\n                                        label={`A.C. (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lensright\"\n                                        id=\"lensright\"\n                                        label={`Lens (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lensright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lensright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lensleft\"\n                                        id=\"lensleft\"\n                                        label={`Lens (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lensleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lensleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"vitreousright\"\n                                        id=\"vitreousright\"\n                                        label={`Vitreous (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vitreousright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vitreousright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"vitreousleft\"\n                                        id=\"vitreousleft\"\n                                        label={`Vitreous (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vitreousleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vitreousleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"ombright\"\n                                        id=\"ombright\"\n                                        label={`OMB (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ombright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ombright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"ombleft\"\n                                        id=\"ombleft\"\n                                        label={`OMB (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ombleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ombleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"tbutright\"\n                                        id=\"tbutright\"\n                                        label={`TBUT (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.tbutright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, tbutright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"ombleft\"\n                                        id=\"ombleft\"\n                                        label={`OMB (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ombleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ombleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} style={{ margingTop: \"10px\" }}>\n                                    <div className={classes.titleCenter}>\n                                        POSTERIOR SEGMENT\n                                    </div>\n                                </Grid>\n\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"discright\"\n                                        id=\"discright\"\n                                        label={`DISC (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.discright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, discright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"discleft\"\n                                        id=\"discleft\"\n                                        label={`DISC (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.discleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, discleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cdright\"\n                                        id=\"cdright\"\n                                        label={`C:D (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cdright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cdright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cdleft\"\n                                        id=\"cdleft\"\n                                        label={`C:D (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cdleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cdleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"bloodvesselsright\"\n                                        id=\"bloodvesselsright\"\n                                        label={`Blood Vessels (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.bloodvesselsright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, bloodvesselsright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"bloodvesselsleft\"\n                                        id=\"bloodvesselsleft\"\n                                        label={`Blood Vessels (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.bloodvesselsleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, bloodvesselsleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"macularight\"\n                                        id=\"macularight\"\n                                        label={`Macula (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.macularight || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, macularight: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"maculaleft\"\n                                        id=\"maculaleft\"\n                                        label={`Macula (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.maculaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, maculaleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"peripheryright\"\n                                        id=\"peripheryright\"\n                                        label={`Periphery (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.peripheryright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, peripheryright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"peripheryleft\"\n                                        id=\"peripheryleft\"\n                                        label={`Periphery (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.peripheryleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, peripheryleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={4}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupillowlightdiamright\"\n                                        id=\"pupillowlightdiamright\"\n                                        label=\"Pupil (low light diam) (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupillowlightdiamright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupillowlightdiamright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupillowlightdiamleft\"\n                                        id=\"pupillowlightdiamleft\"\n                                        label=\"Pupil (low light diam) (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupillowlightdiamleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupillowlightdiamleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pachmetryright\"\n                                        id=\"pachmetryright\"\n                                        label=\"Pachmetry (μm) (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pachmetryright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pachmetryright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pachmetryleft\"\n                                        id=\"pachmetryleft\"\n                                        label=\"Pachmetry (μm) (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pachmetryleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pachmetryleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"keratometryright\"\n                                        id=\"keratometryright\"\n                                        label=\"Keratometry (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.keratometryright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, keratometryright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"keratometryleft\"\n                                        id=\"keratometryleft\"\n                                        label=\"Keratometry (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.keratometryleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, keratometryleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acdepthright\"\n                                        id=\"acdepthright\"\n                                        label=\"AC Depth (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acdepthright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acdepthright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acdepthleft\"\n                                        id=\"acdepthleft\"\n                                        label=\"AC Depth (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acdepthleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acdepthleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"maculathicnessright\"\n                                        id=\"maculathicnessright\"\n                                        label=\"Macula Thickness (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.maculathicnessright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, maculathicnessright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"maculathicnessleft\"\n                                        id=\"maculathicnessleft\"\n                                        label=\"Macula Thickness (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.maculathicnessleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, maculathicnessleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"octcommentright\"\n                                        id=\"octcommentright\"\n                                        label=\"OCT Comment (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.octcommentright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, octcommentright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"octcommentleft\"\n                                        id=\"octcommentleft\"\n                                        label=\"OCT Comment (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.octcommentleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, octcommentleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pentacamcommentright\"\n                                        id=\"pentacamcommentright\"\n                                        label=\"Pentacam Comment (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pentacamcommentright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pentacamcommentright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pentacamcommentleft\"\n                                        id=\"pentacamcommentleft\"\n                                        label=\"Pentacam Comment (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pentacamcommentleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pentacamcommentleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={5}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"distancevaright\"\n                                        id=\"distancevaright\"\n                                        label=\"Distance (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.distancevaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, distancevaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"distancevaleft\"\n                                        id=\"distancevaleft\"\n                                        label=\"Distance (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.distancevaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, distancevaleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"distancevabinocular\"\n                                        id=\"distancevabinocular\"\n                                        label=\"Distance (Binocular)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.distancevabinocular || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, distancevabinocular: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"intermediatevaright\"\n                                        id=\"intermediatevaright\"\n                                        label=\"Intermediate (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.intermediatevaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, intermediatevaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"intermediatevaleft\"\n                                        id=\"intermediatevaleft\"\n                                        label=\"Intermediate (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.intermediatevaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, intermediatevaleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"intermediatevabinocular\"\n                                        id=\"intermediatevabinocular\"\n                                        label=\"Intermediate (Binocular)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.intermediatevabinocular || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, intermediatevabinocular: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"nearvaright\"\n                                        id=\"nearvaright\"\n                                        label=\"Near (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nearvaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nearvaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"nearvaleft\"\n                                        id=\"nearvaleft\"\n                                        label=\"Near (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nearvaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nearvaleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"nearvabinocular\"\n                                        id=\"nearvabinocular\"\n                                        label=\"Near (Binocular)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nearvabinocular || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nearvabinocular: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n\n\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={6}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <DateField\n                                        // error={birthDateError}\n                                        title=\"Current Prescription Date\"\n                                        value={patient.formData.refractioncurrentpresdate || ''}\n                                        dateChanged={(value) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, refractioncurrentpresdate: value } })\n                                            // setBirthDateError(false)\n                                        }}\n                                        todayButton={true}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdateright\"\n                                        id=\"spherepresdateright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdateright\"\n                                        id=\"cylpresdateright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdateright\"\n                                        id=\"axispresdateright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdateright\"\n                                        id=\"addpresdateright\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdateright\"\n                                        id=\"vapresdateright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdateleft\"\n                                        id=\"spherepresdateleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdateleft\"\n                                        id=\"cylpresdateleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdateleft\"\n                                        id=\"axispresdateleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdateleft\"\n                                        id=\"addpresdateleft\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdateleft\"\n                                        id=\"vapresdateleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth variant=\"outlined\" >\n                                        <InputLabel id=\"spectype-label\">Spec Type</InputLabel>\n                                        <Select\n                                            label=\"Spec Type\"\n                                            labelId=\"spectype-label\"\n                                            id=\"spectype-label\"\n                                            style={{ textAlign: \"center\" }}\n                                            fullWidth\n                                            value={patient.formData.refractionsepctype || ''}\n                                            onChange={(event) => {\n                                                setPatient({ ...patient, formData: { ...patient.formData, refractionsepctype: event.target.value } })\n                                            }}\n\n                                        >\n                                            <MenuItem value={\"Single Vision\"}>Single Vision</MenuItem>\n                                            <MenuItem value={\"Bifocal\"}>Bifocal</MenuItem>\n                                            <MenuItem value={\"Varifocal\"}>Varifocal</MenuItem>\n                                            <MenuItem value={\"RR\"}>RR</MenuItem>\n\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n\n\n                                <Grid item xs={12}>\n                                    <DateField\n                                        // error={birthDateError}\n                                        title=\"Contact Lens Date\"\n                                        value={patient.formData.contactlensdate || ''}\n                                        dateChanged={(value) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, contactlensdate: value } })\n                                            // setBirthDateError(false)\n                                        }}\n                                        todayButton={true}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdaterightlens\"\n                                        id=\"spherepresdaterightlens\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdaterightlens\"\n                                        id=\"cylpresdaterightlens\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdaterightlens\"\n                                        id=\"axispresdaterightlens\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdaterightlens\"\n                                        id=\"addpresdaterightlens\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdaterightlens\"\n                                        id=\"vapresdaterightlens\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdateleftlens\"\n                                        id=\"spherepresdateleftlens\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdateleftlens\"\n                                        id=\"cylpresdateleftlens\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdateleftlens\"\n                                        id=\"axispresdateleftlens\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdateleftlens\"\n                                        id=\"addpresdateleftlens\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdateleftlens\"\n                                        id=\"vapresdateleftlens\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth variant=\"outlined\" >\n                                        <InputLabel id=\"cltype-label\">CL Type</InputLabel>\n                                        <Select\n                                            label=\"CL Type\"\n                                            labelId=\"cltype-label\"\n                                            id=\"cltype-label\"\n                                            style={{ textAlign: \"center\" }}\n                                            fullWidth\n                                            value={patient.formData.refractioncltype || ''}\n                                            onChange={(event) => {\n                                                setPatient({ ...patient, formData: { ...patient.formData, refractioncltype: event.target.value } })\n                                            }}\n\n                                        >\n                                            <MenuItem value={\"Dailies Soft\"}>Dailies Soft</MenuItem>\n                                            <MenuItem value={\"Monthlies\"}>Monthlies</MenuItem>\n                                            <MenuItem value={\"RGP\"}>RGP</MenuItem>\n\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n\n                                <Grid item xs={12} style={{ marginBottom: \"20px\" }}></Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={7}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"sphereautorefright\"\n                                        id=\"sphereautorefright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.sphereautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, sphereautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylautorefright\"\n                                        id=\"cylautorefright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axisautorefright\"\n                                        id=\"axisautorefright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axisautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axisautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vaautorefright\"\n                                        id=\"vaautorefright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vaautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vaautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}></Grid>\n\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"sphereautorefleft\"\n                                        id=\"sphereautorefleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.sphereautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, sphereautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylautorefleft\"\n                                        id=\"cylautorefleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axisautorefleft\"\n                                        id=\"axisautorefleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axisautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axisautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vaautorefleft\"\n                                        id=\"vaautorefleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vaautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vaautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={8}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <div className={classes.titleCenter}>\n                                        Manifest Refraction\n                                    </div>\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheremanifestright\"\n                                        id=\"spheremanifestright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheremanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheremanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylmanifestright\"\n                                        id=\"cylmanifestright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylmanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylmanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axismanifestright\"\n                                        id=\"axismanifestright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axismanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axismanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addmanifestright\"\n                                        id=\"addmanifestright\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addmanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addmanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vamanifestright\"\n                                        id=\"vamanifestright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vamanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vamanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheremanifestleft\"\n                                        id=\"spheremanifestleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheremanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheremanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylmanifestleft\"\n                                        id=\"cylmanifestleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylmanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylmanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axismanifestleft\"\n                                        id=\"axismanifestleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axismanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axismanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addmanifestleft\"\n                                        id=\"addmanifestleft\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addmanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addmanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vamanifestleft\"\n                                        id=\"vamanifestleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vamanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vamanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} style={{ marginTop: \"50px\" }}>\n                                    <div className={classes.titleCenter}>\n                                        Cycloplegic Refraction\n                                    </div>\n                                </Grid>\n\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherecycloright\"\n                                        id=\"spherecycloright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherecycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherecycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylcycloright\"\n                                        id=\"cylcycloright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylcycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylcycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axiscycloright\"\n                                        id=\"axiscycloright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axiscycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axiscycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addcycloright\"\n                                        id=\"addcycloright\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addcycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addcycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vacycloright\"\n                                        id=\"vacycloright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vacycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vacycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherecycloleft\"\n                                        id=\"spherecycloleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherecycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherecycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylcycloleft\"\n                                        id=\"cylcycloleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylcycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylcycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axiscycloleft\"\n                                        id=\"axiscycloleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axiscycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axiscycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addcycloleft\"\n                                        id=\"addcycloleft\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addcycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addcycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vacycloleft\"\n                                        id=\"vacycloleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vacycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vacycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={9}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheretargetrefright\"\n                                        id=\"spheretargetrefright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheretargetrefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheretargetrefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cyltargetrefright\"\n                                        id=\"cyltargetrefright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cyltargetrefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cyltargetrefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axistargetrefright\"\n                                        id=\"axistargetrefright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axistargetrefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axistargetrefright: event.target.value } })\n                                        }}\n                                    />\n\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                </Grid>\n                                <Grid item xs={12} md={2}></Grid>\n\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheretargetrefleft\"\n                                        id=\"spheretargetrefleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheretargetrefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheretargetrefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cyltargetrefleft\"\n                                        id=\"cyltargetrefleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cyltargetrefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cyltargetrefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axistargetrefleft\"\n                                        id=\"axistargetrefleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axistargetrefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axistargetrefleft: event.target.value } })\n                                        }}\n                                    />\n\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                </Grid>\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={10}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        name=\"recommendation\"\n                                        id=\"recommendation\"\n                                        label=\"Recommendation\"\n                                        fullWidth\n                                        multiline\n                                        rows={15}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.recommendation || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, recommendation: event.target.value } })\n                                        }}\n                                    />\n\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n\n\n                    </div>\n\n                    <Backdrop\n                        className={classes.backdrop}\n                        open={saving}\n                    >\n                        <CircularProgress color=\"inherit\" />\n                    </Backdrop>\n\n\n                    <Dialog\n                        open={openDeleteDialog}\n                        onClose={handleCloseDeleteDialog}\n                        aria-labelledby=\"alert-dialog-title\"\n                        aria-describedby=\"alert-dialog-description\"\n                    >\n                        <DialogTitle style={{ color: \"#d10202\", fontWeight: \"600\" }} id=\"alert-dialog-title\">\n                            {\"Delete Patient\"}\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText\n                                style={{ color: \"#000\", fontWeight: \"500\" }}\n                                id=\"alert-dialog-description\"\n                            >\n                                Are you sure you want to delete this patient?\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleCloseDeleteDialog} color=\"default\">\n                                Back\n                                 </Button>\n                            <Button onClick={deleteClicked} variant=\"contained\" style={{ backgroundColor: \"#d10202\", color: \"#fff\" }}>\n                                Yes, Delete this patient\n                                 </Button>\n                        </DialogActions>\n                    </Dialog>\n\n\n\n                </Dialog>\n            </React.Fragment>\n        </React.Fragment>\n    );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/DateFormatter.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/MonthView.js",["825","826"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport MonthViewCell from './MonthViewCell';\nimport CalendarUtil from './calendar-util';\n\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\nconst days = [1,2,3,4,5,6,7]; \nconst rows = [1,2,3,4,5,6];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"14%\"\n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n    }\n\n  }));\n\nconst MonthView = ({month, year, dayClicked}) => {\n    const classes = useStyles();\n\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\n\n    return (\n        <React.Fragment>\n\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        {dayLables.map(label => (\n                            <th key={`th-${label}`} className={classes.th}>\n                                {label}\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows.map(row => (\n                        <tr>\n                            {days.map(day => (\n                                <td className={classes.td}>\n                                    <MonthViewCell \n                                        key={`${month}${year}${(row-1) * days.length + day}`} \n                                        cellIndex={(row-1) * days.length + day} \n                                        month={month} \n                                        daysInMonth={daysInMonth}\n                                        dayClicked = {dayClicked}\n                                        />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}            \n                </tbody>\n\n            </table>\n\n      \n        </React.Fragment>\n\n\n    );\n}\n\nMonthView.propTypes = {\n    month: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default MonthView;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/WeekView.js",["827","828"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '10:00 AM',\n    '10:30 AM', \n    '11:00 AM', \n    '11:30 AM', \n    '12:00 PM',\n    '12:30 PM',\n    '01:00 PM',\n    '01:30 PM',\n    '02:00 PM',\n    '02:30 PM',\n    '03:00 PM',\n    '03:30 PM',\n    '04:00 PM',\n    '04:30 PM',\n    '05:00 PM',\n    '05:30 PM',\n];\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/WeekView.js",["829","830"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/MonthView.js",["831","832"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/DayView.js",["833","834"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/BookingDialog.js",["835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceDialog from \"../InvoiceDialog\";\nimport InvoiceService from \"../services/InvoiceService\";\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n    color: theme.palette.secondary.main,\n    fontSize: \"0.9rem\",\n  },\n\n  infoData: {\n    fontWeight: \"500\",\n    fontSize: \"1rem\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#b80012\", \n    color: \"#fff\",\n    \"&:hover\": {\n      background: \"#d90015\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n    color: \"#fff\",\n\n    backgroundColor:  \"#bd0d50\",\n    \"&:hover\": {\n      background: \"#d1175e\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"72px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n\n  dialogTitle: {\n    backgroundColor: theme.palette.secondary.main,\n    color: \"#fff\",\n  },\n\n  question:{\n    fontSize:\"1.3rem\",\n    fontWeight: \"400\",\n    color: theme.palette.secondary.main,\n    marginTop:\"30px\"\n  },\n\n  answer:{\n    fontSize:\"1.3rem\",\n    fontWeight: \"500\",\n    color: theme.palette.primary.main,\n  },\n\n\n\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <div className={classes.BookedLabel}> Booking Made </div>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\n      );\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setFullname(person.fullname);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setEmail(person.email);\n      setTel(person.phone);\n      if (person.notes) {\n        setNotes(person.notes);\n      }\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.email = email;\n      booking.phone = tel;\n      booking.fullname = fullname;\n      booking.notes = notes;\n      booking.service = service;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const changeToPatientAttended = (event, id) => {\n    setSaving(true);\n    BookService.changeToPatientAttended(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const Pay = () => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  const refundPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.refundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setOpenRefundDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const updateShouldRefundsCount = async () => {\n    try {\n      const res = await BookService.getShouldRefundsCount();\n      if (res && res.data && res.data.status === \"OK\") {\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  };\n\n  const downloadRegForm = (id) => {\n    PDFService.downloadGPRegForm(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendRegForm = (id) => {\n    setSaving(true);\n    setEmailSent(false);\n    BookService.sendRegFormEmail(id)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSent(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const onClose = () => {\n    setEmailSent(false);\n    setEmailSentInvoice(false);\n    setInvoice(null);\n    props.onClose();\n  };\n\n  const [openQDialg, setOpenQDialog] = React.useState(false)\n  const handleQDialgClose = () =>\n  {\n    setOpenQDialog(false)\n  }\n\n  const fixQuestion = (str) =>\n  {\n    let result = str.replace('*', '')\n    if (!result.trim().endsWith('?'))\n    {\n      result += '?'\n    }\n    return result\n  }\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              className={classes.dialogTitle}\n              style={{position:\"relative\"}}\n            >\n              {booking.questions && (\n                 <div style={{position:\"absolute\", right:\"10px\", top:\"12px\", backgroundColor:\"#069c00\", fontSize:\"0.85rem\", padding:\"8px\", borderRadius:\"10px\"}}>\n                   Self-Test\n                 </div>\n              )}\n\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.fullname}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={{\n                          padding: 0,\n                          margin: 0,\n                          color: \"#fff\",\n                          fontSize: 25,\n                        }}\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  // height: \"550px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE :\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME :\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              FULLNAME :{\" \"}\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.fullname}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>EMAIL : </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>TEL : </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              Consultation :{\" \"}\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.faceToFaceConsultation && (\n                                <span> Face to Face </span>\n                              )}\n                              {((booking.faceToFaceConsultation &&\n                                booking.telephoneConsultation) ||\n                                (!booking.faceToFaceConsultation &&\n                                  !booking.telephoneConsultation)) && (\n                                <span\n                                  style={{\n                                    paddingLeft: \"5px\",\n                                    paddingRight: \"5px\",\n                                  }}\n                                >\n                                  {\" \"}\n                                  -{\" \"}\n                                </span>\n                              )}\n                              {booking.telephoneConsultation && (\n                                <span> Telephone </span>\n                              )}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <Divider />\n\n                      {booking.questions && (\n                        <React.Fragment>\n                          <div style={{display:\"flex\", justifyContent:\"center\"}}>\n                          <Button fullWidth variant=\"contained\" color=\"primary\" style={{color:\"#fff\",margin:\"10px\"}} onClick={() => setOpenQDialog(true)}>\n                             Show questionnaire\n                          </Button>\n                          </div>\n                          <Divider />\n                        </React.Fragment>\n                      )}\n\n                   \n\n                      \n                      <div style={{marginTop:\"20px\"}}>\n\n                      </div>\n\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"10px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"10px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to archive this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        {booking.OTCCharges > 0 && (\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\n                            <div>\n                              <Button\n                                disabled={booking.OTCCharges > 0}\n                                type=\"button\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                  handleDeleteModeChanged(true, booking);\n                                }}\n                                className={classes.DeleteButton}\n                              >\n                                Archive This Record\n                              </Button>\n                            </div>\n                          </Tooltip>\n                        )}\n                        {\n                          <Button\n                            disabled={booking.OTCCharges > 0}\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              handleDeleteModeChanged(true, booking);\n                            }}\n                            className={classes.DeleteButton}\n                          >\n                            Archive This Record\n                          </Button>\n                        }\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Archive this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog\n            open={openQDialg}\n            onClose={handleQDialgClose}\n            maxWidth=\"sm\"\n          >\n            <DialogContent>\n                      {booking.questions && JSON.parse(booking.questions).map(item => (\n                        <div >\n                          <div className={classes.question}>\n                            {fixQuestion(item.question)}\n                          </div>\n                          <div className={classes.answer}>\n                            {item.answer}\n                          </div>\n                        </div>\n                      ))}\n            </DialogContent>\n\n            <DialogActions>\n              <Button onClick={() => setOpenQDialog(false)}>\n                Close\n              </Button>\n            </DialogActions>\n\n          </Dialog>\n\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/WeekViewCell.js",["881","882"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 5;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(-1);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0)\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                        {_bookingsCount}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container}>\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/WeekViewCell.js",["883","884"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 1;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(-1);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0)\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                          {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                        {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container}  onClick={(event => dayClicked(event,cellDate))} >\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/DayViewCell.js",["885","886","887","888","889"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/WeekViewCell.js",["890","891","892","893","894","895","896","897"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nimport { Grid } from '@material-ui/core';\nimport { CalendarColors } from './colors';\n\nconst MAX_BOOKING_COUNT_PCR = 10;\nconst MAX_BOOKING_COUNT_GP = 1;\nconst MAX_BOOKING_COUNT_STD = 1;\nconst MAX_BOOKING_COUNT_GYNAE = 1;\nconst MAX_BOOKING_COUNT_BLOOD = 1;\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        minHeight: \"100px\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        minHeight: \"100px\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n    PCRGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"0\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n    \n      GynaeGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"21px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n    \n      GPGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"42px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n    \n      STDGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"63px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n      BloodGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"84px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n\n    \n\n    DayLabelContainer:{\n        position: \"absolute\",\n        top: \"15%\",\n        left:\"5px\",\n        width:\"100%\",\n        height:\"100%\"   \n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 1;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(null);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(null);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const minHeight = 1;\n    const getVCClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.PCRGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.VC_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: \"0px\",\n                color: \"#fff\",\n                fontWeight: \"500\",\n                fontSize:\"0.8rem\",\n                textAlign: \"center\",\n                width: \"100%\",\n              }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n  \n    const getF2FClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.GynaeGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.F2F_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n  \n    const getLaserClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.GPGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.LASER_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n  \n    const getCataractClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.STDGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.CATARACT_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n\n    const getPostOPClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.BloodGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.POSTOP_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n\n\n  \n  \n    const getBookingsCountLabel = (_bookingsCount) => {\n      if (!_bookingsCount) {\n        return (\n          <div className={classes.LoadingProgress}>\n            <CircularProgress disableShrink />\n          </div>\n        );\n      } else if (_bookingsCount !== -2) {\n        return (\n          <div className={classes.DayLabelContainer}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"flex-end\"\n              style={{ width: \"100%\", height: \"100%\" }}\n            >\n              {_bookingsCount.map((item) => (\n                <Grid item>{getClinicBar(item.clinic, item.count)}</Grid>\n              ))}\n            </Grid>\n          </div>\n        );\n      }\n    };\n\n    const getClinicBar = (clinic, count) => {\n      return (\n        <React.Fragment>\n          {clinic === \"Virtual Consultation\" &&\n            state.selectedClinics.findIndex((e) => e === \"Virtual Consultation\") >= 0 &&\n            getVCClinicBar(count)}\n          {clinic === \"F2F Clinic\" &&\n            state.selectedClinics.findIndex((e) => e === \"F2F Clinic\") >= 0 &&\n            getF2FClinicBar(count)}\n          {clinic === \"Laser Theatre\" &&\n            state.selectedClinics.findIndex((e) => e === \"Laser Theatre\") >= 0 &&\n            getLaserClinicBar(count)}\n          {clinic === \"Cataract Theatre\" &&\n            state.selectedClinics.findIndex((e) => e === \"Cataract Theatre\") >= 0 &&\n            getCataractClinicBar(count)}\n                      {clinic === \"Post OP\" &&\n            state.selectedClinics.findIndex((e) => e === \"Post OP\") >= 0 &&\n            getPostOPClinicBar(count)}\n\n        </React.Fragment>\n      );\n    };\n    \n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n\n\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container} onClick={(event => dayClicked(event,cellDate))} >\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {/* {getBookingsCountGauge(bookingsCount)} */}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PayDialog.js",["898","899","900","901","902","903","904","905","906"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PayDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  useEffect( () => {\n    if (props.price)\n    {\n      setPrice(`${props.price}`)\n    }else\n    {\n      setPrice('')\n    }\n  }, [props.price, props.open])\n\n\n  const priceChanged = (event) =>\n  {\n    setPrice(event.target.value)\n    setPriceError(false)\n  }\n\n  const paymentMethodChanged = (event) => {\n    setPaymentMethod(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setPaymentMethod(\"credit card\");\n    setPrice('')\n    setCorporate(corporates[0]);\n    setSaving(false);\n  };\n\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  };\n\n  const payClicked = async () => {\n\n\n    if (!price || price.trim().length === 0 || price === '0')\n    {\n      setPriceError(true)\n      return\n    }\n\n    setSaving(true);\n\n  \n\n    try {\n      await BookService.payBooking(\n        props.booking._id,\n        price,\n        paymentMethod,\n        paymentMethod === \"corporate\" ? corporate : \"\"\n      );\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <CreditCardIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    PAY the CHARGE{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"300px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"space-between\"\n                  spacing={2}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                  <TextField\n                                autoFocus\n                                error={priceError}\n                                label=\"TOTAL Charges\"\n                                value={price}\n                                fullWidth\n                                required\n                                onChange={priceChanged}\n                                name=\"product-price\"\n                                id=\"product-price-id\"\n                                InputProps={{\n                                  inputComponent: NumberFormatCustom,\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                      £\n                                    </InputAdornment>\n                                  ),\n                                }}\n                              />\n\n                  </Grid>\n\n                  <Grid item>\n                    <div style={{ fontSize: \"17px\" }}>\n                      {\" \"}\n                      How do you want to pay?{\" \"}\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"paymentMethod\"\n                        name=\"paymentMethod\"\n                        value={paymentMethod}\n                        onChange={paymentMethodChanged}\n                      >\n                        <FormControlLabel\n                          value=\"credit card\"\n                          control={<Radio />}\n                          label=\"Credit Card\"\n                        />\n                        <FormControlLabel\n                          value=\"cash\"\n                          control={<Radio />}\n                          label=\"Cash\"\n                        />\n                        <FormControlLabel\n                          value=\"corporate\"\n                          control={<Radio />}\n                          label=\"Corporate\"\n                        />\n                      </RadioGroup>\n\n                      {paymentMethod === \"corporate\" && (\n                        <FormControl\n                          style={{ marginTop: \"10px\" }}\n                          className={classes.formControl}\n                        >\n                          <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                          >\n                            {corporates.map((element) => (\n                              <MenuItem\n                                value={element}\n                              >{`${element}`}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      )}\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                <Grid item></Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Pay\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/NewBookingDialog.js",["907","908","909","910","911","912","913","914","915","916","917","918","919","920","921"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"500\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid: {\n    color: theme.palette.primary.main,\n    fontWeight: \"600\",\n  },\n\n  PriceLabelNotPaid: {\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\",\n  },\n}));\n\nconst Packages = [\n  { packageName: \"Sexual Health Clinic - Bronze\" },\n  { packageName: `Sexual Health Clinic - Silver` },\n  { packageName: `Sexual Health Clinic - Gold` },\n  { packageName: `Sexual Health Clinic - Platinium` },\n  { packageName: `BLOOD SAMPLE AND URINE` },\n  { packageName: `BLOOD SAMPLE AND URINE OR SWAB` },\n  { packageName: `Indivisual Tests` },\n  { packageName: `Combo STD Checks` },\n];\n\nconst IndivisualTests = [\n  \"HIV TESTING\",\n  \"CHLAMYDIA TESTING\",\n  \"SYPHILIS BLOOD TESTING\",\n  \"HERPES TESTING\",\n  \"GONORRHOEA TESTING\",\n  \"HEPATITIS A PROFILE TESTING\",\n  \"HEPATITIS B PROFILE TESTING\",\n  \"HEPATITIS C ANTIBODIES TESTING\",\n  \"HPV TESTING\",\n  \"BACTERIAL SWAB TESTING\",\n];\n\nconst comboSTDChecks = [\n  \"CHLAMYDIA, GONORRHOEA AND TRICHOMONAS\",\n  \"HIV I & II WITH SYPHILIS\",\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function NewBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [saving, setSaving] = useState(false);\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [fullnameError, setFullnameError] = React.useState(false);\n\n  const [phone, setPhone] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n  const [serviceError, setServiceError] = React.useState(false);\n\n  const [notes, setNotes] = React.useState(\"\");\n\n  const [indivisualArray, setIndivisualArray] = React.useState([]);\n  const [comboArray, setComboArray] = React.useState([]);\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFullnameError(false);\n  };\n\n  const phoneChanged = (event) => {\n    setPhone(event.target.value);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setServiceError(false)\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    setFullname(\"\");\n    setFullnameError(false);\n    setPhone(\"\");\n    setEmail(\"\");\n    setService(\"\");\n    setServiceError(false)\n    setNotes(\"\");\n    setIndivisualArray([]);\n    setComboArray([]);\n\n    props.handleClose();\n    setSaving(false);\n  };\n\n  const validateBooking = () => {\n    let error = false;\n    if (!fullname || fullname.trim().length < 1) {\n      setFullnameError(true);\n      error = true;\n    }\n\n    if (!service || service.trim().length < 1)\n    {\n      setServiceError(true)\n      error = true\n    }\n\n    if (service === 'Indivisual Tests' && indivisualArray.length === 0)\n    {\n      setServiceError(true)\n      error = true\n    }\n\n    if (service === 'Combo STD Checks' && comboArray.length === 0)\n    {\n      setServiceError(true)\n      error = true\n    }\n\n    return !error;\n  };\n\n  const saveClicked = async () => {\n    if (!validateBooking()) {\n      return;\n    }\n\n    setSaving(true);\n\n    let packageName = service;\n    if (service === \"Indivisual Tests\") {\n      let temp = \"\";\n      indivisualArray.forEach((item, index) => {\n        temp += item;\n        if (index < indivisualArray.length - 1) {\n          temp += \" - \";\n        }\n      });\n      packageName = `Indivisual Tests : ( ${temp} )`;\n    } else if (service === \"Combo STD Checks\") {\n      let temp = \"\";\n      comboArray.forEach((item, index) => {\n        temp += item;\n        if (index < comboArray.length - 1) {\n          temp += \" - \";\n        }\n      });\n      packageName = `Combo STD Checks : ( ${temp} )`;\n    }\n\n    try {\n      await BookService.addNewBooking({\n        bookingDate: props.date,\n        bookingTime: props.time,\n        fullname: fullname,\n        phone: phone,\n        email: email,\n        packageName: packageName,\n        notes: notes,\n      });\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  const IndivisualTestsChanged = (event, item) => {\n    const checked = event.target.checked;\n\n    if (checked) {\n      setServiceError(false)\n      if (indivisualArray.findIndex((e) => e === item) < 0)\n        setIndivisualArray([...indivisualArray, item]);\n    } else {\n      setIndivisualArray(indivisualArray.filter((e) => e !== item));\n    }\n\n    setServiceError(false)\n  };\n\n  const comboSTDChecksChanged = (event, item) => {\n    const checked = event.target.checked;\n\n    if (checked) {\n      setServiceError(false)\n      if (comboArray.findIndex((e) => e === item) < 0)\n        setComboArray([...comboArray, item]);\n    } else {\n      setComboArray(comboArray.filter((e) => e !== item));\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.date && props.time && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    ADD New Booking{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.STD_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\n                    STD\n              </div>\n\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"600px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      spacing={1}\n                    >\n                      <Grid item>\n                        <DateRangeIcon className={classes.CalendarIcon} />\n                      </Grid>\n                      <Grid item>\n                        <span className={classes.DateTimeLabel}>\n                          {props.date} , {props.time}\n                        </span>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      autoFocus\n                      error={fullnameError}\n                      label=\"Full Name\"\n                      value={fullname}\n                      required\n                      onChange={fullnameChanged}\n                      name=\"fullname\"\n                      id=\"fullname-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Telephone\"\n                      value={phone}\n                      onChange={phoneChanged}\n                      name=\"phone\"\n                      id=\"phone-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      value={email}\n                      onChange={emailChanged}\n                      name=\"email\"\n                      id=\"email-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} md={12}>\n                    <FormControl className={classes.formControl} fullWidth required error={serviceError}>\n                      <InputLabel id=\"service-label-id\">Package</InputLabel>\n                      <Select\n                        fullWidth\n                        labelId=\"service-label-id\"\n                        id=\"service-id\"\n                        value={service}\n                        onChange={serviceChanged}\n                      >\n                        {Packages.map((item) => (\n                          <MenuItem value={item.packageName}>\n                            {item.packageName}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {service === \"Indivisual Tests\" && (\n                    <Grid item xs={12}>\n                      {IndivisualTests.map((item) => (\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={\n                                indivisualArray.findIndex((e) => e === item) >=\n                                0\n                              }\n                              onChange={(event) =>\n                                IndivisualTestsChanged(event, item)\n                              }\n                              name={item}\n                            />\n                          }\n                          label={item}\n                        />\n                      ))}\n                    </Grid>\n                  )}\n\n                  {service === \"Combo STD Checks\" && (\n                    <Grid item xs={12}>\n                      {comboSTDChecks.map((item) => (\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={\n                                comboArray.findIndex((e) => e === item) >= 0\n                              }\n                              onChange={(event) =>\n                                comboSTDChecksChanged(event, item)\n                              }\n                              name={item}\n                            />\n                          }\n                          label={item}\n                        />\n                      ))}\n                    </Grid>\n                  )}\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Notes\"\n                      value={notes}\n                      onChange={notesChanged}\n                      name=\"notes\"\n                      id=\"notes-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={saveClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Save\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/PatientDialog.js",["922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/ChooseClinicDialog.js",["944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"./calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"600\",\n    fontSize: \"1.2rem\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid:{\n    color: theme.palette.primary.main,\n    fontWeight: \"600\"\n  },\n\n  PriceLabelNotPaid:{\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\"\n  },\n\n  BoxDisabled: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    borderColor: \"#ddd\",\n    cursor: \"not-allowed\",\n    color: \"#ddd\",\n    transition: \"all 0.2s ease\",\n  },\n\n  BoxVC: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.VC_COLOR,\n    color: CalendarColors.VC_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.VC_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxF2F: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.F2F_COLOR,\n    color: CalendarColors.F2F_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.F2F_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxLaser: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.LASER_COLOR,\n    color: CalendarColors.LASER_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.LASER_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxCataract: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.CATARACT_COLOR,\n    color: CalendarColors.CATARACT_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.CATARACT_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxPostOP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.POSTOP_COLOR,\n    color: CalendarColors.POSTOP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.POSTOP_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxOptometry: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.OPOTOMETRY_COLOR,\n    color: CalendarColors.OPOTOMETRY_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.OPOTOMETRY_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n\n\n\n\n\n\n\n\n\n  BoxGynae: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GYNAE_COLOR,\n    color: CalendarColors.GYNAE_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GYNAE_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxGP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GP_COLOR,\n    color: CalendarColors.GP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GP_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n  BoxSTD: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.STD_COLOR,\n    color: CalendarColors.STD_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.STD_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n\n\n}));\n\nconst Packages = [\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\n  { packageName: `Coil Fitting/Coil Removal` },\n  { packageName: `Well Woman Check` },\n  { packageName: `Sexual Health Screening` },\n  { packageName: `Pre-pregnancy/Fertility check` },\n  { packageName: `Gynaecological Ultrasound` },\n  { packageName: `HPV Vaccination` },\n  { packageName: `Cervical / Pap Smear` },\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function ChooseBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const handleClose = () => {    \n    props.handleClose();\n  };\n\n\n  const timeDisabled = () =>\n  {\n    return props.time.indexOf(':15') > 0 || props.time.indexOf(':45') > 0 || props.time.indexOf('09') >= 0 \n  }\n\n  const clinicClicked = (clinic) =>\n  {\n    props.clinicClicked(clinic)\n  }\n\n  return (\n    <React.Fragment>\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                {/* <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid> */}\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    Change Clinic{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"420px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n\n\n                  <Grid item xs={12} style={{marginTop:\"0px\"}}>\n                    <div className={classes.BoxVC} onClick={() => clinicClicked(\"Virtual Consultation\")}>\n                      Virtual Consultation\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxF2F} onClick={() => clinicClicked(\"F2F Clinic\")}>\n                      F2F Clinic\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxLaser} onClick={() => clinicClicked(\"Laser Theatre\")}>\n                      Laser Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxCataract} onClick={() => clinicClicked(\"Lens Theatre\")}>\n                      Lens Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxPostOP} onClick={() => clinicClicked(\"Post OP\")}>\n                      Post OP\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxOptometry} onClick={() => clinicClicked(\"Optometry\")}>\n                      Optometry\n                    </div>\n                  </Grid>\n\n\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"0px\",\n                    right: \"5px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                      >\n                        close\n                      </Button>\n                    </Grid>\n                   \n                  </Grid>\n                </div>\n              </div>\n\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GlobalPath.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/NewPaymentDialog.js",["975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/ViewPaymentDialog.js",["993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  Divider,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\nimport LinkIcon from '@material-ui/icons/Link';\nimport PaymentService from \"./services/PaymentService\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport * as EmailValidator from \"email-validator\";\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\nimport SendIcon from '@material-ui/icons/Send';\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport dateformat from 'dateformat'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroid';\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 999,\n    color: \"#fff\",\n  },\n\n  itemLabel: {\n    color: \"#555\",\n    fontWeight: \"500\",\n    fontSize: \"1rem\"\n  },\n\n  itemData: {\n    color: theme.palette.primary.main,\n    fontWeight: \"600\",\n    fontSize: \"1rem\"\n  },\n\n  TextSecondary: {\n    color: theme.palette.secondary.main\n  },\n\n\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function ViewPaymentDialog(props) {\n  const classes = useStyles();\n\n  const LinkRef = React.useRef(null)\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [saving, setSaving] = useState(false);\n\n  const [amount, setAmount] = useState(\"\");\n  const [amountError, setAmountError] = useState(false);\n\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [fullnameError, setFullnameError] = React.useState(false);\n\n  const [emailError, setEmailError] = React.useState(false);\n  const [phoneError, setPhoneError] = React.useState(false);\n\n  const [phone, setPhone] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n\n  const [description, setDescription] = React.useState(\"\");\n\n  const [paymentLink, setPaymentLink] = React.useState(null);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n  const [phoneSent, setPhoneSent] = React.useState(false);\n\n  const [refundDone, setRefundDone] = React.useState(false);\n  const [deleteDone, setdeleteDone] = React.useState(false);\n  const [refundTimeStamp, setRefundTimeStamp] = React.useState(null)\n\n\n  const [openDeleteDialog, setOpenDeleteDialog] = React.useState(false)\n  const handleCloseDeleteDialog = () =>\n  {\n    setOpenDeleteDialog(false)\n  }\n\n\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const handleCloseRefundDialog = () => {\n    setOpenRefundDialog(false)\n  }\n\n\n\n  React.useEffect(() => {\n    if (props.payment && props.open) {\n      setPaymentLink(buildPaymentLink(props.payment._id))\n      setEmail(props.payment.email || '')\n      setPhone(props.payment.phone || '')\n    }\n\n  }, [props.payment, props.open])\n\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFullnameError(false);\n  };\n\n  const phoneChanged = (event) => {\n    setPhone(event.target.value);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n  };\n\n\n\n  const descriptionChanged = (event) => {\n    setDescription(event.target.value);\n  };\n\n\n  const amountChanged = (event) => {\n    setAmount(event.target.value)\n    setAmountError(false)\n  }\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setAmount('')\n    setFullname('')\n    setEmail('')\n    setPhone('')\n    setDescription('')\n    setNotes('')\n    setPaymentLink(null)\n    setRefundTimeStamp(null)\n\n    setAmountError(false)\n    setFullnameError(false)\n    setEmailError(false)\n    setPhoneError(false)\n    setSaving(false);\n    setEmailSent(false)\n    setRefundDone(false)\n    setOpenRefundDialog(false)\n    setOpenDeleteDialog(false)\n    setdeleteDone(false)\n    setPhoneSent(false)\n  };\n\n  const createLinkClicked = async () => {\n    if (!validatePayment()) {\n      return\n    }\n\n    try {\n      setSaving(true)\n      const paymentRecord = {\n        amount: amount,\n        fullname: fullname,\n        description: description,\n        notes: notes\n      }\n\n      const res = await PaymentService.createNewPaymentLink(paymentRecord)\n\n      if (res && res.data && res.data.status === \"OK\") {\n        const payment = res.data.payment\n        setPaymentLink(buildPaymentLink(payment._id))\n        setState(state => ({ ...state, paymentDialogDataChanged: !state.paymentDialogDataChanged }))\n        LinkRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })\n      }\n\n      setSaving(false)\n\n    } catch (err) {\n      console.error(err)\n      setSaving(false)\n    }\n\n\n  }\n\n  const validatePayment = () => {\n    let error = false\n\n    if (!amount || amount.trim().length === 0 || parseFloat(amount) <= 0) {\n      setAmountError(true)\n      error = true\n    }\n\n    if (!fullname || fullname.trim().length === 0) {\n      setFullnameError(true)\n      error = true\n    }\n\n    return !error\n\n  }\n\n  const buildPaymentLink = (id) => {\n    return `https://londonmedicalclinic.co.uk/museumdentalpayment/pay/${id}`\n  }\n\n\n  const sendEmailClicked = async () => {\n    if (!email || email.length < 3 || !EmailValidator.validate(email)) {\n      setEmailError(true)\n      return\n    }\n\n    try {\n\n      setSaving(true)\n\n      const res = await PaymentService.sendPaymentLinkEmail(props.payment._id, email)\n      if (res && res.data && res.data.status === \"OK\") {\n        setState(state => ({ ...state, paymentDialogDataChanged: !state.paymentDialogDataChanged }))\n        setEmailSent(true)\n      }\n\n      setSaving(false)\n\n    } catch (err) {\n      console.log(err)\n      setSaving(false)\n    }\n  }\n\n  const refundPaymentClicked = () => {\n    setOpenRefundDialog(true)\n  }\n\n  const refundPayment = async () => {\n    try {\n      setSaving(true)\n\n      const res = await PaymentService.refundPayment(props.payment._id)\n      setSaving(false)\n      setOpenRefundDialog(false)\n      if (res && res.data && res.data.status === \"OK\") {\n        setRefundDone(true)\n        setRefundTimeStamp(new Date())\n        setState(state => ({ ...state, paymentDialogDataChanged: !state.paymentDialogDataChanged }))\n      }\n    } catch (err) {\n      console.error(err)\n      setSaving(false)\n    }\n  }\n\n  const deleteClicked = async () => {\n    try {\n      setSaving(true)\n\n      const res = await PaymentService.deletePaymentLink(props.payment._id)\n      setSaving(false)\n      setOpenDeleteDialog(false)\n      if (res && res.data && res.data.status === \"OK\") {\n        setdeleteDone(true)\n        setState(state => ({ ...state, paymentDialogDataChanged: !state.paymentDialogDataChanged }))\n      }\n    } catch (err) {\n      console.error(err)\n      setSaving(false)\n    }\n  }\n\n  const sendTextClicked = async () =>\n  {\n    if (!phone || (phone.trim().length < 10))\n    {\n      setPhoneError(true)\n      return\n    }\n\n    try{\n\n      setSaving(true)\n\n     const res = await PaymentService.sendPaymentLinkTextMessage(props.payment._id, phone)\n     if (res && res.data && res.data.status === \"OK\")\n     {\n       setState(state => ({ ...state, paymentDialogDataChanged: !state.paymentDialogDataChanged }))\n       setPhoneSent(true)     \n     }\n\n     setSaving(false)\n\n    }catch(err)\n    {\n      console.log(err)\n      setSaving(false)\n    }\n  }\n\n\n  return (\n    <React.Fragment>\n      {props.payment && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"sm\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\" style={{ position: \"relative\" }}>\n              <div style={{ position: \"absolute\", top: \"15px\" }}>\n                {props.payment.paymentInfo && !props.payment.refund && !refundDone && (\n                  <Tooltip title=\"Successful Payment\">\n                    <DoneOutlineIcon style={{ color: \"#009c39\", fontSize: \"2.5rem\" }} />\n                  </Tooltip>\n                )}\n\n                {props.payment.paymentInfo && (props.payment.refund || refundDone) && (\n                  <Tooltip title=\"Refunded Payment\">\n                    <KeyboardReturnIcon style={{ color: \"#f06400\", fontSize: \"2.5rem\" }} />\n                  </Tooltip>\n                )}\n\n              </div>\n\n              <div style={{ position: \"absolute\", top: \"15px\", right: \"15px\" }}>\n                {(props.payment.deleted || deleteDone) && (\n                  <Tooltip title=\"Deleted Payment\">\n                    <DeleteIcon style={{ color: \"#d40000\", fontSize: \"2.5rem\" }} />\n                  </Tooltip>\n                )}\n\n              </div>\n\n\n\n\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <LinkIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    Payment Link Info{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent style={(props.payment.deleted || deleteDone) ? { backgroundColor: \"#bbb\" } : {}}\n            >\n              <Grid\n                container\n                justify=\"space-between\"\n                spacing={2}\n                alignItems=\"flex-start\"\n                style={{ marginBottom: \"20px\" }}\n              >\n                {props.payment.paymentInfo && (\n                  <React.Fragment>\n                    <Grid item xs={12}>\n                      <span className={classes.itemLabel} style={{ color: \"#009c39\", marginRight: \"10px\" }}> Stripe Ref # : </span>\n                      <span className={classes.itemData} style={{ color: \"#009c39\" }}>\n                        {JSON.parse(props.payment.paymentInfo).payment_method}\n                      </span>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <span className={classes.itemLabel} style={{ color: \"#009c39\", marginRight: \"10px\" }}> Payment done at : </span>\n                        <span className={classes.itemData} style={{ color: \"#009c39\" }}>\n                          {dateformat(props.payment.paymentTimeStamp,\"dddd, mmmm dS, yyyy, h:MM:ss TT\")}\n                        </span>\n                    </Grid>  \n                 </React.Fragment>\n                \n                )}\n\n                {props.payment.paymentInfo && !props.payment.refund && !refundDone && (\n                  <Grid item xs={12}>\n                    <Button\n                      fullWidth\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={refundPaymentClicked}\n                    >\n                      Refund Payment\n                    </Button>\n                  </Grid>\n                )}\n\n                {props.payment.paymentInfo && (props.payment.refund || refundDone) && (\n                  <React.Fragment> \n                  <Grid item xs={12}>\n                    <div style={{ fontSize: \"1.1rem\", fontWeight: \"600\", textAlign: \"left\", color: \"#f06400\" }}>\n                      Payment has been Refunded.\n                    </div>\n                  </Grid>\n                    <Grid item xs={12}>\n                        <span className={classes.itemLabel} style={{ color: \"#f06400\", marginRight: \"10px\" }}> Refund done at : </span>\n                        <span className={classes.itemData} style={{ color: \"#f06400\" }}>\n                          {dateformat(props.payment.refundTimeStamp || refundTimeStamp,\"dddd, mmmm dS, yyyy, h:MM:ss TT\")}\n                        </span>\n                    </Grid>  \n                    </React.Fragment>\n              \n                )}\n\n\n\n\n\n                <Grid item xs={12}>\n                  <span className={classes.itemLabel}> Amount: </span>\n                  <span className={classes.itemData}>\n                    {`£${(\n                      props.payment.amount\n                    ).toLocaleString(\"en-GB\")}`}\n                  </span>\n\n                </Grid>\n\n                <Grid item xs={12}>\n                  <span className={classes.itemLabel}> Customer/Payer Name: </span>\n                  <span className={classes.itemData}>\n                    {props.payment.fullname || '-'}\n                  </span>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <span className={classes.itemLabel}> Description: </span>\n                  <span className={classes.itemData}>\n                    {props.payment.description || '-'}\n                  </span>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <span className={classes.itemLabel}> Notes: </span>\n                  <span className={classes.itemData}>\n                    {props.payment.notes || '-'}\n                  </span>\n                </Grid>\n\n\n                {paymentLink && (\n                  <React.Fragment>\n\n                    <Grid item xs={12}>\n\n                      <div style={{ fontSize: \"1rem\", fontWeight: \"500\", color: \"#333\" }}>\n                        Payment Link URL :\n                    </div>\n\n                      <div style={{ width: \"100%\", overflowWrap: \"break-word\" }} ref={LinkRef}>\n                        <Link style={{ fontSize: \"1rem\", fontWeight: \"500\" }} href={paymentLink} target=\"_blank\" rel=\"noopener\">\n                          {paymentLink}\n                        </Link>\n\n                        <span>\n\n                          <Tooltip title=\"COPY LINK TO CLIPBOARD\">\n                            <IconButton\n                              onClick={() => {\n                                navigator.clipboard.writeText(\n                                  paymentLink\n                                );\n                              }}\n                              aria-label=\"delete\"\n                              className={classes.margin}\n                              size=\"small\"\n                            >\n                              <FileCopyOutlinedIcon\n                                style={{ color: \"#bf9b30\", fontSize: \"1.3rem\", marginLeft: \"10px\" }}\n                              />\n                            </IconButton>\n                          </Tooltip>\n\n                        </span>\n\n                      </div>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                      <TextField\n                        fullWidth\n                        error={emailError}\n                        label=\"Customer Email Address\"\n                        value={email}\n                        onChange={emailChanged}\n                        name=\"email\"\n                        id=\"email-id\"\n                        autoComplete=\"none\"\n                        variant=\"outlined\"\n                        placeholder=\"Enter customer email address\"\n                        InputProps={ (emailSent || props.payment.emailSent) ?  {\n                          endAdornment: <InputAdornment position=\"end\">\n                            <span style={{marginRight:\"10px\" , color:\"#009c39\", fontSize:\"1rem\", fontWeight:\"500\"}}>Email Sent</span>\n                            <SendIcon style={{marginRight:\"10px\" , color:\"#009c39\", fontSize:\"1.6rem\"}}/>\n                          </InputAdornment>,\n                          startAdornment: (\n                            <InputAdornment position=\"start\">\n                              <AccountCircleIcon style={{color:\"#05acb2\"}}/>\n                            </InputAdornment>\n                          ),\n                        } : {\n                          startAdornment: (\n                            <InputAdornment position=\"start\">\n                              <AccountCircleIcon style={{color:\"#05acb2\"}} />\n                            </InputAdornment>\n                          ),\n                        }}\n  \n                      />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                      <Button\n                        disabled={saving || (props.payment.paymentInfo || props.payment.refund || props.payment.deleted)}\n                        fullWidth\n                        onClick={sendEmailClicked}\n                        variant=\"contained\"\n                        color=\"primary\"\n                      >\n                        Send Link With Email\n                    </Button>\n                    </Grid>\n\n\n                    <Grid item xs={12} style={{marginTop:\"20px\"}}>\n                    <TextField\n                      fullWidth\n                      error={phoneError}\n                      label=\"Customer Mobile Number\"\n                      value={phone}\n                      onChange={phoneChanged}\n                      name=\"phone\"\n                      id=\"phone-id\"\n                      autoComplete=\"none\"\n                      variant=\"outlined\"\n                      placeholder=\"1234567891\"\n                      helperText=\"* Please enter only the mobile number (10 numbers) without the country code. Just UK numbers are accepted.\"\n                      InputProps={ (phoneSent || props.payment.textSent) ?  {\n                        endAdornment: <InputAdornment position=\"end\">\n                          <span style={{marginRight:\"10px\" , color:\"#009c39\", fontSize:\"1rem\", fontWeight:\"500\"}}>Text MSG Sent</span>\n                          <SendIcon style={{marginRight:\"10px\" , color:\"#009c39\", fontSize:\"1.6rem\"}}/>\n                        </InputAdornment>,\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <PhoneAndroidIcon style={{color:\"#05acb2\"}}/>\n                            <span style={{color:\"#05acb2\"}}> (+44) </span> \n                          </InputAdornment>\n                        ),\n                      } : {\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <PhoneAndroidIcon style={{color:\"#05acb2\"}} />\n                            <span style={{color:\"#05acb2\"}}> (+44) </span> \n                          </InputAdornment>\n                        ),\n                      }}\n\n                    />\n                  </Grid>\n                    <Grid item xs={12}>\n                      <Button\n                        disabled={saving || (props.payment.paymentInfo || props.payment.refund || props.payment.deleted)}\n                        fullWidth\n                        onClick={sendTextClicked}\n                        variant=\"contained\"\n                        color=\"primary\"\n                      >\n                        Send Link With Text Message\n                    </Button>\n                    </Grid>\n\n                    {!props.payment.deleted && !deleteDone && (\n                      <Grid item xs={12} style={{ marginTop: \"20px\" }}>\n                        <Button\n                          onClick={() => setOpenDeleteDialog(true)}\n                          variant=\"contained\"\n                          fullWidth\n                          color=\"primary\"\n                          style={{ backgroundColor: \"#c70000\", color: \"#fff\" }}\n                          disabled={saving}\n                        >\n                          Delete This Record\n                        </Button>\n                      </Grid>\n                    )}\n\n                  </React.Fragment>\n                )}\n\n\n              </Grid>\n\n            </DialogContent>\n\n\n            <DialogActions>\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-end\"\n                alignItems=\"center\"\n                spacing={2}\n              >\n\n                <Grid item>\n                  <Button\n                    onClick={handleClose}\n                    style={{ width: \"100px\" }}\n                    disabled={saving}\n                  >\n                    close\n                </Button>\n                </Grid>\n                {/* <Grid item>\n                <Button\n                  disabled={paymentLink !== null || saving}\n                  onClick={createLinkClicked}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  Create Link\n                </Button>\n              </Grid> */}\n\n              </Grid>\n            </DialogActions>\n\n\n            <Dialog\n              open={openRefundDialog}\n              onClose={handleCloseRefundDialog}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle style={{ color: \"#bf0000\" }} id=\"alert-dialog-title\">\n                {\"Refund Deposit\"}\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText\n                  style={{ color: \"#333\", fontWeight: \"400\" }}\n                  id=\"alert-dialog-description\"\n                >\n                  Are you sure you want to refund this payment?\n              </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleCloseRefundDialog} color=\"default\">\n                  Back\n              </Button>\n                <Button\n                  onClick={refundPayment}\n                  color=\"secondary\"\n                  style={{ fontWeight: \"600\" }}\n                  variant=\"contained\"\n                  autoFocus\n                >\n                  Yes, Refund Payment\n              </Button>\n              </DialogActions>\n            </Dialog>\n\n\n            <Dialog\n              open={openDeleteDialog}\n              onClose={handleCloseDeleteDialog}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle style={{ color: \"#d10202\", fontWeight: \"600\" }} id=\"alert-dialog-title\">\n                {\"Delete Record\"}\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText\n                  style={{ color: \"#000\", fontWeight: \"500\" }}\n                  id=\"alert-dialog-description\"\n                >\n                  Are you sure you want to delete this record?\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleCloseDeleteDialog} color=\"default\">\n                  Back\n                </Button>\n                <Button onClick={deleteClicked} variant=\"contained\" style={{ backgroundColor: \"#d10202\", color: \"#fff\" }}>\n                  Yes, Delete this record\n                </Button>\n              </DialogActions>\n            </Dialog>\n\n          </Dialog>\n\n          <Backdrop className={classes.backdrop} open={saving}>\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/PaymentService.js",["1017"],"import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class PaymentService {\n\n   static sendPaymentLinkTextMessage = (museumPaymentId, phone) =>\n   {\n      return API.post(`/api/museumdental/payment/sendpaymentlinktext`, {museumPaymentId : museumPaymentId, phone: phone});\n   }\n\n\n   static sendPaymentLinkEmail = (museumPaymentId, email) =>\n   {\n      return API.post(`/api/museumdental/payment/sendpaymentlinkemail`, {museumPaymentId : museumPaymentId, email: email});\n   }\n\n   static doPayment = (paymentId, museumPaymentId) =>\n   {\n      return API.post(`/api/museumdental/payment/dopayment`, {paymentId: paymentId  , museumPaymentId : museumPaymentId});\n   }\n\n   static refundPayment = (paymentId) =>\n   {\n      return API.post(`/api/museumdental/payment/refundpayment`, {museumPaymentId : paymentId});\n   }\n\n   static createNewPaymentLink = (paymentRecord) =>\n   {\n      return API.post(`/api/museumdental/payment/createpayment`, {paymentRecord : paymentRecord});\n   }\n\n   static deletePaymentLink = (paymentId) =>\n   {\n      return API.post(`/api/museumdental/payment/deletepayment`, {museumPaymentId : paymentId});\n   }\n\n   static getAllPayments = () =>\n   {\n      return API.get(`/api/museumdental/payment/getallpayments`);\n   }\n\n   static getDeletedPayments = () =>\n   {\n      return API.get(`/api/museumdental/payment/getdeletedpayments`);\n   }\n\n   static getPaidPayments = () =>\n   {\n      return API.get(`/api/museumdental/payment/getpaidpayments`);\n   }\n\n   static getRefundPayments = () =>\n   {\n      return API.get(`/api/museumdental/payment/getrefundpayments`);\n   }\n\n   static getRecentPayments = () => {\n      return API.get(`/api/museumdental/payment/getrecentpayments`);\n   }\n\n   static getPaymentById = (paymentId) =>\n   {\n      return API.get(`/api/museumdental/payment/getpaymentbyid?id=${paymentId}`);\n   }\n\n   static getTotalReceivedAmount = () => {\n      return API.get(`/api/museumdental/payment/gettotalreceivedamount`);\n   }\n\n   static getTodayReceivedAmount = () => {\n      return API.get(`/api/museumdental/payment/gettodayreceivedamount`);\n   }\n\n   static getTotalLinkSent = () => {\n      return API.get(`/api/museumdental/payment/gettotallinksent`);\n   }\n\n   static getTodayLinkSent = () => {\n      return API.get(`/api/museumdental/payment/gettodaylinksent`);\n   }\n\n\n   \n\n\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/PaymentsTable.js",["1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GlobalState.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/theme.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Role.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TodayLinkSentView.js",["1072"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/Title.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/CurrentVisits.js",["1073","1074","1075","1076"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/DashboardPreview.js",["1077","1078","1079"],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Chart from './Chart';\nimport CurrentVisits from './CurrentVisits';\n\n\n\nimport { Tooltip } from '@material-ui/core';\nimport GlobalState from './../GlobalState';\nimport BookingView from './BookingView';\n\nconst useStyles = makeStyles((theme) => ({\n \n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function DashboardPreview() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n        <React.Fragment>\n\n<           Grid container spacing={3}>\n                    {/* Chart */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <Chart />\n                    </Paper>\n                    </Grid>\n                    {/* Current Visits */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <CurrentVisits />\n                    </Paper>\n                    </Grid>\n                    {/* Recent Bookings */}\n                    <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <BookingView/>\n                    </Paper>\n                    </Grid>\n          </Grid>\n        </React.Fragment>\n  );\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/FindByRef.js",["1080","1081","1082","1083","1084"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/CalendarView.js",["1085","1086"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PatientsTable.js",["1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129"],"import React, { useEffect, useRef, useState } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from '../GlobalState';\nimport { getMenuIndex } from '../MenuList';\nimport { FormatDateFromString, FormatDateFromStringShortYear } from './DateFormatter';\nimport AccessibilityIcon from '@material-ui/icons/Accessibility';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\nimport PatientService from './services/PatientService';\nimport PatientDialog from './PatientDialog';\nimport { set } from 'date-fns/esm';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\"\n  },\n\n  closeIcon: {\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel: {\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor: \"#fafafa\",\n    color: \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n\n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    cursor: \"pointer\",\n    padding: \"10px\"\n\n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n  },\n\n  th: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n  },\n\n  td: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n  },\n\n  topSelect: {\n    margin: theme.spacing(1),\n    minWidth: 80,\n  },\n\n  notifyIcon: {\n    width: \"16px\",\n    height: \"16px\",\n    borderRadius: \"50%\",\n    backgroundColor: \"rgb(220, 0, 78)\",\n    marginLeft: \"10px\"\n  }\n\n}));\n\nconst getTableTitle = (str) => {\n\n  if (str === 'today') {\n    return `Today's Bookings`;\n  } else if (str === 'old') {\n    return `Old Bookings`;\n  } else if (str === 'future') {\n    return `Future Bookings`;\n  } else if (str === 'recent') {\n    return `Recent Bookings`;\n  } else if (str === 'live') {\n    return `Live Bookings`;\n  } else if (str === 'completed') {\n    return `Completed Bookings`;\n  } else if (str === 'positive') {\n    return `Positive Results`;\n  } else if (str === 'deleted') {\n    return `Archived Records`;\n  } else if (str === 'late') {\n    return `40 Hours Late`;\n  }\n\n  else {\n    return `Patients`;\n  }\n\n}\n\nconst getTableIcon = (str) => {\n\n  if (str === 'today') {\n    return <NewReleasesIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'old') {\n    return <HistoryIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'future') {\n    return <TimelineIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'recent') {\n    return <AutorenewIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'live') {\n    return <LiveTvIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'completed') {\n    return <PlaylistAddCheckIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'positive') {\n    return <AddCircleOutlineIcon style={{ fontSize: \"2.2rem\" }} />\n  } else if (str === 'deleted') {\n    return <DeleteIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'late') {\n    return <HourglassEmptyIcon style={{ fontSize: \"2.2rem\" }} />;\n  }\n\n  else {\n    return <AccessibilityIcon style={{ fontSize: \"2.2rem\" }} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PatientsTable(props) {\n\n  const classes = useStyles();\n\n\n\n  var columns = [\n    {\n      field: \"_id\",\n      headerName: \"Patient ID\",\n      width: 150,\n      renderCell: (params) => {\n        return (\n          <React.Fragment>\n            <IconButton\n              color=\"primary\"\n              onClick={(event) => openDetailsDialog(event, params.value)}\n            >\n              <SearchIcon />\n            </IconButton>\n\n            <span\n              style={{\n                color: \"#333\",\n                fontWeight: \"600\",\n                fontSize: \"0.8rem\",\n              }}\n            >\n              {params.getValue(\"patientID\")}\n            </span>\n          </React.Fragment>\n        );\n      },\n    },\n    { field: 'name', headerName: 'Name', width: 150 },\n    { field: 'surname', headerName: 'Surname', width: 150 },\n    {\n      field: 'birthDate', headerName: 'DOB', width: 150, valueFormatter: (params) => {\n        return FormatDateFromString(params.value);\n      },\n    },\n    { field: 'email', headerName: 'Email', width: 200 },\n    { field: 'homeTel', headerName: 'Home Tel', width: 150 },\n    { field: 'mobileTel', headerName: 'Mobile Tel', width: 150 },\n    { field: 'postCode', headerName: 'Postcode', width: 300 },\n    { field: 'address', headerName: 'Address', width: 300 },\n\n  ];\n\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [data, setData] = React.useState({ bookings: [], cachedBookings: [], isFetching: true });\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  }\n\n\n  const [filter, setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) => {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr) {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else {\n      return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = () => {\n    var api = PatientService.getAllPatients;\n\n    if (props.date === 'deleted') {\n      api = PatientService.getDeletedPatients;\n    }\n\n    setData({ bookings: [], cachedBookings: [], isFetching: true });\n\n    // console.log(props)\n\n    const currentPromise = api().then((res) => {\n      // console.log(res)\n      for (var i = 0; i < res.data.length; i++) {\n        res.data[i] = { ...res.data[i], id: i + 1 }\n      }\n      setData({ bookings: [...res.data], cachedBookings: [...res.data], isFetching: false });\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect(() => {\n    loadData()\n  },\n    [props.date]);\n\n\n\n\n  useEffect(() => {\n\n    if (filter && filter.trim().length > 0) {\n      var filteredData = data.cachedBookings.filter((element) =>\n\n        (element.name?.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\n        (element.surname?.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\n        ((element.name + ' ' + element.surname)?.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n\n\n\n      );\n\n\n      setData({ bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false });\n    } else {\n      setData({ bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false });\n    }\n  },\n    [filter]);\n\n\n  useEffect(() => {\n\n    loadData()\n\n  }, [state.patientDialogDataChanged]);\n\n\n  const handleCloseSeeDetaisDialog = () => {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }\n\n  const openDetailsDialog = (event, id) => {\n    const patient = data.bookings.find(element => element._id === id);\n    if (patient) {\n      setSelectedPatient(patient);\n      setPatientDialogTitle(`${patient.name.toUpperCase()} ${patient.surname.toUpperCase()}`)\n      setPatientDialogSaveButtonText(\"Save Changes\")\n      setPatientDialogOpen(true)\n    }\n  }\n\n  const refreshClicked = (event) => {\n    setFilter('');\n    loadData()\n  }\n\n  const filterChanged = (event) => {\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) => {\n    if (newSelection.length > 0) {\n      setSelectedRow(newSelection.rows[0]);\n    }\n\n  }\n\n  const [page, setPage] = React.useState(1);\n\n\n  const registerNewPatientClicked = () => {\n    setSelectedPatient(null)\n    setPatientDialogTitle('Register New Patient')\n    setPatientDialogSaveButtonText(\"Save\")\n    setPatientDialogOpen(true)\n  }\n\n  const [selectedPatient, setSelectedPatient] = React.useState(null)\n  const [patientDialogOpen, setPatientDialogOpen] = React.useState(false)\n  const [patientDialogTitle, setPatientDialogTitle] = React.useState('')\n  const [patientDialogSaveButtonText, setPatientDialogSaveButtonText] = React.useState('')\n\n\n  const handleClosePatientDialog = () => {\n    setPatientDialogOpen(false)\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          <div style={{ paddingBottom: \"10px\" }}>\n            <Button\n              // className={classes.ExportToExcelButton}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={registerNewPatientClicked}\n              startIcon={\n                <AddIcon />\n              }\n            >\n              Register new Patient\n              </Button>\n          </div>\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen && selectedBooking && selectedBooking.fullname}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      <PatientDialog\n        patient={selectedPatient}\n        open={patientDialogOpen}\n        handleClose={handleClosePatientDialog}\n        title={patientDialogTitle}\n        saveButtonText={patientDialogSaveButtonText}\n      />\n\n    </React.Fragment>\n  );\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/BookingTable.js",["1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/services/api.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/BookingTable.js",["1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159"],"import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport MomentUtils from \"@date-io/moment\";\nimport moment from \"moment\";\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Deleted Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }else if (str === 'tr')\n  {\n    return `Test & Release Bookings`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n\n           <React.Fragment>\n\n                {params.getValue('tr') ? \n                \n                  <span style={{ position:\"absolute\", fontSize:\"12px\", fontWeight:\"600\", color:\"#7e0082\"}}>\n                    TR\n                  </span> \n                \n                : \n                \n                ''}\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n\n          \n  \n          ); \n      \n        }\n      },\n\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \n        return formatTimeStamp(params.value);\n        }\n      },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n  \n          }else if (params.value === 'sample_taken')\n          {\n            return (\n              <span  className={classes.SampleTakenLabel}>  ST </span>\n            );\n  \n          }else if (params.value === 'report_sent')\n          {\n            return (\n              <span  className={classes.ReportSentLabel}>  RS </span>\n            );\n  \n          }else if (params.value === 'report_cert_sent')\n          {\n            return (\n              <span  className={classes.ReportCertSentLabel}>  RCS </span>\n            );\n  \n          }else if (params.value === 'positive')\n          {\n            return (\n              <span  className={classes.PositiveLabel}> POS </span>\n            );\n          }\n          \n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink}\n              //  onClick={\n              //   () => {\n              //     console.log(params.value);\n  \n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n              //     setState(state => ({...state, ref : params.value}));\n              //     setState(state => ({...state, refError : false})); \n              //     setState(state => ({...state, foundRecords : []}));\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\n              //   }\n              // }\n              \n              >\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'forenameCapital', headerName: 'Forename', width: 150 },\n      { field: 'surnameCapital', headerName: 'Surname', width: 150 },\n      { field: 'birthDate', headerName: 'D.O.B', width: 110, valueFormatter: (params) => { \n        return FormatDateFromString(params.value);\n         }\n      },\n      { field: 'email', headerName: 'Email', width: 200 , valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      }},\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'passportNumber', headerName: 'Passport No.', width: 250, \n      //  valueGetter: (params) => {\n      //   const pass2 = params.getValue('passportNumber2');\n      //   if (pass2 && pass2.length > 0 && pass2.trim().length > 0)\n      //   {\n      //     return `${params.getValue('passportNumber')?.toUpperCase()} - ${params.getValue('passportNumber2')?.toUpperCase()}`\n      //   }\n      //   else\n      //   {\n      //     return params.getValue('passportNumber')?.toUpperCase();\n      //   }\n      // }\n    },\n      { field: 'certificate', headerName: 'Certificate', width: 120,  renderCell: (params) => {\n          return params.value ? (\n            <CheckIcon className={classes.checkIcon}/>\n          ) :\n          (\n            <CloseIcon className={classes.closeIcon}/> \n          );\n      } },\n      { field: 'antiBodyTest', headerName: 'Antibody Test', width: 120,  renderCell: (params) => {\n        return params.value ? (\n          <CheckIcon className={classes.checkIcon}/>\n        ) :\n        (\n        <  CloseIcon className={classes.closeIcon}/> \n        );\n    } },\n      { field: 'postCode', headerName: 'Post Code', width: 150, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      { field: 'address', headerName: 'Address', width: 500, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      // { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n            <React.Fragment>\n\n                {params.getValue('tr') ? \n                \n                  <span style={{ position:\"absolute\", fontSize:\"12px\", fontWeight:\"600\", color:\"#7e0082\"}}>\n                    TR\n                  </span> \n                \n                : \n                \n                ''}\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n               if (!params.value)\n               {\n                  return ( <CloseIcon className={classes.closeIcon}/> );\n               }\n               else\n               {\n                  if (params.getValue('paidBy') === 'credit card')\n                  {\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'cash')\n                  {\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'corporate')\n                  {\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\n                  }\n                  else\n                  {\n                    return '';  \n                  }\n               }\n         }\n        },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n  \n          }else if (params.value === 'sample_taken')\n          {\n            return (\n              <span  className={classes.SampleTakenLabel}>  ST </span>\n            );\n  \n          }else if (params.value === 'report_sent')\n          {\n            return (\n              <span  className={classes.ReportSentLabel}>  RS </span>\n            );\n  \n          }else if (params.value === 'report_cert_sent')\n          {\n            return (\n              <span  className={classes.ReportCertSentLabel}>  RCS </span>\n            );\n  \n          }else if (params.value === 'positive')\n          {\n            return (\n              <span  className={classes.PositiveLabel}> POS </span>\n            );\n          }\n          \n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink} onClick={\n                () => {\n                  // console.log(params.value);\n  \n                  // setState(state => ({...state, currentMenuIndex: getMenuIndex(`findByRef`)}));\n                  // setState(state => ({...state, ref : params.value}));\n                  // setState(state => ({...state, refError : false})); \n                  // setState(state => ({...state, foundRecords : []}));\n                  // setState(state => ({...state, findRecords : !state.findRecords}));\n                }\n              }>\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'forenameCapital', headerName: 'Forename', width: 150 },\n      { field: 'surnameCapital', headerName: 'Surname', width: 150 },\n      { field: 'birthDate', headerName: 'D.O.B', width: 110, valueFormatter: (params) => { \n        return FormatDateFromString(params.value);\n         }\n      },\n      { field: 'email', headerName: 'Email', width: 200 , valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      }},\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'passportNumber', headerName: 'Passport No.', width: 250,  \n      // valueGetter: (params) => {\n      //   const pass2 = params.getValue('passportNumber2');\n      //   if (pass2 && pass2.length > 0 && pass2.trim().length > 0)\n      //   {\n      //     return `${params.getValue('passportNumber')?.toUpperCase()} - ${params.getValue('passportNumber2')?.toUpperCase()}`\n      //   }\n      //   else\n      //   {\n      //     return params.getValue('passportNumber')?.toUpperCase();\n      //   }\n      // }\n    },\n      { field: 'certificate', headerName: 'Certificate', width: 120,  renderCell: (params) => {\n          return params.value ? (\n            <CheckIcon className={classes.checkIcon}/>\n          ) :\n          (\n            <CloseIcon className={classes.closeIcon}/> \n          );\n      } },\n      { field: 'antiBodyTest', headerName: 'Antibody Test', width: 120,  renderCell: (params) => {\n        return params.value ? (\n          <CheckIcon className={classes.checkIcon}/>\n        ) :\n        (\n        <  CloseIcon className={classes.closeIcon}/> \n        );\n    } },\n      { field: 'postCode', headerName: 'Post Code', width: 150, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      { field: 'address', headerName: 'Address', width: 500, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      // { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const dateFormatter = str => {\n    return str;\n  };\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }else if (props.date === 'live')\n    {\n      api = BookService.getLiveBookings;\n    }else if (props.date === 'completed')\n    {\n      api = BookService.getCompletedBookings;\n    }\n    else if (props.date === 'positive')\n    {\n      api = BookService.getPositiveBookings;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n    else if (props.date === 'late')\n    {\n      api = BookService.getLateBookings;\n    }\n    else if (props.date === 'tr')\n    {\n      api = BookService.getAllTRBookings;\n    }\n               \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.forename.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\n                   (element.surname.toLowerCase().indexOf(filter.toLowerCase()) >= 0) \n                  || (`${element.forename} ${element.surname}`.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.userId.username === 'admin' && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                    <KeyboardDatePicker\n                        autoOk={true}\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        autoOk={true}\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {FormatDateFromString(booking.birthDate)}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/PriceCalculator.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/BookingDialog.js",["1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/Corporates.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/DateFormatter.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/Title.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/DayViewCell.js",["1206","1207","1208","1209","1210"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/InvoiceDialog.js",["1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/NewBookingDialog.js",["1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/services/api.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/NewBookingDialog.js",["1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"./calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"600\",\n    fontSize: \"1.2rem\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid:{\n    color: theme.palette.primary.main,\n    fontWeight: \"600\"\n  },\n\n  PriceLabelNotPaid:{\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\"\n  },\n\n  BoxDisabled: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    borderColor: \"#ddd\",\n    cursor: \"not-allowed\",\n    color: \"#ddd\",\n    transition: \"all 0.2s ease\",\n  },\n\n  BoxVC: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.VC_COLOR,\n    color: CalendarColors.VC_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.VC_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxF2F: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.F2F_COLOR,\n    color: CalendarColors.F2F_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.F2F_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxLaser: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.LASER_COLOR,\n    color: CalendarColors.LASER_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.LASER_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxCataract: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.CATARACT_COLOR,\n    color: CalendarColors.CATARACT_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.CATARACT_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxPostOP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.POSTOP_COLOR,\n    color: CalendarColors.POSTOP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.POSTOP_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxOptometry: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.OPOTOMETRY_COLOR,\n    color: CalendarColors.OPOTOMETRY_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.OPOTOMETRY_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n\n\n\n\n\n\n\n\n\n  BoxGynae: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GYNAE_COLOR,\n    color: CalendarColors.GYNAE_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GYNAE_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxGP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GP_COLOR,\n    color: CalendarColors.GP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GP_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n  BoxSTD: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.STD_COLOR,\n    color: CalendarColors.STD_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.STD_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n\n\n}));\n\nconst Packages = [\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\n  { packageName: `Coil Fitting/Coil Removal` },\n  { packageName: `Well Woman Check` },\n  { packageName: `Sexual Health Screening` },\n  { packageName: `Pre-pregnancy/Fertility check` },\n  { packageName: `Gynaecological Ultrasound` },\n  { packageName: `HPV Vaccination` },\n  { packageName: `Cervical / Pap Smear` },\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function NewBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const handleClose = () => {    \n    props.handleClose();\n  };\n\n\n  const timeDisabled = () =>\n  {\n    return props.time.indexOf(':15') > 0 || props.time.indexOf(':45') > 0 || props.time.indexOf('09') >= 0 \n  }\n\n  const clinicClicked = (clinic) =>\n  {\n    props.clinicClicked(clinic)\n  }\n\n  return (\n    <React.Fragment>\n      {props.date && props.time && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={1}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    ADD New Booking{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"480px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      spacing={0}\n                    >\n                      <Grid item>\n                        <DateRangeIcon className={classes.CalendarIcon} />\n                      </Grid>\n                      <Grid item>\n                        <span className={classes.DateTimeLabel}>\n                          {props.date} , {props.time}\n                        </span>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n\n                  <Grid item xs={12} style={{marginTop:\"0px\"}}>\n                    <div className={classes.BoxVC} onClick={() => clinicClicked(\"Virtual Consultation\")}>\n                      Virtual Consultation\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxF2F} onClick={() => clinicClicked(\"F2F Clinic\")}>\n                      F2F Clinic\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxLaser} onClick={() => clinicClicked(\"Laser Theatre\")}>\n                      Laser Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxCataract} onClick={() => clinicClicked(\"Lens Theatre\")}>\n                      Lens Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxPostOP} onClick={() => clinicClicked(\"Post OP\")}>\n                      Post OP\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxOptometry} onClick={() => clinicClicked(\"Optometry\")}>\n                      Optometry\n                    </div>\n                  </Grid>\n\n\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"0px\",\n                    right: \"5px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                      >\n                        close\n                      </Button>\n                    </Grid>\n                   \n                  </Grid>\n                </div>\n              </div>\n\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/EditOVBookingDialog.js",["1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n    Backdrop,\n    Button,\n    Checkbox,\n    CircularProgress,\n    DialogActions,\n    DialogContentText,\n    Divider,\n    FormControlLabel,\n    Grid,\n    InputAdornment,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    Switch,\n    TextField,\n    Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"./calendar-admin/colors\";\nimport DateField from \"./DateField\";\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport DateDialog from \"./DateDialog\";\nimport ChooseClinicDialog from \"./ChooseClinicDialog\"\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        marginTop: theme.spacing(0),\n        marginBottom: theme.spacing(1),\n    },\n\n    refreshButton: {\n        marginLeft: theme.spacing(2),\n    },\n\n    checkIcon: {\n        color: \"green\",\n    },\n\n    closeIcon: {\n        color: \"red\",\n    },\n\n    RefLink: {\n        cursor: \"pointer\",\n    },\n\n    BookedLabel: {\n        backgroundColor: \"#606060\",\n        color: \"#fff\",\n        paddingRight: \"10px\",\n        paddingLeft: \"10px\",\n    },\n\n    PatientAttendedLabel: {\n        backgroundColor: \"#0066aa\",\n        color: \"#fff\",\n        paddingRight: \"15px\",\n        paddingLeft: \"10px\",\n    },\n\n    SampleTakenLabel: {\n        backgroundColor: \"#0066cc\",\n        color: \"#fff\",\n        paddingRight: \"40px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"90px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportCertSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"68px\",\n        paddingLeft: \"10px\",\n    },\n\n    archiveButton: {},\n\n    smartMatchButton: {\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        marginRight: \"10px\",\n        // padding: \"10px\"\n    },\n\n    infoTitle: {\n        fontWeight: \"400\",\n    },\n\n    infoData: {\n        paddingLeft: \"10px\",\n        fontWeight: \"800\",\n    },\n\n    matchButton: {\n        marginTop: \"30px\",\n        marginBottom: \"20px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendFilesButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#3792ad\",\n        \"&:hover\": {\n            background: \"#2f798f\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    cancelButton: {\n        marginBottom: \"10px\",\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"90px\",\n        paddingRight: \"90px\",\n    },\n\n    CalendarIcon: {\n        color: theme.palette.primary.main,\n    },\n\n    DateTimeLabel: {\n        fontWeight: \"600\",\n        fontSize: \"1.2rem\",\n        color: theme.palette.primary.main,\n    },\n\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 5,\n        color: \"#fff\",\n    },\n\n    PriceLabelPaid: {\n        color: theme.palette.primary.main,\n        fontWeight: \"600\"\n    },\n\n    PriceLabelNotPaid: {\n        color: theme.palette.secondary.main,\n        fontWeight: \"600\"\n    },\n\n\n}));\n\nconst Packages = [\n    { packageName: \"Consultation with Consultant Gynaecologist\" },\n    { packageName: `Coil Fitting/Coil Removal` },\n    { packageName: `Well Woman Check` },\n    { packageName: `Sexual Health Screening` },\n    { packageName: `Pre-pregnancy/Fertility check` },\n    { packageName: `Gynaecological Ultrasound` },\n    { packageName: `HPV Vaccination` },\n    { packageName: `Cervical / Pap Smear` },\n    { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n    const { inputRef, onChange, ...other } = props;\n\n    return (\n        <NumberFormat\n            {...other}\n            getInputRef={inputRef}\n            onValueChange={(values) => {\n                onChange({\n                    target: {\n                        name: props.name,\n                        value: values.value,\n                    },\n                });\n            }}\n            thousandSeparator\n            isNumericString\n            prefix=\"\"\n        />\n    );\n}\n\nNumberFormatCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n    root: {\n        height: 10,\n        borderRadius: 5,\n    },\n    colorPrimary: {\n        backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n    },\n    bar: {\n        borderRadius: 5,\n        backgroundColor: \"#2f942e\",\n    },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <BorderLinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography\n                    style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                >{`${Math.round(props.value)}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\n\nLinearProgressWithLabel.propTypes = {\n    /**\n     * The value of the progress indicator for the determinate and buffer variants.\n     * Value between 0 and 100.\n     */\n    value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n    return (\n        <Draggable\n            handle=\"#draggable-dialog-title\"\n            cancel={'[class*=\"MuiDialogContent-root\"]'}\n        >\n            <Paper {...props} />\n        </Draggable>\n    );\n}\n\nexport default function EditOVBookingDialog(props) {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [saving, setSaving] = useState(false);\n\n    const [openClinicDialog, setOpenClinicDialog] = React.useState(false)\n\n    const [clinic, setClinic] = React.useState(\"\")\n\n    const [fullname, setFullname] = React.useState(\"\");\n    const [fullnameError, setFullnameError] = React.useState(false);\n\n    const [phone, setPhone] = React.useState(\"\");\n    const [email, setEmail] = React.useState(\"\");\n    const [notes, setNotes] = React.useState(\"\");\n\n    const [patientID, setPatientID] = React.useState(\"\");\n    const [prescriptionLeft, setPrescriptionLeft] = React.useState(\"\");\n    const [prescriptionRight, setPrescriptionRight] = React.useState(\"\");\n\n\n    const [birthDate, setBirthDate] = React.useState(\"\");\n    const [birthDateError, setBirthDateError] = React.useState(false);\n\n    const [openDeleteDialog, setOpenDeleteDialog] = React.useState(false)\n\n    const [openDateDialog, setOpenDateDialog] = React.useState(false)\n\n    const [date, setDate] = React.useState(\"\")\n    const [time, setTime] = React.useState(\"\")\n\n    const patientIDChanged = (event) => {\n        setPatientID(event.target.value);\n    };\n\n    const prescriptionLeftChanged = (event) => {\n        setPrescriptionLeft(event.target.value);\n    };\n\n    const prescriptionRightChanged = (event) => {\n        setPrescriptionRight(event.target.value);\n    };\n\n\n    const handleCloseDeleteDialog = () => {\n        setOpenDeleteDialog(false)\n    }\n\n    const handleSaveDateDialog = (date, time) => {\n        setDate(date)\n        setTime(time)\n        setOpenDateDialog(false)\n    }\n\n    const handleCloseDateDialog = () => {\n        setOpenDateDialog(false)\n    }\n\n\n    React.useEffect(() => {\n        if (props.booking && props.open) {\n            setFullname(props.booking.fullname)\n            setPhone(props.booking.phone)\n            setEmail(props.booking.email)\n            setBirthDate(props.booking.birthDate)\n            setNotes(props.booking.notes)\n            setDate(props.date)\n            setTime(props.time)\n            setPatientID(props.booking.patientID)\n            setPrescriptionLeft(props.booking.prescriptionLeft)\n            setPrescriptionRight(props.booking.prescriptionRight)\n\n            setClinic(props.clinic)\n\n        }\n\n    }, [props.open, props.booking])\n\n\n    const birthDateChanged = (dateStr) => {\n        setBirthDate(dateStr);\n    }\n\n\n\n\n    const fullnameChanged = (event) => {\n        setFullname(event.target.value);\n        setFullnameError(false);\n    };\n\n    const phoneChanged = (event) => {\n        setPhone(event.target.value);\n    };\n\n    const emailChanged = (event) => {\n        setEmail(event.target.value);\n    };\n\n\n    const notesChanged = (event) => {\n        setNotes(event.target.value);\n    };\n\n    const handleClose = () => {\n        if (saving) return;\n\n        setFullname(\"\");\n        setFullnameError(false);\n        setBirthDateError(false)\n        setPhone(\"\");\n        setEmail(\"\");\n        setNotes(\"\");\n        setBirthDate(\"\")\n        setPatientID(\"\")\n        setPrescriptionLeft(\"\")\n        setPrescriptionRight(\"\")\n        setClinic(\"\")\n\n\n        props.handleClose();\n        setSaving(false);\n    };\n\n    const validateBooking = () => {\n        let error = false;\n        if (!fullname || fullname.trim().length < 1) {\n            setFullnameError(true);\n            error = true;\n        }\n\n        if (birthDate && birthDate.length >= 1 && birthDate.length < 10) {\n            setBirthDateError(true);\n            error = true;\n        }\n\n        return !error;\n    };\n\n    const deleteClicked = async () => {\n\n        setOpenDeleteDialog(false)\n\n        setSaving(true)\n        try {\n            await BookService.deleteBooking(props.booking._id)\n            setSaving(false)\n            setState((state) => ({\n                ...state,\n                bookingDialogDataChanged: !state.bookingDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        }\n        catch (err) {\n            console.error(err)\n            setSaving(false)\n        }\n    }\n\n    const saveClicked = async () => {\n        if (!validateBooking()) {\n            return;\n        }\n\n        setSaving(true);\n\n        try {\n            await BookService.updateBooking({\n                bookingId: props.booking._id,\n                bookingDate: date,\n                bookingTime: time,\n                fullname: fullname,\n                phone: phone,\n                email: email,\n                birthDate: birthDate,\n                notes: notes,\n                clinic: clinic,\n                patientID: patientID,\n                prescriptionLeft: prescriptionLeft,\n                prescriptionRight: prescriptionRight,\n            });\n            setSaving(false);\n            setState((state) => ({\n                ...state,\n                bookingDialogDataChanged: !state.bookingDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        } catch (err) {\n            console.error(err);\n            setSaving(false);\n        }\n    };\n\n    const saveAsClicked = async () => {\n        if (!validateBooking()) {\n            return;\n        }\n\n        setSaving(true);\n\n        try {\n            await BookService.addNewBooking({\n                bookingDate: date,\n                bookingTime: time,\n                fullname: fullname,\n                phone: phone,\n                email: email,\n                birthDate: birthDate,\n                notes: notes,\n                clinic: clinic,\n                patientID: patientID,\n                prescriptionLeft: prescriptionLeft,\n                prescriptionRight: prescriptionRight,\n            });\n            setSaving(false);\n            setState((state) => ({\n                ...state,\n                bookingDialogDataChanged: !state.bookingDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        } catch (err) {\n            console.error(err);\n            setSaving(false);\n        }\n    };\n\n\n    const getColorFromClinic = (clinic) => {\n        switch (clinic) {\n            case \"Virtual Consultation\":\n                return CalendarColors.VC_COLOR\n            case \"F2F Clinic\":\n                return CalendarColors.F2F_COLOR\n            case \"Laser Theatre\":\n                return CalendarColors.LASER_COLOR\n            case \"Lens Theatre\":\n                return CalendarColors.CATARACT_COLOR\n            case \"Post OP\":\n                return CalendarColors.POSTOP_COLOR\n            case \"Optometry\":\n                return CalendarColors.OPOTOMETRY_COLOR\n    \n    \n            default:\n                return \"#777\"\n\n        }\n    }\n\n    const handleClinicClicked = (_clinic) =>\n    {\n        setClinic(_clinic)\n        setOpenClinicDialog(false)\n    }\n\n    const handleCloseClinicDialog = () =>\n    {\n        setOpenClinicDialog(false)\n    }\n    \n    const editClinicClicked = () =>\n    {\n        setOpenClinicDialog(true)\n    }\n\n    \n\n\n    return (\n        <React.Fragment>\n            {props.date && props.time && (\n                <React.Fragment>\n                    <Dialog\n                        maxWidth=\"md\"\n                        open={props.open}\n                        onClose={handleClose}\n                        PaperComponent={PaperComponent}\n                        aria-labelledby=\"form-dialog-title\"\n                    >\n                        <DialogTitle id=\"draggable-dialog-title\">\n\n                            <div style={{ position: \"absolute\", left: \"0px\", top: \"0px\", width: \"100%\", backgroundColor: getColorFromClinic(clinic), color: \"#fff\", padding: \"15px 5px\", textAlign: \"center\", fontSize: \"1.5rem\" }}>\n                                <Grid container direction=\"row\"\n                                    justify=\"center\"\n                                    alignItems=\"center\"\n                                    spacing={1}\n                                >\n                                    <Grid item>\n                                        <Tooltip title=\"Change Clinic\">\n                                            <EditIcon style={{ fontSize: \"2rem\", cursor:\"pointer\" }} onClick={editClinicClicked} />\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item style={{ marginTop: \"-10px\" }}>\n                                        {clinic}\n                                    </Grid>\n                                </Grid>\n                            </div>\n\n\n                        </DialogTitle>\n                        <DialogContent>\n                            <div\n                                style={{\n                                    paddingTop: \"50px\",\n                                    paddingBottom: \"20px\"\n                                }}\n                            >\n                                <Grid\n                                    container\n                                    direction=\"row\"\n                                    justify=\"stretch\"\n                                    spacing={2}\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={12} style={{ marginTop: \"10px\" }}>\n                                        <Grid\n                                            container\n                                            direction=\"row\"\n                                            justify=\"center\"\n                                            alignItems=\"center\"\n                                            spacing={1}\n                                            style={{ cursor: \"pointer\" }} onClick={() => setOpenDateDialog(true)}\n                                        >\n                                            <Grid item>\n                                                <DateRangeIcon className={classes.CalendarIcon} />\n                                            </Grid>\n                                            <Grid item>\n                                                <span className={classes.DateTimeLabel}>\n                                                    {date} , {time}\n                                                </span>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            autoFocus\n                                            error={fullnameError}\n                                            label=\"Full Name\"\n                                            value={fullname}\n                                            required\n                                            onChange={fullnameChanged}\n                                            name=\"fullname\"\n                                            id=\"fullname-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Patient ID\"\n                                            value={patientID}\n                                            onChange={patientIDChanged}\n                                            name=\"patientid\"\n                                            id=\"patientid-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Telephone\"\n                                            value={phone}\n                                            onChange={phoneChanged}\n                                            name=\"phone\"\n                                            id=\"phone-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            value={email}\n                                            onChange={emailChanged}\n                                            name=\"email\"\n                                            id=\"email-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <DateField\n                                            error={birthDateError}\n                                            title=\"Date of Birth\"\n                                            value={birthDate}\n                                            dateChanged={birthDateChanged}\n                                        >\n\n                                        </DateField>\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Prescription (LEFT)\"\n                                            value={prescriptionLeft}\n                                            onChange={prescriptionLeftChanged}\n                                            name=\"pleft\"\n                                            id=\"pleft-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Prescription (RIGHT)\"\n                                            value={prescriptionRight}\n                                            onChange={prescriptionRightChanged}\n                                            name=\"pright\"\n                                            id=\"pright-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Notes\"\n                                            value={notes}\n                                            onChange={notesChanged}\n                                            name=\"notes\"\n                                            id=\"notes-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} style={{marginTop:\"20px\"}}>\n                                    <Button\n                                        onClick={() => setOpenDeleteDialog(true)}\n                                        variant=\"contained\"\n                                        fullWidth\n                                        color=\"primary\"\n                                        // style={{ width: \"100px\" }}\n                                        style={{ backgroundColor: \"#c70000\", color: \"#fff\" }}\n                                        disabled={saving}\n                                    >\n                                        Delete Appointment\n                                      </Button>\n                                </Grid>\n\n\n                                </Grid>\n\n                                <div\n                                    style={{\n                                        position: \"absolute\",\n                                        bottom: \"20px\",\n                                        right: \"20px\",\n                                    }}\n                                >\n                                </div>\n                            </div>\n\n                            <Backdrop className={classes.backdrop} open={saving}>\n                                <CircularProgress color=\"inherit\" />\n                            </Backdrop>\n                        </DialogContent>\n\n                        <DialogActions>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"flex-end\"\n                                alignItems=\"center\"\n                                spacing={2}\n                            >\n\n                                <Grid item>\n                                    <Button\n                                        onClick={handleClose}\n                                        style={{ width: \"100px\" }}\n                                        disabled={saving}\n                                    >\n                                        back\n                                     </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        onClick={saveClicked}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        // style={{ width: \"100px\" }}\n                                        style={{ backgroundColor: \"#ff7200\", color: \"#fff\" }}\n                                        disabled={saving}\n                                    >\n                                        Save Changes\n                                      </Button>\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <div style={{width:\"100%\", display:\"flex\", justifyContent:\"center\"}}>\n                                    <Button\n                                        onClick={saveAsClicked}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        style={{ width: \"400px\" }}\n                                        // style={{ backgroundColor: \"#ff7200\", color: \"#fff\" }}\n                                        disabled={saving}\n                                    >\n                                        Save As a new booking\n                                      </Button>\n\n                                    </div>\n                                </Grid>\n\n\n                                {/* <div style={{position:\"absolute\", left:\"10px\", bottom:\"5px\"}}> */}\n                                {/* </div> */}\n\n\n                            </Grid>\n\n                        </DialogActions>\n\n                        <Dialog\n                            open={openDeleteDialog}\n                            onClose={handleCloseDeleteDialog}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\"\n                        >\n                            <DialogTitle style={{ color: \"#d10202\", fontWeight: \"600\" }} id=\"alert-dialog-title\">\n                                {\"Delete Appointment\"}\n                            </DialogTitle>\n                            <DialogContent>\n                                <DialogContentText\n                                    style={{ color: \"#000\", fontWeight: \"500\" }}\n                                    id=\"alert-dialog-description\"\n                                >\n                                    Are you sure you want to delete this appointment?\n                            </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleCloseDeleteDialog} color=\"default\">\n                                    Back\n                                 </Button>\n                                <Button onClick={deleteClicked} variant=\"contained\" style={{ backgroundColor: \"#d10202\", color: \"#fff\" }}>\n                                    Yes, Delete this appointment\n                                 </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    </Dialog>\n\n                    <DateDialog\n                        open={openDateDialog}\n                        handleClose={handleCloseDateDialog}\n                        handleOK={handleSaveDateDialog}\n                        date={date}\n                        time={time}>\n\n                    </DateDialog>\n\n                </React.Fragment>\n            )}\n\n            <ChooseClinicDialog\n                    open={openClinicDialog}\n                    handleClose={handleCloseClinicDialog}\n                    clinicClicked={handleClinicClicked}\n            />\n            \n            \n        </React.Fragment>\n    );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/TimeStampDialog.js",["1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  Divider,\n  FormControlLabel,\n  Grid,\n  Link,\n  makeStyles,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport dateformat from \"dateformat\";\n\nconst addMinutes = (date, minutes) => {\n  date = new Date(date);\n  return new Date(date.getTime() + minutes * 60 * 1000);\n};\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  itemTitle: {\n    fontWeight: \"500\",\n    color: \"#555\",\n  },\n\n  itemData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"600\",\n    color: \"#127512\",\n  },\n}));\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function TimeStampDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [linkTimeStamp, setLinkTimeStamp] = React.useState(null);\n\n  const handleClose = () => {\n    setLinkTimeStamp(null);\n\n    props.handleClose();\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      if (props.booking.filename && props.booking.filename.length > 0) {\n        BookService.getLinkDetailsWithBookingId(props.booking._id).then(\n          (res) => {\n            if (res.data.status === \"OK\") {\n              setLinkTimeStamp(res.data.link.timeStamp);\n            }\n          }\n        );\n      }\n    }\n  }, [props.booking]);\n\n  const getDateFromBooking = (booking) => {\n    let date = new Date(booking.bookingDate);\n    date.setHours(booking.bookingTimeNormalized.substr(0, 2));\n    date.setMinutes(booking.bookingTimeNormalized.substr(3, 2));\n    date.setSeconds(0);\n    date.setMilliseconds(0);\n    return date;\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"sm\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <HistoryIcon style={{ color: \"#f50057\", fontSize: \"2rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"12px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    Audit Trail{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"370px\",\n              \n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"flex-start\"\n                  spacing={4}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      PATIENT BOOKING TIMESTAMP :{\" \"}\n                    </span>\n                    <span className={classes.itemData}>\n                      {\" \"}\n                      {dateformat(props.booking.timeStamp, \"isoDateTime\")}{\" \"}\n                    </span>\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      BOOKED DATE AND TIME :{\" \"}\n                    </span>\n                    <span className={classes.itemData}>\n                      {dateformat(\n                        getDateFromBooking(props.booking),\n                        \"isoDateTime\"\n                      )}\n                    </span>\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP ATTENDED :{\" \"}\n                    </span>\n                    {props.booking.samplingTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          props.booking.samplingTimeStamp,\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - SAMPLE TAKEN :{\" \"}\n                    </span>\n                    {props.booking.samplingTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          addMinutes(props.booking.samplingTimeStamp, 5),\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - COLLECTED BY COURIER :{\" \"}\n                    </span>\n                    {props.booking.samplingTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          addMinutes(props.booking.samplingTimeStamp, 35),\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - RESULTS RECEIVED :{\" \"}\n                    </span>\n                    {linkTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(linkTimeStamp, \"isoDateTime\")}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - SENT TO PATIENT :{\" \"}\n                    </span>\n                    {linkTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          addMinutes(linkTimeStamp, 5),\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"default\">\n                Back\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/services/BookService.js",["1316"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/DateField.js",["1317","1318","1319"],"import PropTypes from 'prop-types';\n\n\nimport React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n\nimport dateformat from 'dateformat';\nimport { FormControl, IconButton, InputLabel, Select, Tooltip } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TodayIcon from '@material-ui/icons/Today';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    loadingBox: {\n\n    }\n\n}));\n\n\nconst DateField = ({ title, value, dateChanged, error, todayButton, children }) => {\n\n    const [day, setDay] = React.useState('');\n    const [month, setMonth] = React.useState('');\n    const [year, setYear] = React.useState('');\n\n    const [dayArray, setDayArray] = React.useState([]);\n    const [monthArray, setMonthArray] = React.useState([]);\n    const [yearArray, setYearArray] = React.useState([]);\n\n    const updateDate = (dd, mm, yyyy) => {\n        let dayStr = `${dd}`;\n        let monthStr = `${mm + 1}`;\n\n\n        if (dayStr.length === 1) {\n            dayStr = `0${dayStr}`;\n        }\n\n        if (monthStr.length === 1) {\n            monthStr = `0${monthStr}`;\n        }\n\n        dateChanged(`${yyyy}-${monthStr}-${dayStr}`);\n\n\n    }\n\n    const handleDayChanged = (event) => {\n        setDay(event.target.value);\n        updateDate(event.target.value, month, year);\n    };\n\n    const handleMonthChanged = (event) => {\n        setMonth(event.target.value);\n        updateDate(day, event.target.value, year);\n    };\n\n    const handleYearChanged = (event) => {\n        setYear(event.target.value);\n        updateDate(day, month, event.target.value);\n    };\n\n    const resetDate = () => {\n        setDay(\"\")\n        setYear(\"\")\n        setMonth(\"\")\n        dateChanged(\"\")\n    }\n\n    const todayDate = () => {\n        const today = new Date()\n        updateDate(today.getDate(), today.getMonth(), today.getFullYear())\n    }\n\n\n    useEffect(() => {\n        if (value && value.length === 10) {\n            const d = parseInt(value.substr(8, 2));\n            const m = parseInt(value.substr(5, 2));\n            const y = parseInt(value.substr(0, 4));\n\n            setDay(d);\n            setMonth(m - 1);\n            setYear(y);\n        }else if (!value)\n        {\n            resetDate()\n        }\n\n\n    }, [value]);\n\n    useEffect(() => {\n\n        const days = [];\n        const months = [];\n        const years = [];\n\n\n        for (var i = 1; i <= 31; i++) {\n            days.push(i);\n        }\n\n        for (i = 0; i < 12; i++) {\n            months.push(dateformat(new Date(2020, i, 5), 'mmmm'));\n        }\n\n        for (i = 1900; i <= new Date().getFullYear() + 1; i++) {\n            years.push(i);\n        }\n\n\n        setDayArray(days);\n        setMonthArray(months);\n        setYearArray(years);\n\n    }, [])\n\n    return (\n\n        <React.Fragment>\n\n\n            <div style={{ position: \"relative\", border: `1px solid ${error ? 'red' : '#ddd'}`, borderRadius: \"10px\", padding: \"20px\", paddingBottom: \"20px\", marginTop: \"20px\" }}>\n\n                <div style={{ position: \"absolute\", top: \"-15px\", left: \"15px\", backgroundColor: \"#fff\", color: `${error ? 'red' : '#555'}`, padding: \"5px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                    {title}\n                </div>\n\n                <div style={{ position: \"absolute\", top: \"-25px\", right: \"10px\", backgroundColor: \"#fff\", color: `${error ? 'red' : '#555'}`, padding: \"5px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                    <Tooltip title=\"Clear Date\">\n                        <IconButton onClick={resetDate}>\n                            <CloseIcon />\n                        </IconButton>\n                    </Tooltip>\n                </div>\n\n                {todayButton && (\n                    <div style={{ position: \"absolute\", top: \"-25px\", right: \"70px\", backgroundColor: \"#fff\", color: `${error ? 'red' : '#555'}`, padding: \"5px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                        <Tooltip title=\"Today\">\n                            <IconButton onClick={todayDate}>\n                                <TodayIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n\n                )}\n\n\n\n\n\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"flex-start\"\n                    spacing={2}\n                >\n\n\n                    <Grid item xs={12} sm={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"day-label\">Day</InputLabel>\n                            <Select\n\n                                labelId=\"day-label\"\n                                id=\"day-select\"\n                                value={day}\n                                onChange={handleDayChanged}\n                            >\n                                {\n                                    dayArray.map(item => (\n                                        <MenuItem value={item}>{item}</MenuItem>\n                                    )\n                                    )}\n                            </Select>\n                        </FormControl>\n\n\n                    </Grid>\n\n                    <Grid item xs={12} sm={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"month-label\">Month</InputLabel>\n                            <Select\n                                labelId=\"month-label\"\n                                id=\"month-select\"\n                                value={month}\n                                onChange={handleMonthChanged}\n                            >\n                                {\n                                    monthArray.map((item, index) => (\n                                        <MenuItem value={index}>{item}</MenuItem>\n                                    )\n                                    )}\n                            </Select>\n                        </FormControl>\n\n\n                    </Grid>\n\n                    <Grid item xs={12} sm={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"day-label\">Year</InputLabel>\n                            <Select\n                                labelId=\"year-label\"\n                                id=\"year-select\"\n                                value={year}\n                                onChange={handleYearChanged}\n                            >\n                                {\n                                    yearArray.map(item => (\n                                        <MenuItem value={item}>{item}</MenuItem>\n                                    )\n                                    )}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n\n                <div>\n                    {children}\n                </div>\n\n            </div>\n\n\n        </React.Fragment>\n    );\n}\n\n\nDateField.propTypes = {\n    title: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    dateChanged: PropTypes.func.isRequired,\n    error: PropTypes.bool\n};\n\nexport default DateField;\n\n\n\n\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/DateDialog.js",["1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/PayDialog.js",["1346","1347","1348","1349","1350","1351","1352","1353","1354"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/PayDialog.js",["1355","1356","1357","1358","1359","1360","1361","1362","1363"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PayDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  useEffect( () => {\n    if (props.price)\n    {\n      setPrice(`${props.price}`)\n    }else\n    {\n      setPrice('')\n    }\n  }, [props.price, props.open])\n\n  const priceChanged = (event) =>\n  {\n    setPrice(event.target.value)\n    setPriceError(false)\n  }\n\n  const paymentMethodChanged = (event) => {\n    setPaymentMethod(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setPaymentMethod(\"credit card\");\n    setPrice('')\n    setCorporate(corporates[0]);\n    setSaving(false);\n  };\n\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  };\n\n  const payClicked = async () => {\n\n\n    if (!price || price.trim().length === 0 || price === '0')\n    {\n      setPriceError(true)\n      return\n    }\n\n    setSaving(true);\n\n  \n\n    try {\n      await BookService.payBooking(\n        props.booking._id,\n        price,\n        paymentMethod,\n        paymentMethod === \"corporate\" ? corporate : \"\"\n      );\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <CreditCardIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    PAY the CHARGE{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"300px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"space-between\"\n                  spacing={2}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                  <TextField\n                                autoFocus\n                                error={priceError}\n                                label=\"OTC Charges\"\n                                value={price}\n                                fullWidth\n                                required\n                                onChange={priceChanged}\n                                name=\"product-price\"\n                                id=\"product-price-id\"\n                                InputProps={{\n                                  inputComponent: NumberFormatCustom,\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                      £\n                                    </InputAdornment>\n                                  ),\n                                }}\n                              />\n\n                  </Grid>\n\n                  <Grid item>\n                    <div style={{ fontSize: \"17px\" }}>\n                      {\" \"}\n                      How do you want to pay?{\" \"}\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"paymentMethod\"\n                        name=\"paymentMethod\"\n                        value={paymentMethod}\n                        onChange={paymentMethodChanged}\n                      >\n                        <FormControlLabel\n                          value=\"credit card\"\n                          control={<Radio />}\n                          label=\"Credit Card\"\n                        />\n                        <FormControlLabel\n                          value=\"cash\"\n                          control={<Radio />}\n                          label=\"Cash\"\n                        />\n                        <FormControlLabel\n                          value=\"corporate\"\n                          control={<Radio />}\n                          label=\"Corporate\"\n                        />\n                      </RadioGroup>\n\n                      {paymentMethod === \"corporate\" && (\n                        <FormControl\n                          style={{ marginTop: \"10px\" }}\n                          className={classes.formControl}\n                        >\n                          <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                          >\n                            {corporates.map((element) => (\n                              <MenuItem\n                                value={element}\n                              >{`${element}`}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      )}\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                <Grid item></Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Pay\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/PriceCalculator.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/WeekView.js",["1364","1365"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '08:00 AM',\n    '08:15 AM',\n    '08:30 AM', \n    '08:45 AM',\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM',\n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n    '06:00 PM',\n    '06:15 PM',\n    '06:30 PM',\n    '06:45 PM',\n    '07:00 PM',\n    '07:15 PM',\n    '07:30 PM',\n    '07:45 PM'\n];\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/DayView.js",["1366","1367"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/CurrentVisits.js",["1368","1369","1370","1371"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/PersonsBox.js",["1372","1373","1374","1375","1376","1377","1378","1379","1380"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/MonthViewCell.js",["1381","1382","1383"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport GlobalState from '../../GlobalState';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelToday: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        backgroundColor: \"#1a73e8\",\n        color: \"#fff\",\n        fontSize: \"1rem\",\n        borderRadius: \"50%\",\n        padding: \"5px\",\n        lineHight: \"35px\",\n        minWidth: \"35px\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        lineHight: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"8%\",\n        height: \"85%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 10;  \n\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [dateStr, setDateStr] = React.useState('');\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n\n    const [disableDay, setDisableDay] = React.useState(false);\n\n    const [isPast, setIsPast] = React.useState(false);\n\n    useEffect( () => {\n\n        if (cellIndex <= daysInMonth.length)\n        {\n            const date = daysInMonth[cellIndex - 1];\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(date.getMonth() !== month - 1);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n        else\n        {\n            const day = cellIndex - daysInMonth.length;\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(true);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n\n    }, [cellIndex, month, daysInMonth]);\n\n    useEffect ( () => {\n\n        const fecthData = async () =>\n        {\n            if (!dateStr || dateStr.length <= 0)\n            {\n                return;\n            }\n        \n            if (disableDay)\n            {\n                setBookingsCount(-2);\n                return;\n            }\n\n            setBookingsCount(-1);\n\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\n\n            if (!res)\n            {\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\n            }\n        \n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }\n\n        }\n\n      fecthData();\n\n    }, [dateStr]);\n\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\n    {\n        var date = null;\n        var disabled = false;\n        var day = -1;\n\n    \n\n        if (_cellIndex <= _daysInMonth.length)\n        {\n            date = _daysInMonth[_cellIndex - 1];\n            day = date.getDate();\n            if (date.getMonth() !== _month - 1)\n            {\n                disabled = true;\n            }\n        }\n        else\n        {\n            const _day = _cellIndex - _daysInMonth.length;\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\n            day = date.getDate();\n            disabled = true;\n        }\n\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\n\n        return (\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\n                 {day > 0 ? `${day}` : ''}\n             </span>\n        );\n    }\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0 )\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0)\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container} onClick={(event => dayClicked(event,cellDate))}>\n\n              {getDayLabel(cellIndex, month, daysInMonth)}\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nMonthViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    cellIndex: PropTypes.number.isRequired,\n    month: PropTypes.number.isRequired,\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default MonthViewCell;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/services/PDFService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/NewBookingDialog.js",["1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"500\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid:{\n    color: theme.palette.primary.main,\n    fontWeight: \"600\"\n  },\n\n  PriceLabelNotPaid:{\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\"\n  },\n\n\n}));\n\nconst Packages = [\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\n  { packageName: `Coil Fitting/Coil Removal` },\n  { packageName: `Well Woman Check` },\n  { packageName: `Sexual Health Screening` },\n  { packageName: `Pre-pregnancy/Fertility check` },\n  { packageName: `Gynaecological Ultrasound` },\n  { packageName: `HPV Vaccination` },\n  { packageName: `Cervical / Pap Smear` },\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function NewBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [saving, setSaving] = useState(false);\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [fullnameError, setFullnameError] = React.useState(false);\n\n  const [phone, setPhone] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n\n  const [deposit, setDeposit] = React.useState(false);\n\n  const depositChanged = (event) => {\n    setDeposit(event.target.checked);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFullnameError(false);\n  };\n\n  const phoneChanged = (event) => {\n    setPhone(event.target.value);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    setFullname(\"\");\n    setFullnameError(false);\n    setPhone(\"\");\n    setEmail(\"\");\n    setService(\"\");\n    setNotes(\"\");\n    setDeposit(false);\n\n    props.handleClose();\n    setSaving(false);\n  };\n\n  const validateBooking = () => {\n    let error = false;\n    if (!fullname || fullname.trim().length < 1) {\n      setFullnameError(true);\n      error = true;\n    }\n    return !error;\n  };\n\n  const saveClicked = async () => {\n    if (!validateBooking()) {\n      return;\n    }\n\n    setSaving(true);\n\n    try {\n      await BookService.addNewBooking({\n        bookingDate: props.date,\n        bookingTime: props.time,\n        fullname: fullname,\n        phone: phone,\n        email: email,\n        service: service,\n        notes: notes,\n        deposit: deposit ? 100 : 0,\n      });\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.date && props.time && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\" style={{position:\"relative\"}}>\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    ADD New Booking{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.GYNAE_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\n                    GYNAE\n              </div>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"480px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      spacing={1}\n                    >\n                      <Grid item>\n                        <DateRangeIcon className={classes.CalendarIcon} />\n                      </Grid>\n                      <Grid item>\n                        <span className={classes.DateTimeLabel}>\n                          {props.date} , {props.time}\n                        </span>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      autoFocus\n                      error={fullnameError}\n                      label=\"Full Name\"\n                      value={fullname}\n                      required\n                      onChange={fullnameChanged}\n                      name=\"fullname\"\n                      id=\"fullname-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Telephone\"\n                      value={phone}\n                      onChange={phoneChanged}\n                      name=\"phone\"\n                      id=\"phone-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      value={email}\n                      onChange={emailChanged}\n                      name=\"email\"\n                      id=\"email-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} md={12}>\n                    <FormControl className={classes.formControl} fullWidth>\n                      <InputLabel id=\"service-label-id\">Service</InputLabel>\n                      <Select\n                        fullWidth\n                        labelId=\"service-label-id\"\n                        id=\"service-id\"\n                        value={service}\n                        onChange={serviceChanged}\n                      >\n                        {Packages.map((item) => (\n                          <MenuItem value={item.packageName}>\n                            {item.packageName}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Notes\"\n                      value={notes}\n                      onChange={notesChanged}\n                      name=\"notes\"\n                      id=\"notes-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid otem xs={12} style={{marginTop:\"15px\"}}>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          color=\"primary\"\n                          checked={deposit}\n                          onChange={depositChanged}\n                          name=\"deposit\"\n                        />\n                      }\n                      label={deposit ? <span className={classes.PriceLabelPaid}>£100 Deposit Paid</span> : <span className={classes.PriceLabelNotPaid}>£100 Deposit Not Paid</span>}\n                    />\n                  </Grid>\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={saveClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Save\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/DateField.js",["1399","1400","1401"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Navigator.js",["1402","1403","1404"],"import React from 'react';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport GlobalState from './GlobalState';\n\n\n\n\nimport SignIn from './SignIn';\nimport Dashboard from './Dashboard';\n\nimport { useLocation, useHistory} from \"react-router-dom\";\nimport { getUserIdFromToken } from './TokenVerifier';\nimport UserService from './services/UserService';\nimport { getMenuId } from './MenuList';\nimport { getRole, setRole } from './Role';\nimport { getGlobalPath } from './GlobalPath';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    appBar: {\n        position: 'static',\n        backgroundColor: \"#333\",\n        color: \"#fff\",\n        //alignItems: 'center'\n    \n      },\n\n      signOutButton:{\n        color: \"#fff\",\n        marginRight : \"20px\",\n        fontWeight: \"500\"\n      },\n\n      title: {\n        flexGrow : 1\n      }\n\n\n}));\n\nexport default function Navigator() {\n\n    const classes = useStyles();\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [loaded, setLoaded] = React.useState(false)\n\n    let history = useHistory();\n\n    const handleSignOut = () =>\n    {\n      setState(state => ({...state, signedIn: false}));\n\n    }\n\n    let location = useLocation();\n\n    React.useEffect(() => {\n\n      const checkToken = async () =>\n      {\n        const authToken = localStorage.getItem('ovadmin-auth-token') || sessionStorage.getItem('ovadmin-auth-token');\n        UserService.setToken(authToken)\n\n         if (!authToken)\n        {\n          setState(state => ({...state, signedIn: false, signedUp: false, forgotPassword: false}));\n          setLoaded(true)\n          history.push(getGlobalPath('/login'));\n        }\n        else\n        {\n           const userId = await getUserIdFromToken(authToken);\n           if (!userId)\n           {\n              setState(state => ({...state, signedIn: false, signedUp: false, forgotPassword: false}));\n              history.push(getGlobalPath('/login'));\n           }\n           else if (location.pathname === getGlobalPath('/') || location.pathname === getGlobalPath('/#') || location.pathname.startsWith(getGlobalPath('/login')))\n           {\n            if (!getRole())\n            {\n             setRole(userId.roles[0])\n            }\n             setState(state => ({...state, signedIn: true, signedUp: false, forgotPassword: false, userId: userId, role: getRole()}));\n            \n             history.push(getGlobalPath(`/${getMenuId(getRole(),0)}`));\n           }\n           else\n           {\n              if (!getRole())\n              {\n               setRole(userId.roles[0])\n              }\n             setState(state => ({...state, signedIn: true, userId: userId, role: getRole()}));\n           }\n\n           setLoaded(true)\n        }\n      }\n\n      checkToken();\n   \n    }, [location.pathname]);\n\n    const getComponentFromState = () =>\n    {\n\n      if (state.signedIn)\n      {\n        return <Dashboard/>\n      }\n      else\n      {\n          return <SignIn/>    \n      }\n    }\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n\n            {\n              loaded && (\n                getComponentFromState()\n              )\n            }\n        \n        </React.Fragment>\n    );\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/DashboardPreview.js",["1405","1406","1407","1408","1409","1410"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/api.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TotalReceivedPaymentView.js",["1411"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/CalendarView.js",["1412","1413","1414"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/services/BookService.js",["1415"],"import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n   static changeDepositBooking = (bookingId, deposit) => {\n      return API.post(`/api/gynae/book/changedepositbooking?id=${bookingId}&deposit=${deposit}`);\n   }\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/gynae/book/addnewbooking`, payload);\n   }\n\n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/gynae/book/sendregformemail?id=${bookingId}`);\n   }\n\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/gynae/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/gynae/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/gynae/book/getshouldrefundscount?`);\n   }\n\n   static manualRefundBooking = (bookingId) =>\n   {\n      return API.post(`/api/gynae/payment/manualrefundpayment`, {bookingId: bookingId});\n   }\n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/gynae/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gynae/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gynae/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/gynae/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gynae/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gynae/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gynae/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gynae/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gynae/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/gynae/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/gynae/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/gynae/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/gynae/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/gynae/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/gynae/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/gynae/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/gynae/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/gynae/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/gynae/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/gynae/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/Chart.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/CurrentVisits.js",["1416","1417"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/PriceCalculator.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/services/BookService.js",["1418"],"import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/std/book/addnewbooking`, payload);\n   }\n   \n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/std/book/sendregformemail?id=${bookingId}`);\n   }\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/std/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/std/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/std/book/getshouldrefundscount?`);\n   }\n\n   \n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/std/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/std/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/std/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/std/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/std/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/std/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/std/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/std/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/std/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/std/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/std/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/std/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/std/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/std/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/std/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/std/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/std/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/std/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/std/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/std/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/services/InvoiceService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Admin/calendar-admin/colors.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/services/PDFService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/services/PDFService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/PayDialog.js",["1419","1420","1421","1422","1423","1424","1425","1426","1427"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PayDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  useEffect( () => {\n    if (props.price)\n    {\n      setPrice(`${props.price}`)\n    }else\n    {\n      setPrice('')\n    }\n  }, [props.price, props.open])\n\n  const priceChanged = (event) =>\n  {\n    setPrice(event.target.value)\n    setPriceError(false)\n  }\n\n  const paymentMethodChanged = (event) => {\n    setPaymentMethod(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setPaymentMethod(\"credit card\");\n    setPrice('')\n    setCorporate(corporates[0]);\n    setSaving(false);\n  };\n\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  };\n\n  const payClicked = async () => {\n\n\n    if (!price || price.trim().length === 0 || price === '0')\n    {\n      setPriceError(true)\n      return\n    }\n\n    setSaving(true);\n\n  \n\n    try {\n      await BookService.payBooking(\n        props.booking._id,\n        price,\n        paymentMethod,\n        paymentMethod === \"corporate\" ? corporate : \"\"\n      );\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <CreditCardIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    PAY the CHARGE{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"300px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"space-between\"\n                  spacing={2}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                  <TextField\n                                autoFocus\n                                error={priceError}\n                                label=\"TOTAL Charges\"\n                                value={price}\n                                fullWidth\n                                required\n                                onChange={priceChanged}\n                                name=\"product-price\"\n                                id=\"product-price-id\"\n                                InputProps={{\n                                  inputComponent: NumberFormatCustom,\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                      £\n                                    </InputAdornment>\n                                  ),\n                                }}\n                              />\n\n                  </Grid>\n\n                  <Grid item>\n                    <div style={{ fontSize: \"17px\" }}>\n                      {\" \"}\n                      How do you want to pay?{\" \"}\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"paymentMethod\"\n                        name=\"paymentMethod\"\n                        value={paymentMethod}\n                        onChange={paymentMethodChanged}\n                      >\n                        <FormControlLabel\n                          value=\"credit card\"\n                          control={<Radio />}\n                          label=\"Credit Card\"\n                        />\n                        <FormControlLabel\n                          value=\"cash\"\n                          control={<Radio />}\n                          label=\"Cash\"\n                        />\n                        <FormControlLabel\n                          value=\"corporate\"\n                          control={<Radio />}\n                          label=\"Corporate\"\n                        />\n                      </RadioGroup>\n\n                      {paymentMethod === \"corporate\" && (\n                        <FormControl\n                          style={{ marginTop: \"10px\" }}\n                          className={classes.formControl}\n                        >\n                          <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                          >\n                            {corporates.map((element) => (\n                              <MenuItem\n                                value={element}\n                              >{`${element}`}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      )}\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                <Grid item></Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Pay\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/ResendEmailsDialog.js",["1428","1429","1430","1431","1432","1433","1434","1435","1436"],"import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Button,\n  Checkbox,\n  Divider,\n  FormControlLabel,\n  Grid,\n  Link,\n  makeStyles,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n}));\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function ResendEmailsDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [sending, setSending] = React.useState(false);\n  const [sent, setSent] = React.useState(false);\n\n  const [sendJustToPCR, setSendJustToPCR] = React.useState(false);\n\n  const [sendingStatus, setSendingStatus] = React.useState(\"\");\n\n  const [sendingProgress, setSendingProgress] = React.useState(10);\n\n  const [error, setError] = React.useState(false);\n\n  const getProgress = (status) => {\n    console.log(`status : ${status}`);\n\n    if (status === \"downloadFailed\") return 10;\n    else if (status === \"downloading\") return 30;\n    else if (status === \"downloadSuccess\") return 70;\n    else if (status === \"sent\") return 100;\n    else return 0;\n  };\n\n  const handleClose = () => {\n    setSending(false);\n    setSent(false);\n    setError(false);\n    clearInterval(interval);\n    props.handleClose();\n  };\n\n  useEffect(() => {\n    setSendingProgress((prevProgress) =>\n      prevProgress >= 100 ? 100 : getProgress(sendingStatus)\n    );\n  }, [sendingStatus]);\n\n  const resendFilesClicked = (event) => {\n    setSending(true);\n    setSendingProgress(0);\n    setSendingStatus(\"downloadFailed\");\n    setSendJustToPCR(true);\n\n    BookService.regenerateFilesWithBookingId(props.booking._id)\n      .then((res) => {\n        interval = setInterval(() => {\n          BookService.getLinkDetailsWithBookingId(props.booking._id).then(\n            (res) => {\n              if (res.data.status === \"OK\") {\n                setSendingStatus(res.data.link.status);\n\n                if (res.data.link.status === \"sent\") {\n                  setSending(false);\n                  setSent(true);\n                  clearInterval(interval);\n                }\n              } else if (res.data.status === \"FAILED\") {\n                setSending(false);\n                setSent(false);\n                clearInterval(interval);\n                setError(true);\n              }\n            }\n          );\n        }, 1000);\n\n        setTimeout(() => {\n          setError(true);\n          clearInterval(interval);\n        }, 60000);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSending(false);\n      });\n  };\n\n  const resendEmailsClicked = (event) => {\n    setSending(true);\n    setSendingProgress(0);\n    setSendingStatus(\"downloadFailed\");\n\n    BookService.resendEmailsWithBookingId(props.booking._id)\n      .then((res) => {\n        interval = setInterval(() => {\n          BookService.getLinkDetailsWithBookingId(props.booking._id).then(\n            (res) => {\n              if (res.data.status === \"OK\") {\n                setSendingStatus(res.data.link.status);\n\n                if (res.data.link.status === \"sent\") {\n                  setSending(false);\n                  setSent(true);\n                  clearInterval(interval);\n                }\n              } else if (res.data.status === \"FAILED\") {\n                setSending(false);\n                setSent(false);\n                clearInterval(interval);\n                setError(true);\n              }\n            }\n          );\n        }, 1000);\n\n        setTimeout(() => {\n          setError(true);\n          clearInterval(interval);\n        }, 60000);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSending(false);\n      });\n  };\n\n  const cancelResendEmailsClicked = (event) => {\n    props.handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <SendIcon style={{ color: \"#2f942e\", fontSize: \"2rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#2f942e\",\n                      paddingBottom: \"12px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    RESEND EMAILS{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"230px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"center\"\n                  spacing={1}\n                  alignItems=\"center\"\n                >\n                  {!sent && !sending && (\n                    <React.Fragment>\n                      <Grid item>\n                        <div\n                          style={{\n                            paddingTop: \"5px\",\n                            fontSize: \"1rem\",\n                            fontWeight: \"500\",\n                            color: \"#555\",\n                          }}\n                        >\n                          Do you want to Resend the LAB Report{\" \"}\n                          {props.booking.certificate ? \" and Certificate\" : \"\"}{\" \"}\n                          Now?\n                        </div>\n                      </Grid>\n\n                      <Grid item>\n                        <Button\n                          disabled={sending || sent}\n                          className={classes.resendButton}\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={resendEmailsClicked}\n                        >\n                          YES ! RESEND THE EMAILS\n                        </Button>\n                      </Grid>\n\n                      <Grid item>\n                        <Button\n                          disabled={sending || sent}\n                          className={classes.cancelButton}\n                          variant=\"contained\"\n                          color=\"default\"\n                          onClick={cancelResendEmailsClicked}\n                        >\n                          NO ! NOT NOW\n                        </Button>\n                      </Grid>\n\n                      <Grid item>\n                        <Button\n                          disabled={sending || sent}\n                          className={classes.resendFilesButton}\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={resendFilesClicked}\n                        >\n                          Just Generate The Files and send to\n                          pcrresults@medicalexpressclinic.co.uk\n                        </Button>\n                      </Grid>\n                    </React.Fragment>\n                  )}\n\n                  {error && !sending && !sent && (\n                    <Grid item>\n                      <Alert\n                        style={{\n                          marginTop: \"10px\",\n                          paddingLeft: \"50px\",\n                          paddingRight: \"50px\",\n                        }}\n                        severity=\"error\"\n                      >\n                        Error! — Something is wrong with this record!\n                      </Alert>\n                    </Grid>\n                  )}\n\n                  {(sending || sent) && (\n                    <Grid item>\n                      <div\n                        style={{\n                          paddingTop: \"50px\",\n                          color: \"#2f942e\",\n                          fontWeight: \"600\",\n                          fontSize: \"1rem\",\n                        }}\n                      >\n                        {sending && !sent && \"Sending ...\"}\n\n                        {sent && !sendJustToPCR && (\n                          <Alert\n                            style={{\n                              marginTop: \"10px\",\n                              paddingLeft: \"50px\",\n                              paddingRight: \"50px\",\n                            }}\n                            severity=\"success\"\n                          >\n                            Success! — The LAB Report{\" \"}\n                            {props.booking.certificate\n                              ? \" and Certificate \"\n                              : \" \"}{\" \"}\n                            Successfully Sent.\n                          </Alert>\n                        )}\n\n                        {sent && sendJustToPCR && (\n                          <Alert\n                            style={{\n                              marginTop: \"10px\",\n                              paddingLeft: \"50px\",\n                              paddingRight: \"50px\",\n                            }}\n                            severity=\"success\"\n                          >\n                            Success! — The LAB Report{\" \"}\n                            {props.booking.certificate\n                              ? \" and Certificate \"\n                              : \" \"}{\" \"}\n                            Successfully Sent Just to\n                            pcrresults@medicalexpressclinic.co.uk .\n                          </Alert>\n                        )}\n                      </div>\n                    </Grid>\n                  )}\n                </Grid>\n\n                {(sending || sent) && (\n                  <React.Fragment>\n                    <div\n                      style={{\n                        marginTop: \"10px\",\n                        width: \"50%\",\n                        marginLeft: \"27%\",\n                      }}\n                    >\n                      <LinearProgressWithLabel\n                        variant=\"determinate\"\n                        color=\"primary\"\n                        value={sendingProgress}\n                      />\n                    </div>\n\n                    <div\n                      style={{\n                        paddingTop: \"30px\",\n                        color: \"#2f942e\",\n                        fontWeight: \"600\",\n                        fontSize: \"1rem\",\n                        marginLeft: \"45%\",\n                      }}\n                    >\n                      {sending && !sent && \"PLEASE WAIT ...\"}\n                    </div>\n                  </React.Fragment>\n                )}\n              </div>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/services/PDFService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/calendar-admin/WeekView.js",["1437","1438"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM', \n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/DayView.js",["1439","1440"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport DayViewCell from './DayViewCell';\nimport dateformat from 'dateformat';\n\n\n\n\nconst rows = [\n    '10:00 AM',\n    '10:30 AM', \n    '11:00 AM', \n    '11:30 AM', \n    '12:00 PM',\n    '12:30 PM',\n    '01:00 PM',\n    '01:30 PM',\n    '02:00 PM',\n    '02:30 PM',\n    '03:00 PM',\n    '03:30 PM',\n    '04:00 PM',\n    '04:30 PM',\n    '05:00 PM',\n    '05:30 PM',\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"84%\", \n    },\n\n    titleLabel: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#777\",\n        fontSize: \"16px\"\n    },\n\n    titleLabelToday: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#fff\",\n        backgroundColor: \"#1a73e8\",\n        fontSize: \"16px\"\n    },\n\n  }));\n\nconst DayView = ({date}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                        <th style={{width: \"84%\"}}>\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\n                                        {dateformat(date,'dddd')}\n                                </div>                                \n                        </th>\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                               \n                                <td className={classes.td}>\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \n                                </td>\n                            \n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nDayView.propTypes = {\n    date: PropTypes.any.isRequired\n  };\n\n\nexport default DayView;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/DayView.js",["1441","1442"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/BookingDialog.js",["1443","1444","1445","1446","1447","1448","1449","1450","1451","1452","1453","1454","1455"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/DayViewCell.js",["1456","1457","1458","1459","1460","1461","1462"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/MonthViewCell.js",["1463","1464","1465","1466","1467","1468","1469","1470"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/index.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/SignIn.js",["1471","1472","1473","1474","1475","1476","1477","1478"],"import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Link from \"@material-ui/core/Link\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport GlobalState from \"./GlobalState\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport logoImage from \"./images/optimal-vision-logo.png\"\n\nimport {\n  Grid,\n  AppBar,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  Paper,\n  Backdrop,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { IconButton, Toolbar } from \"@material-ui/core\";\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport Copyright from \"./CopyRight\";\n\nimport { useHistory } from \"react-router-dom\";\nimport UserService from \"./services/UserService\";\nimport { getMenuId } from \"./MenuList\";\n\nimport { useMediaQuery } from 'react-responsive'\nimport { borderRadius } from \"@material-ui/system\";\nimport { setRole } from \"./Role\";\nimport { getGlobalPath } from \"./GlobalPath\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"100vh\",\n  },\n  image: {\n    backgroundImage: \"url(/images/bg.jpg)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  paper: {\n    // margin: theme.spacing(15, 2),\n    padding: theme.spacing(4,4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    position: \"relative\"\n    // border: `2px solid ${theme.palette.primary.main}`,\n    // borderRadius: \"8px\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    color: \"#f5f5f5\",\n  },\n\n  margin: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n\n  alert: {\n    width: \"100%\",\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n\n  pageBg:{\n    paddingTop: theme.spacing(2),\n   \n    background: \"linear-gradient(274deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 5%, rgba(210,210,210,1) 100%)\",\n    height: \"100vh\",\n    margin: 0,\n    padding:0,\n  },\n\n  appbarCenter: {\n    position: \"absolute\",\n    // width: \"260px\",\n    top: \"-40px\",\n    right: \"0\",\n    marginLeft: \"-145px\",\n    alignItems: \"center\",\n    justify: \"center\",\n    display: \"flex\",\n    backgroundColor: \"#fff\",\n    padding: \"5px 20px 15px 20px\",\n    borderRadius: \"8px\"\n  },\n\n  logoImage: {\n    width: \"30px\",\n    height: \"30px\",\n    marginLeft: \"0px\",\n  },\n\n  appbarTitle: {\n    color: \"#00a1c5\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    marginRight: \"15px\",\n  },\n\n  adminPanelLabel: {\n    color: theme.palette.primary.main, \n    fontWeight: \"600\",\n    marginBottom:\"10px\"\n  },\n\n\n  adminPanelLabel2: {\n    color: theme.palette.secondary.main, \n    fontWeight: \"600\",\n    marginBottom:\"20px\",\n    fontSize:\"1.5rem\",\n    textAlign:\"center\"\n  }\n\n\n\n}));\n\nexport default function SignIn() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  const isMobile = useMediaQuery({ maxWidth: 1224 })\n\n\n  let history = useHistory();\n\n  const [password, setPassword] = React.useState(\"\");\n\n  const [username, setUsername] = React.useState(\"\");\n\n  const [saveChecked, setSaveChecked] = React.useState(false);\n\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const [error, setError] = React.useState(null);\n  const [submiting, setSubmiting] = React.useState(false);\n\n  const signIn = () => {\n    setSubmiting(true);\n\n    UserService.signIn({\n      username: username,\n      password: password,\n    })\n      .then((res) => {\n        setSubmiting(false);\n        if (res.data.status === \"OK\") {\n          setError(null);\n          const token = res.data.token;\n          if (saveChecked) {\n            localStorage.setItem(\"ovadmin-auth-token\", token);\n          } else {\n            sessionStorage.setItem(\"ovadmin-auth-token\", token);\n          }\n\n          setState((state) => ({ ...state, signedIn: true }));\n          setRole(res.data.roles[0])\n          setState((state) => ({ ...state, currentMenuIndex: 0 }));\n          history.push(getGlobalPath(`/${getMenuId(res.data.roles[0], 0)}`));\n        } else if (res.data.status === \"FAILED\") {\n          setError(res.data.error);\n        } else {\n          setError(\"Sorry, something went wrong, please try again.\");\n        }\n      })\n      .catch((err) => {\n        setSubmiting(false);\n        console.error(err);\n        setError(\"Sorry, something went wrong, please try again.\");\n      });\n  };\n\n  const usernameChanged = (event) => {\n    setUsername(event.target.value);\n    setError(null);\n  };\n\n  const passwordChanged = (event) => {\n    setPassword(event.target.value);\n    setError(null);\n  };\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const saveCheckedChanged = (event) => {\n    setSaveChecked(event.target.checked);\n  };\n\n  return (\n    <div className={classes.pageBg}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n\n        <Paper elevation={20}>\n          <div className={classes.paper}>\n            {/* <div className={classes.appbarCenter}>\n              <span className={classes.appbarTitle}>\n                Medical Express Clinic\n              </span>\n\n              <img\n                className={classes.logoImage}\n                src={getGlobalPath(\"/images/logo.png\")}\n                alt=\"logo image\"\n              />\n            </div> */}\n\n            <img src={'https://www.museumdentalsuites.co.uk/uploads/1534511600822Museum-Dental-Suites-logo.png'} alt=\"Optimal Vision\" style={{marginBottom:\"20px\", width:\"160px\", height:\"80px\"}}/>\n\n            {/* <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              className={classes.adminPanelLabel2}\n            >\n              Museum Dental Payments\n            </Typography> */}\n\n\n            <Avatar className={classes.avatar}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              className={classes.adminPanelLabel}\n            >\n              Payments Admin Panel\n            </Typography>\n\n            {error && (\n              <div className={classes.alert}>\n                <Alert severity=\"error\">\n                  {\" \"}\n                  <div style={{ lineHeight: \"1.5rem\", textAlign: \"justify\" }}>\n                    {error}\n                  </div>\n                </Alert>\n              </div>\n            )}\n\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Username\"\n              name=\"email\"\n              autoComplete=\"username\"\n              value={username}\n              onChange={usernameChanged}\n              autoFocus\n            />\n            <FormControl\n              fullWidth\n              required\n              className={clsx(classes.margin, classes.textField)}\n              variant=\"outlined\"\n              onKeyPress={(event) => {\n                if (event.key === \"Enter\") {\n                  signIn();\n                }\n              }}\n            >\n              <InputLabel htmlFor=\"outlined-adornment-password\">\n                {\" \"}\n                Password{\" \"}\n              </InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password\"\n                name=\"outlined-adornment-password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={passwordChanged}\n                autoComplete=\"current-password\"\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      tabindex=\"-1\"\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                    >\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={100}\n              />\n            </FormControl>\n\n            <FormControlLabel\n              style={{ textAlign: \"left\", width: \"100%\" }}\n              control={\n                <Checkbox\n                  value=\"remember\"\n                  color=\"primary\"\n                  checked={saveChecked}\n                  onChange={saveCheckedChanged}\n                />\n              }\n              label=\"Remember me\"\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={signIn}\n              className={classes.submit}\n            >\n              Sign In\n            </Button>\n          </div>\n        </Paper>\n\n        <Backdrop className={classes.backdrop} open={submiting}>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            <Grid item>\n              <CircularProgress color=\"inherit\" />\n            </Grid>\n            <Grid item>\n              <span style={{ textAlign: \"center\", color: \"#fff\" }}>\n                {\" \"}\n                {/* Please wait ...{\" \"} */}\n              </span>\n            </Grid>\n          </Grid>\n        </Backdrop>\n\n        <Box mt={5} style={{ color: \"#eee\" }}>\n          {/* <Copyright /> */}\n        </Box>\n      </Container>\n    </div>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/DashboardPreview.js",["1479","1480","1481"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/FindByRef.js",["1482","1483","1484","1485","1486"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/TotalLinkSentView.js",["1487"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/BookingView.js",["1488","1489","1490","1491"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/ResultsTimeReport.js",["1492","1493","1494","1495","1496"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Title from './Title';\nimport { Dialog, DialogContent, DialogTitle, Grid, LinearProgress, Link, Table, TableBody, TableCell, TableHead, TableRow, Tooltip } from '@material-ui/core';\nimport BookService from './services/BookService';\n\nimport {\n    PieChart, Pie, Sector, Cell,\n  } from 'recharts';\n\n  const COLORS = ['#00b33e', '#0070e0', '#bb00c4'];\n\n  const RADIAN = Math.PI / 180;\n\n  const renderCustomizedLabel = ({\n    cx, cy, midAngle, innerRadius, outerRadius, value, index,\n  }) => {\n     const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  \n    return (\n      <text x={x} y={y} fontSize=\"14px\" fontWeight=\"500\" fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                {`${value} `}\n      </text>\n    );\n  };\n\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n\n  ReportLabels: {\n      position: \"absolute\",\n      top : \"80px\",\n      left: \"0px\"\n  },\n\n  AverageLabel: {\n    position: \"absolute\",\n    top : \"190px\",\n    right: \"30px\",\n    fontSize : \"12px\",\n    color : \"#0070e0\",\n    fontWeight: \"600\",\n  },\n\n  less12Label: {\n      fontSize : \"12px\",\n      color : \"#00b33e\",\n      fontWeight: \"600\",\n      paddingLeft : \"5px\",\n      borderLeft: \"5px solid #00b33e\",\n      marginBottom : \"10px\",\n  },\n\n  less24Label: {\n    fontSize : \"12px\",\n    color : \"#0070e0\",\n    fontWeight: \"600\",\n    paddingLeft : \"5px\",\n    borderLeft: \"5px solid #0070e0\",\n    marginBottom : \"10px\",\n    },\n\nless36Label: {\n    fontSize : \"12px\",\n    color : \"#bb00c4\",\n    fontWeight: \"600\",\n    paddingLeft : \"5px\",\n    borderLeft: \"5px solid #bb00c4\",\n    marginBottom : \"10px\",\n    },\n\n    seeMore :{\n        position: \"absolute\",\n        top : \"191px\",\n        left : \"2px\"\n    }\n\n});\n\n\nexport default function ResultsTimeReport() {\n  const classes = useStyles();\n\n  const[current, setCurrent] = React.useState(new Date());\n  const [report, setReport] = React.useState({});\n  const [open, setOpen] = React.useState(false);\n\n  const [data, setData] = React.useState(null);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const handleClose = () =>\n  {\n      setOpen(false);\n  }\n\n  useEffect(() => \n  {\n    const interval = setInterval(() => {  \n      setCurrent(new Date());\n    }, 30000);\n\n    return () =>\n    {\n      clearInterval(interval);\n    }\n\n  }, []);\n\n  useEffect( () => \n  {\n    \n    setLoading(true)\n    BookService.getTestsTimeReport().then(res =>\n      {\n        const result = [];  \n        setLoading(false)\n        if (res.data.status === 'OK')\n        {\n            setReport(res.data.result);\n            // console.log(res.data.result);\n            result.push({name: 'lessThan12', value : res.data.result.lessThan12 });\n            result.push({name: 'lessThan24', value : res.data.result.lessThan24 });\n            result.push({name: 'lessThan36', value : res.data.result.lessThan36 });\n         \n           // result.push({name: 'lessThan48', value : res.data.result.lessThan48 });\n            setData(result);\n        }   \n\n      }).catch(err =>\n        {\n          setLoading(false)\n          console.error(err);\n        });\n\n\n    } , [] );\n\n    const getReportLabels = () =>\n    {\n           return (\n\n                <div className={classes.ReportLabels}>\n                    <div className={classes.less12Label}> {`12 Hours`} </div>\n                    <div className={classes.less24Label}> {`24 Hours`} </div>\n                    <div className={classes.less36Label}> {`36 Hours`} </div>\n                </div>\n    \n            );\n    }\n\n    const getAverageLabel = () =>\n    {\n           return (\n\n                <div className={classes.AverageLabel}>\n                   avg = <span style={{fontSize:\"14px\"}}> {`${report.avg}`} </span> hours\n                </div>\n    \n            );\n    }\n\n    const seeMoreClicked = (event) => {\n        event.preventDefault();\n        setOpen(true);\n      }\n\n  return (\n    <React.Fragment>\n    \n    <div style={{position: \"relative\"}}>\n    {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Title>PCR RESULTS SUMMARY</Title>\n\n      {data && (\n                <>\n\n                <PieChart width={250} height={150}>\n                    <Pie\n                        data={data}\n                        cx={170}\n                        cy={70}\n                        labelLine={false}\n                        label={renderCustomizedLabel}\n                        outerRadius={65}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        >\n                        {\n                            data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n                        }\n                    </Pie>\n                </PieChart>\n                \n\n                {getReportLabels()}\n                {getAverageLabel()}\n\n                <div className={classes.seeMore}>\n                            <Link color=\"primary\" href=\"#\" onClick={seeMoreClicked}>\n                                  See Details\n                            </Link>\n                  </div>\n\n\n                  <Dialog style={{padding: \"50px\"}} onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>  \n                      <DialogTitle style={{textAlign: \"center\"}} id=\"simple-dialog-title\">PCR Results Time Report</DialogTitle>\n                            <DialogContent>\n                            <Table>\n                            <TableHead>\n                            <TableRow>\n                                <TableCell>Recieved in Less Than</TableCell>        \n                                <TableCell>Count</TableCell>\n                                <TableCell>Percent</TableCell>\n                            </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <TableRow key=\"row1\">\n                                    <TableCell>12 Hours</TableCell>\n                                    <TableCell>{report.lessThan12}</TableCell>\n                                    <TableCell>{report.lessThan12Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row2\">\n                                    <TableCell>24 Hours</TableCell>\n                                    <TableCell>{report.lessThan24}</TableCell>\n                                    <TableCell>{report.lessThan24Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row3\">\n                                    <TableCell>36 Hours</TableCell>\n                                    <TableCell>{report.lessThan36}</TableCell>\n                                    <TableCell>{report.lessThan36Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row4\">\n                                    <TableCell>48 Hours</TableCell>\n                                    <TableCell>{report.lessThan48}</TableCell>\n                                    <TableCell>{report.lessThan48Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row4\">\n                                    <TableCell style={{fontWeight:\"800\"}}>Total Results Received : </TableCell>\n                                    <TableCell style={{fontWeight:\"600\"}}>{report.lessThan48 + report.lessThan36 + report.lessThan24 + report.lessThan12}</TableCell>\n                                    <TableCell></TableCell>\n                                </TableRow>\n\n\n\n                            \n                            </TableBody>\n                        </Table>\n                            </DialogContent>\n                </Dialog>\n    \n\n\n\n                </>\n      )}\n     \n     </div>\n\n\n\n    </React.Fragment>\n  );\n}","/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/Title.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/DateFormatter.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/PCR/services/PDFService.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/services/api.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/BookingDialog.js",["1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"./../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceService from \"../services/InvoiceService\";\nimport InvoiceDialog from \"../InvoiceDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n  },\n\n  infoData: {\n    fontWeight: \"400\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n\n    backgroundColor: \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid: {\n    color: theme.palette.primary.main,\n    fontWeight: \"600\",\n  },\n\n  PriceLabelNotPaid: {\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"72px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const handleCloseUndoPayDialog = () => {\n    setOpenUndoPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleClosePayDialog = () => {\n    setOpenPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseRefundDialog = () => {\n    setOpenRefundDialog(false);\n    setSelectedBooking(null);\n  };\n\n  useEffect(() => {\n    if (booking) {\n      const isChanged =\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\n        bookingTime !== booking.bookingTime ||\n        fullname !== booking.fullname ||\n        email !== booking.email ||\n        tel !== booking.phone ||\n        service !== booking.service ||\n        notes !== booking.notes;\n\n      setRecordChanged(isChanged);\n    }\n  }, [fieldChanged]);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <div className={classes.BookedLabel}> Booking Made </div>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\n      );\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setFullname(person.fullname);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setEmail(person.email);\n      setTel(person.phone);\n      setService(person.service);\n      if (person.notes) {\n        setNotes(person.notes);\n      }\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.email = email;\n      booking.phone = tel;\n      booking.fullname = fullname;\n      booking.notes = notes;\n      booking.service = service;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const changeToPatientAttended = (event, id) => {\n    setSaving(true);\n    BookService.changeToPatientAttended(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const Pay = (event, id) => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  const refundPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.refundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setOpenRefundDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const updateShouldRefundsCount = async () => {\n    try {\n      const res = await BookService.getShouldRefundsCount();\n      if (res && res.data && res.data.status === \"OK\") {\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  };\n\n  const downloadRegForm = (id) => {\n    PDFService.downloadGynaeRegForm(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendRegForm = (id) => {\n    setSaving(true);\n    setEmailSent(false);\n    BookService.sendRegFormEmail(id)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSent(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const manualRefund = async () => {\n    setSaving(true);\n    try {\n      await BookService.manualRefundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const depositChanged = async (event) => {\n    const checked = event.target.checked;\n    const deposit = checked ? 100 : 0;\n    setSaving(true);\n    try {\n      await BookService.changeDepositBooking(booking._id, deposit);\n      setSaving(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  const onClose = () => {\n    setEmailSent(false);\n    setEmailSentInvoice(false);\n    setInvoice(null);\n    props.onClose();\n  };\n\n  ///*** Invoice  ******************/\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const fetchInvoice = async () => {\n    try {\n      setInvoiceLoaded(false);\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\n      setInvoice(res.data.invoice);\n      setInvoiceLoaded(true);\n    } catch (err) {\n      setInvoiceLoaded(true);\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (props.booking) {\n      fetchInvoice();\n    }\n  }, [props.booking, props.open]);\n\n  const handleCloseInvoiceDialog = (refresh) => {\n    setOpenInvoiceDialog(false);\n    setSelectedBooking(null);\n    fetchInvoice();\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  //***************************** */\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              style={\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\n              }\n            >\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\n                  <IconButton\n                    onClick={() => {\n                      navigator.clipboard.writeText(\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/gynae/${booking._id}`\n                      );\n                      setCopied(true);\n                      setTimeout(() => {\n                        setCopied(false);\n                      }, 1500);\n                    }}\n                    aria-label=\"delete\"\n                    className={classes.margin}\n                    size=\"small\"\n                  >\n                    <FileCopyOutlinedIcon\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\n                      fontSize=\"14px\"\n                    />\n                  </IconButton>\n                </Tooltip>\n\n                <span\n                  hidden={!copied}\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\n                >\n                  {\" \"}\n                  Copied{\" \"}\n                </span>\n              </div>\n\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"25x\",\n                  right: \"60px\",\n                  backgroundColor: CalendarColors.GYNAE_COLOR,\n                  color: \"#fff\",\n                  padding: \"0px 5px\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                GYNAE\n              </div>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.fullname}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={\n                          booking.tr\n                            ? {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#fff\",\n                                fontSize: 25,\n                              }\n                            : {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#333\",\n                                fontSize: 25,\n                              }\n                        }\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  // height: \"550px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Edit Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          deleteMode.delete ||\n                          (editMode.edit && editMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleEditModeChanged(true, booking);\n                          }}\n                          className={classes.EditButton}\n                        >\n                          Edit Booking Info\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={saving || !recordChanged}\n                          onClick={() => {\n                            handleEditModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          Save Changes\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={saving}\n                          onClick={() => {\n                            handleEditModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to delete this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        {booking.OTCCharges > 0 && (\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\n                            <div>\n                              <Button\n                                disabled={booking.OTCCharges > 0}\n                                type=\"button\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                  handleDeleteModeChanged(true, booking);\n                                }}\n                                className={classes.DeleteButton}\n                              >\n                                Delete This Record\n                              </Button>\n                            </div>\n                          </Tooltip>\n                        )}\n                        {booking.OTCCharges === 0 && (\n                          <Button\n                            disabled={booking.OTCCharges > 0}\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              handleDeleteModeChanged(true, booking);\n                            }}\n                            className={classes.DeleteButton}\n                          >\n                            Delete This Record\n                          </Button>\n                        )}\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Delete this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>FULLNAME</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.fullname}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>EMAIL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span className={classes.infoTitle}>SERVICE</span>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoData}\n                        >\n                          {booking.service}\n                        </span>\n                        <span\n                          hidden={\n                            !(\n                              editMode.edit &&\n                              editMode.person._id === booking._id\n                            )\n                          }\n                          className={classes.infoData}\n                        >\n                          <TextField\n                            fullWidth\n                            className={classes.TextBox}\n                            value={service}\n                            onChange={serviceChanged}\n                            inputProps={{\n                              style: {\n                                padding: 0,\n                              },\n                            }}\n                          ></TextField>\n                        </span>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>TEL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>NOTES</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.notes}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={notes}\n                                onChange={notesChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\n                        {getStatusLabel(booking.status)}\n                        {booking.status === \"patient_attended\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeBackToBookingMade(event, booking._id)\n                              }\n                            >\n                              Change Back To Booking Made\n                            </Button>\n                          )}\n                        {booking.status === \"booked\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"default\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeToPatientAttended(event, booking._id)\n                              }\n                            >\n                              Change To Patient Attended\n                            </Button>\n                          )}\n                      </li>\n\n                      <li hidden={booking.deleted || editMode.edit}>\n                        <Button\n                          disabled={!booking.formData}\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                        >\n                          Download Registration Form\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          booking.deleted || editMode.edit || booking.formData\n                        }\n                      >\n                        <Button\n                          disabled={!booking.email || booking.email.length < 3}\n                          startIcon={<SendIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            sendRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                          style={{ position: \"relative\" }}\n                        >\n                          Send Registration Form Email\n                          {emailSent && (\n                            <div\n                              style={{\n                                position: \"absolute\",\n                                right: \"10px\",\n                                top: \"5px\",\n                                color: \"#05ad19\",\n                              }}\n                            >\n                              Email Sent\n                            </div>\n                          )}\n                        </Button>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\n                        <span style={{ paddingLeft: \"0px\" }}>\n                          {!invoiceLoaded && (\n                            <span className={classes.invoiceNumber}> ... </span>\n                          )}\n                          {invoiceLoaded && invoice && (\n                            <span className={classes.invoiceNumber}>\n                              {\" \"}\n                              {invoice.invoiceNumber}{\" \"}\n                            </span>\n                          )}\n                          {invoiceLoaded && !invoice && (\n                            <span\n                              className={classes.invoiceNumber}\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\n                            >\n                              {\" \"}\n                              N/A{\" \"}\n                            </span>\n                          )}\n                        </span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.deleted && (\n                            <React.Fragment>\n                              {invoiceLoaded && !invoice && (\n                                <Button\n                                  variant=\"outlined\"\n                                  color=\"primary\"\n                                  className={classes.PayButton}\n                                  onClick={() => OpenInvoiceDialog()}\n                                >\n                                  Issue Invoice\n                                </Button>\n                              )}\n\n                              {invoiceLoaded && invoice && (\n                                <React.Fragment>\n                                  <Button\n                                    variant=\"outlined\"\n                                    startIcon={<PrintIcon />}\n                                    color=\"primary\"\n                                    className={classes.printInvoiceButton}\n                                    onClick={() => downloadInvoice(invoice._id)}\n                                  >\n                                    Download Invoice\n                                  </Button>\n\n                                  <Button\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    className={classes.editInvoiceButton}\n                                    onClick={() => OpenInvoiceDialog()}\n                                  >\n                                    Edit Invoice\n                                  </Button>\n\n                                  <Button\n                                    disabled={\n                                      !booking.email || booking.email.length < 3\n                                    }\n                                    startIcon={<SendIcon />}\n                                    type=\"button\"\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                      sendInvoiceEmail(\n                                        invoice._id,\n                                        booking.email\n                                      );\n                                    }}\n                                    style={{\n                                      position: \"relative\",\n                                      marginLeft: \"10px\",\n                                      paddingRight: \"130px\",\n                                      fontSize: \"0.8rem\",\n                                    }}\n                                  >\n                                    Send Invoice By Email\n                                    {emailSentInvoice && (\n                                      <div\n                                        style={{\n                                          position: \"absolute\",\n                                          right: \"10px\",\n                                          top: \"5px\",\n                                          color: \"#05ad19\",\n                                        }}\n                                      >\n                                        Email Sent\n                                      </div>\n                                    )}\n                                  </Button>\n                                </React.Fragment>\n                              )}\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li}>\n                        <div\n                          style={{\n                            borderTop: \"1px solid #ddd\",\n                            paddingTop: \"20px\",\n                          }}\n                        >\n                          <span className={classes.infoTitle}>\n                            {booking.paymentInfo ? \"ONLINE\" : \"PHONE\"} DEPOSIT\n                          </span>{\" \"}\n                          <span\n                            className={\n                              !booking.deposit || booking.deposit === 0\n                                ? classes.infoDataChargesHigher\n                                : classes.infoDataCharges\n                            }\n                          >{`£${booking.deposit.toLocaleString(\n                            \"en-GB\"\n                          )}`}</span>\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            !booking.paid &&\n                            booking.deleted &&\n                            booking.deposit > 0 &&\n                            booking.paymentInfo && (\n                              <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                                className={classes.PayButton}\n                                onClick={(event) => setOpenRefundDialog(true)}\n                              >\n                                Refund Deposit\n                              </Button>\n                            )}\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            !booking.paid &&\n                            booking.deleted &&\n                            booking.deposit > 0 &&\n                            !booking.paymentInfo && (\n                              <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                className={classes.PayButton}\n                                onClick={(event) => manualRefund()}\n                              >\n                                <span style={{ textTransform: \"capitalize\" }}>\n                                  I made the refund manually\n                                </span>\n                              </Button>\n                            )}\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            // !booking.paid &&\n                            !booking.deleted &&\n                            // booking.deposit > 0 &&\n                            !booking.paymentInfo && (\n                              <FormControlLabel\n                                style={{ marginLeft: \"90px\" }}\n                                control={\n                                  <Switch\n                                    color=\"primary\"\n                                    checked={booking.deposit > 0}\n                                    onChange={depositChanged}\n                                    name=\"deposit\"\n                                  />\n                                }\n                                label={\n                                  booking.deposit > 0 ? (\n                                    <span className={classes.PriceLabelPaid}>\n                                      £100 Deposit Paid\n                                    </span>\n                                  ) : (\n                                    <span className={classes.PriceLabelNotPaid}>\n                                      £100 Deposit Not Paid\n                                    </span>\n                                  )\n                                }\n                              />\n                            )}\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            booking.refund && (\n                              <React.Fragment>\n                                <span className={classes.PayLabel}>\n                                  {\" \"}\n                                  <CheckIcon\n                                    className={classes.checkIconSmall}\n                                  />{\" \"}\n                                  Refund Done\n                                  {booking.paidBy === \"corporate\"\n                                    ? ` \"${booking.corporate}\" `\n                                    : \"\"}\n                                </span>\n                              </React.Fragment>\n                            )}\n                        </div>\n                      </li>\n\n                      <li className={classes.li}>\n                        <span className={classes.infoTitle}>OTC CHARGES</span>{\" \"}\n                        <span\n                          style={{ paddingLeft: \"15px\" }}\n                          className={\n                            !booking.OTCCharges || booking.OTCCharges === 0\n                              ? classes.infoDataChargesHigher\n                              : classes.infoDataCharges\n                          }\n                        >{`£${booking.OTCCharges.toLocaleString(\n                          \"en-GB\"\n                        )}`}</span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.paid &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              className={classes.PayButton}\n                              onClick={(event) => Pay(event, booking._id)}\n                            >\n                              Pay\n                            </Button>\n                          )}\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          booking.paid && (\n                            <React.Fragment>\n                              <span className={classes.PayLabel}>\n                                {\" \"}\n                                <CheckIcon\n                                  className={classes.checkIconSmall}\n                                />{\" \"}\n                                Paid by {booking.paidBy}\n                                {booking.paidBy === \"corporate\"\n                                  ? ` \"${booking.corporate}\" `\n                                  : \"\"}\n                              </span>\n\n                              <Tooltip title=\"Undo Payment\">\n                                <IconButton\n                                  onClick={() => setOpenUndoPayDialog(true)}\n                                >\n                                  <UndoIcon style={{ color: \"red\" }} />\n                                </IconButton>\n                              </Tooltip>\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li}>\n                        <div\n                          style={{\n                            borderTop: \"1px solid #ddd\",\n                            paddingTop: \"10px\",\n                          }}\n                        >\n                          <span className={classes.infoTitle}>\n                            TOTAL CHARGES\n                          </span>{\" \"}\n                          <span\n                            className={\n                              !booking.OTCCharges || booking.OTCCharges === 0\n                                ? classes.infoDataChargesHigher\n                                : classes.infoDataCharges\n                            }\n                          >{`£${(\n                            booking.deposit + booking.OTCCharges\n                          ).toLocaleString(\"en-GB\")}`}</span>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n\n            <PayDialog\n              booking={selectedBooking}\n              open={openPayDialog}\n              price={invoice ? invoice.grandTotal - booking.deposit : null}\n              handleClose={handleClosePayDialog}\n            />\n\n            <InvoiceDialog\n              booking={selectedBooking}\n              invoice={invoice}\n              open={openInvoiceDialog}\n              handleClose={handleCloseInvoiceDialog}\n            />\n          </Dialog>\n\n          <Dialog\n            open={openUndoPayDialog}\n            onClose={handleCloseUndoPayDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Undo Payment\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to undo payment for this booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\n                Back\n              </Button>\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\n                Yes, Undo Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <Dialog\n            open={openRefundDialog}\n            onClose={handleCloseRefundDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Refund Deposit\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to refund deposit payment for this\n                booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\n                Back\n              </Button>\n              <Button\n                onClick={refundPaymentClicked}\n                color=\"secondary\"\n                autoFocus\n              >\n                Yes, Refund Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/MonthView.js",["1508","1509"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/MonthViewCell.js",["1510","1511","1512"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport GlobalState from '../../GlobalState';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelToday: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        backgroundColor: \"#1a73e8\",\n        color: \"#fff\",\n        fontSize: \"1rem\",\n        borderRadius: \"50%\",\n        padding: \"5px\",\n        lineHight: \"35px\",\n        minWidth: \"35px\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        lineHight: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"8%\",\n        height: \"85%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 10;  \n\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [dateStr, setDateStr] = React.useState('');\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n\n    const [disableDay, setDisableDay] = React.useState(false);\n\n    const [isPast, setIsPast] = React.useState(false);\n\n    useEffect( () => {\n\n        if (cellIndex <= daysInMonth.length)\n        {\n            const date = daysInMonth[cellIndex - 1];\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(date.getMonth() !== month - 1);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n        else\n        {\n            const day = cellIndex - daysInMonth.length;\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(true);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n\n    }, [cellIndex, month, daysInMonth]);\n\n    useEffect ( () => {\n\n        const fecthData = async () =>\n        {\n            if (!dateStr || dateStr.length <= 0)\n            {\n                return;\n            }\n        \n            if (disableDay)\n            {\n                setBookingsCount(-2);\n                return;\n            }\n\n            setBookingsCount(-1);\n\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\n\n            if (!res)\n            {\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\n            }\n        \n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }\n\n        }\n\n      fecthData();\n\n    }, [dateStr]);\n\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\n    {\n        var date = null;\n        var disabled = false;\n        var day = -1;\n\n    \n\n        if (_cellIndex <= _daysInMonth.length)\n        {\n            date = _daysInMonth[_cellIndex - 1];\n            day = date.getDate();\n            if (date.getMonth() !== _month - 1)\n            {\n                disabled = true;\n            }\n        }\n        else\n        {\n            const _day = _cellIndex - _daysInMonth.length;\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\n            day = date.getDate();\n            disabled = true;\n        }\n\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\n\n        return (\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\n                 {day > 0 ? `${day}` : ''}\n             </span>\n        );\n    }\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0 )\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0)\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container} onClick={(event => dayClicked(event,cellDate))}>\n\n              {getDayLabel(cellIndex, month, daysInMonth)}\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nMonthViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    cellIndex: PropTypes.number.isRequired,\n    month: PropTypes.number.isRequired,\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default MonthViewCell;","/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/DayViewCell.js",["1513","1514","1515","1516","1517"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/NewOVBookingDialog.js",["1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Menu.js",["1541","1542","1543","1544","1545","1546","1547","1548","1549","1550"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/BookingTable.js",["1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/services/api.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/DayViewCell.js",["1565","1566","1567","1568","1569","1570","1571"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/MonthView.js",["1572","1573"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/STD/calendar-admin/WeekView.js",["1574","1575"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Museum/BookingView.js",["1576","1577","1578","1579","1580","1581","1582","1583","1584"],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/Gynae/calendar-admin/calendar-util.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/GP/calendar-admin/calendar-util.js",[],"/Users/mohammad/MyProjects/museumdental-payment-admin/src/OV/calendar-admin/calendar-util.js",[],{"ruleId":"1585","severity":1,"message":"1586","line":15,"column":8,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1589","line":20,"column":8,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1590","line":21,"column":8,"nodeType":"1587","messageId":"1588","endLine":21,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1591","line":26,"column":8,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1592","line":27,"column":8,"nodeType":"1587","messageId":"1588","endLine":27,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1593","line":28,"column":8,"nodeType":"1587","messageId":"1588","endLine":28,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1594","line":29,"column":8,"nodeType":"1587","messageId":"1588","endLine":29,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1595","line":31,"column":8,"nodeType":"1587","messageId":"1588","endLine":31,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1596","line":35,"column":8,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1597","line":36,"column":8,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1598","line":37,"column":8,"nodeType":"1587","messageId":"1588","endLine":37,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1599","line":38,"column":8,"nodeType":"1587","messageId":"1588","endLine":38,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1600","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1601","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1602","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1603","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1604","line":49,"column":8,"nodeType":"1587","messageId":"1588","endLine":49,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1605","line":50,"column":8,"nodeType":"1587","messageId":"1588","endLine":50,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1606","line":51,"column":8,"nodeType":"1587","messageId":"1588","endLine":51,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1607","line":52,"column":8,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1608","line":56,"column":8,"nodeType":"1587","messageId":"1588","endLine":56,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1609","line":57,"column":8,"nodeType":"1587","messageId":"1588","endLine":57,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1610","line":58,"column":8,"nodeType":"1587","messageId":"1588","endLine":58,"endColumn":21},{"ruleId":"1611","replacedBy":"1612"},{"ruleId":"1613","replacedBy":"1614"},{"ruleId":"1585","severity":1,"message":"1615","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1616","line":1,"column":27,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":35},{"ruleId":"1585","severity":1,"message":"1617","line":1,"column":37,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":41},{"ruleId":"1585","severity":1,"message":"1618","line":3,"column":25,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1619","line":3,"column":32,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":38},{"ruleId":"1611","replacedBy":"1620"},{"ruleId":"1613","replacedBy":"1621"},{"ruleId":"1585","severity":1,"message":"1622","line":6,"column":8,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1623","line":9,"column":8,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1624","line":13,"column":8,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":17,"column":32,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":39},{"ruleId":"1585","severity":1,"message":"1626","line":23,"column":8,"nodeType":"1587","messageId":"1588","endLine":23,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1627","line":27,"column":8,"nodeType":"1587","messageId":"1588","endLine":27,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1628","line":29,"column":8,"nodeType":"1587","messageId":"1588","endLine":29,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1629","line":30,"column":10,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1630","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":17},{"ruleId":"1631","severity":1,"message":"1632","line":376,"column":6,"nodeType":"1633","endLine":376,"endColumn":16,"suggestions":"1634"},{"ruleId":"1631","severity":1,"message":"1635","line":387,"column":6,"nodeType":"1633","endLine":387,"endColumn":30,"suggestions":"1636"},{"ruleId":"1585","severity":1,"message":"1637","line":395,"column":9,"nodeType":"1587","messageId":"1588","endLine":395,"endColumn":25},{"ruleId":"1638","severity":1,"message":"1639","line":417,"column":11,"nodeType":"1640","endLine":420,"endColumn":13},{"ruleId":"1638","severity":1,"message":"1639","line":424,"column":11,"nodeType":"1640","endLine":427,"endColumn":13},{"ruleId":"1638","severity":1,"message":"1639","line":432,"column":11,"nodeType":"1640","endLine":435,"endColumn":13},{"ruleId":"1638","severity":1,"message":"1639","line":440,"column":11,"nodeType":"1640","endLine":443,"endColumn":13},{"ruleId":"1638","severity":1,"message":"1639","line":448,"column":13,"nodeType":"1640","endLine":451,"endColumn":15},{"ruleId":"1641","severity":1,"message":"1642","line":516,"column":23,"nodeType":"1640","endLine":520,"endColumn":25},{"ruleId":"1641","severity":1,"message":"1642","line":738,"column":19,"nodeType":"1640","endLine":743,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1643","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":26},{"ruleId":"1611","replacedBy":"1644"},{"ruleId":"1613","replacedBy":"1645"},{"ruleId":"1585","severity":1,"message":"1625","line":11,"column":10,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1646","line":30,"column":10,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":30,"column":17,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1648","line":11,"column":29,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1649","line":11,"column":36,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":46},{"ruleId":"1585","severity":1,"message":"1650","line":14,"column":10,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":15},{"ruleId":"1631","severity":1,"message":"1651","line":134,"column":5,"nodeType":"1633","endLine":134,"endColumn":7,"suggestions":"1652"},{"ruleId":"1631","severity":1,"message":"1653","line":144,"column":8,"nodeType":"1633","endLine":144,"endColumn":33,"suggestions":"1654"},{"ruleId":"1585","severity":1,"message":"1648","line":11,"column":29,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1649","line":11,"column":36,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":46},{"ruleId":"1631","severity":1,"message":"1651","line":133,"column":5,"nodeType":"1633","endLine":133,"endColumn":7,"suggestions":"1655"},{"ruleId":"1631","severity":1,"message":"1653","line":143,"column":8,"nodeType":"1633","endLine":143,"endColumn":33,"suggestions":"1656"},{"ruleId":"1611","replacedBy":"1657"},{"ruleId":"1613","replacedBy":"1658"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1646","line":36,"column":12,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":17},{"ruleId":"1631","severity":1,"message":"1660","line":77,"column":8,"nodeType":"1633","endLine":77,"endColumn":10,"suggestions":"1661"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1646","line":36,"column":12,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":17},{"ruleId":"1631","severity":1,"message":"1660","line":77,"column":8,"nodeType":"1633","endLine":77,"endColumn":10,"suggestions":"1662"},{"ruleId":"1585","severity":1,"message":"1663","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1664","line":4,"column":28,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1665","line":4,"column":128,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":132},{"ruleId":"1585","severity":1,"message":"1624","line":4,"column":162,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":166},{"ruleId":"1585","severity":1,"message":"1666","line":4,"column":205,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":212},{"ruleId":"1585","severity":1,"message":"1667","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1668","line":8,"column":8,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1669","line":10,"column":10,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1670","line":11,"column":31,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1671","line":35,"column":3,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1672","line":39,"column":8,"nodeType":"1587","messageId":"1588","endLine":39,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1673","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1674","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1647","line":540,"column":17,"nodeType":"1587","messageId":"1588","endLine":540,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1675","line":544,"column":10,"nodeType":"1587","messageId":"1588","endLine":544,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1676","line":559,"column":9,"nodeType":"1587","messageId":"1588","endLine":559,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1677","line":600,"column":11,"nodeType":"1587","messageId":"1588","endLine":600,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":634,"column":9,"nodeType":"1633","endLine":634,"endColumn":21,"suggestions":"1679"},{"ruleId":"1631","severity":1,"message":"1680","line":656,"column":7,"nodeType":"1633","endLine":656,"endColumn":15,"suggestions":"1681"},{"ruleId":"1631","severity":1,"message":"1682","line":663,"column":10,"nodeType":"1633","endLine":663,"endColumn":42,"suggestions":"1683"},{"ruleId":"1585","severity":1,"message":"1664","line":4,"column":28,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1665","line":4,"column":128,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":132},{"ruleId":"1585","severity":1,"message":"1666","line":4,"column":205,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":212},{"ruleId":"1585","severity":1,"message":"1667","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1669","line":10,"column":10,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1670","line":11,"column":31,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1671","line":35,"column":3,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1647","line":635,"column":17,"nodeType":"1587","messageId":"1588","endLine":635,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1675","line":639,"column":10,"nodeType":"1587","messageId":"1588","endLine":639,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1676","line":654,"column":9,"nodeType":"1587","messageId":"1588","endLine":654,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1677","line":695,"column":11,"nodeType":"1587","messageId":"1588","endLine":695,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":729,"column":9,"nodeType":"1633","endLine":729,"endColumn":21,"suggestions":"1684"},{"ruleId":"1631","severity":1,"message":"1680","line":753,"column":7,"nodeType":"1633","endLine":753,"endColumn":15,"suggestions":"1685"},{"ruleId":"1631","severity":1,"message":"1682","line":760,"column":10,"nodeType":"1633","endLine":760,"endColumn":42,"suggestions":"1686"},{"ruleId":"1585","severity":1,"message":"1670","line":14,"column":31,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1646","line":26,"column":10,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":15},{"ruleId":"1631","severity":1,"message":"1678","line":58,"column":9,"nodeType":"1633","endLine":58,"endColumn":18,"suggestions":"1687"},{"ruleId":"1631","severity":1,"message":"1678","line":72,"column":7,"nodeType":"1633","endLine":72,"endColumn":9,"suggestions":"1688"},{"ruleId":"1585","severity":1,"message":"1670","line":14,"column":31,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1646","line":26,"column":10,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":15},{"ruleId":"1631","severity":1,"message":"1678","line":58,"column":9,"nodeType":"1633","endLine":58,"endColumn":18,"suggestions":"1689"},{"ruleId":"1631","severity":1,"message":"1678","line":72,"column":7,"nodeType":"1633","endLine":72,"endColumn":9,"suggestions":"1690"},{"ruleId":"1585","severity":1,"message":"1670","line":14,"column":31,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1646","line":26,"column":10,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":15},{"ruleId":"1631","severity":1,"message":"1678","line":58,"column":9,"nodeType":"1633","endLine":58,"endColumn":18,"suggestions":"1691"},{"ruleId":"1631","severity":1,"message":"1678","line":72,"column":7,"nodeType":"1633","endLine":72,"endColumn":9,"suggestions":"1692"},{"ruleId":"1585","severity":1,"message":"1624","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":6,"column":32,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":39},{"ruleId":"1585","severity":1,"message":"1663","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1663","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1693","line":10,"column":18,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1694","line":10,"column":28,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1624","line":10,"column":46,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":50},{"ruleId":"1585","severity":1,"message":"1695","line":11,"column":8,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1696","line":13,"column":9,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1667","line":17,"column":8,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1668","line":18,"column":8,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1697","line":23,"column":8,"nodeType":"1587","messageId":"1588","endLine":23,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1698","line":583,"column":10,"nodeType":"1587","messageId":"1588","endLine":583,"endColumn":33},{"ruleId":"1585","severity":1,"message":"1624","line":10,"column":46,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":50},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1696","line":18,"column":10,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1668","line":22,"column":8,"nodeType":"1587","messageId":"1588","endLine":22,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1699","line":48,"column":8,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1700","line":377,"column":10,"nodeType":"1587","messageId":"1588","endLine":377,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1701","line":418,"column":10,"nodeType":"1587","messageId":"1588","endLine":418,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1702","line":420,"column":9,"nodeType":"1587","messageId":"1588","endLine":420,"endColumn":35},{"ruleId":"1585","severity":1,"message":"1703","line":430,"column":9,"nodeType":"1587","messageId":"1588","endLine":430,"endColumn":32},{"ruleId":"1631","severity":1,"message":"1704","line":458,"column":6,"nodeType":"1633","endLine":458,"endColumn":20,"suggestions":"1705"},{"ruleId":"1631","severity":1,"message":"1706","line":747,"column":6,"nodeType":"1633","endLine":747,"endColumn":44,"suggestions":"1707"},{"ruleId":"1631","severity":1,"message":"1708","line":855,"column":6,"nodeType":"1633","endLine":855,"endColumn":33,"suggestions":"1709"},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":36,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1693","line":8,"column":5,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1712","line":12,"column":5,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1694","line":13,"column":5,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1713","line":16,"column":5,"nodeType":"1587","messageId":"1588","endLine":16,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1624","line":18,"column":5,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1625","line":24,"column":5,"nodeType":"1587","messageId":"1588","endLine":24,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1714","line":27,"column":10,"nodeType":"1587","messageId":"1588","endLine":27,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1715","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1716","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1717","line":36,"column":8,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1718","line":39,"column":8,"nodeType":"1587","messageId":"1588","endLine":39,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1622","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1719","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1721","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1722","line":46,"column":8,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1723","line":48,"column":8,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1646","line":147,"column":12,"nodeType":"1587","messageId":"1588","endLine":147,"endColumn":17},{"ruleId":"1631","severity":1,"message":"1724","line":198,"column":8,"nodeType":"1633","endLine":198,"endColumn":35,"suggestions":"1725"},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1727","line":9,"column":3,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1728","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1696","line":18,"column":10,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1667","line":21,"column":8,"nodeType":"1587","messageId":"1588","endLine":21,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1668","line":22,"column":8,"nodeType":"1587","messageId":"1588","endLine":22,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1729","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1697","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1730","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1589","line":46,"column":8,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1699","line":48,"column":8,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1731","line":50,"column":8,"nodeType":"1587","messageId":"1588","endLine":50,"endColumn":28},{"ruleId":"1585","severity":1,"message":"1732","line":51,"column":10,"nodeType":"1587","messageId":"1588","endLine":51,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1733","line":52,"column":8,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1734","line":399,"column":10,"nodeType":"1587","messageId":"1588","endLine":399,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1735","line":399,"column":18,"nodeType":"1587","messageId":"1588","endLine":399,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1736","line":401,"column":10,"nodeType":"1587","messageId":"1588","endLine":401,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1737","line":402,"column":10,"nodeType":"1587","messageId":"1588","endLine":402,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1700","line":404,"column":10,"nodeType":"1587","messageId":"1588","endLine":404,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1738","line":404,"column":28,"nodeType":"1587","messageId":"1588","endLine":404,"endColumn":47},{"ruleId":"1585","severity":1,"message":"1739","line":405,"column":10,"nodeType":"1587","messageId":"1588","endLine":405,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1740","line":406,"column":10,"nodeType":"1587","messageId":"1588","endLine":406,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1741","line":408,"column":10,"nodeType":"1587","messageId":"1588","endLine":408,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1742","line":410,"column":10,"nodeType":"1587","messageId":"1588","endLine":410,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1743","line":441,"column":10,"nodeType":"1587","messageId":"1588","endLine":441,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1744","line":445,"column":10,"nodeType":"1587","messageId":"1588","endLine":445,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1701","line":447,"column":10,"nodeType":"1587","messageId":"1588","endLine":447,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1745","line":447,"column":31,"nodeType":"1587","messageId":"1588","endLine":447,"endColumn":53},{"ruleId":"1585","severity":1,"message":"1746","line":450,"column":10,"nodeType":"1587","messageId":"1588","endLine":450,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1747","line":450,"column":25,"nodeType":"1587","messageId":"1588","endLine":450,"endColumn":41},{"ruleId":"1585","severity":1,"message":"1748","line":488,"column":9,"nodeType":"1587","messageId":"1588","endLine":488,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1749","line":493,"column":9,"nodeType":"1587","messageId":"1588","endLine":493,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1750","line":498,"column":9,"nodeType":"1587","messageId":"1588","endLine":498,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1751","line":510,"column":9,"nodeType":"1587","messageId":"1588","endLine":510,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1698","line":690,"column":9,"nodeType":"1587","messageId":"1588","endLine":690,"endColumn":32},{"ruleId":"1585","severity":1,"message":"1752","line":703,"column":9,"nodeType":"1587","messageId":"1588","endLine":703,"endColumn":32},{"ruleId":"1585","severity":1,"message":"1753","line":716,"column":9,"nodeType":"1587","messageId":"1588","endLine":716,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1754","line":721,"column":9,"nodeType":"1587","messageId":"1588","endLine":721,"endColumn":26},{"ruleId":"1631","severity":1,"message":"1706","line":744,"column":6,"nodeType":"1633","endLine":744,"endColumn":44,"suggestions":"1755"},{"ruleId":"1585","severity":1,"message":"1756","line":752,"column":9,"nodeType":"1587","messageId":"1588","endLine":752,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1757","line":766,"column":9,"nodeType":"1587","messageId":"1588","endLine":766,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1758","line":792,"column":9,"nodeType":"1587","messageId":"1588","endLine":792,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1759","line":805,"column":9,"nodeType":"1587","messageId":"1588","endLine":805,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1760","line":818,"column":9,"nodeType":"1587","messageId":"1588","endLine":818,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1761","line":834,"column":9,"nodeType":"1587","messageId":"1588","endLine":834,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1631","severity":1,"message":"1762","line":153,"column":8,"nodeType":"1633","endLine":153,"endColumn":20,"suggestions":"1763"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1631","severity":1,"message":"1762","line":157,"column":8,"nodeType":"1633","endLine":157,"endColumn":20,"suggestions":"1764"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1765","line":179,"column":10,"nodeType":"1587","messageId":"1588","endLine":179,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1766","line":179,"column":19,"nodeType":"1587","messageId":"1588","endLine":179,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1767","line":181,"column":10,"nodeType":"1587","messageId":"1588","endLine":181,"endColumn":16},{"ruleId":"1631","severity":1,"message":"1768","line":281,"column":6,"nodeType":"1633","endLine":281,"endColumn":50,"suggestions":"1769"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1770","line":15,"column":7,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":28},{"ruleId":"1585","severity":1,"message":"1771","line":16,"column":7,"nodeType":"1587","messageId":"1588","endLine":16,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1772","line":17,"column":7,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":28},{"ruleId":"1585","severity":1,"message":"1773","line":18,"column":7,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1774","line":19,"column":7,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":30},{"ruleId":"1631","severity":1,"message":"1762","line":219,"column":8,"nodeType":"1633","endLine":219,"endColumn":20,"suggestions":"1775"},{"ruleId":"1585","severity":1,"message":"1776","line":535,"column":11,"nodeType":"1587","messageId":"1588","endLine":535,"endColumn":32},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1649","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1625","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1717","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1721","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1777","line":47,"column":5,"nodeType":"1587","messageId":"1588","endLine":47,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":265,"column":10,"nodeType":"1587","messageId":"1588","endLine":265,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1713","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1619","line":18,"column":3,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1625","line":20,"column":3,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1673","line":25,"column":8,"nodeType":"1587","messageId":"1588","endLine":25,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1721","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":44,"column":10,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1779","line":48,"column":10,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1777","line":52,"column":5,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":317,"column":10,"nodeType":"1587","messageId":"1588","endLine":317,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":36,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1693","line":8,"column":5,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1712","line":12,"column":5,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1694","line":13,"column":5,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1713","line":16,"column":5,"nodeType":"1587","messageId":"1588","endLine":16,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1624","line":18,"column":5,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1625","line":24,"column":5,"nodeType":"1587","messageId":"1588","endLine":24,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1714","line":27,"column":10,"nodeType":"1587","messageId":"1588","endLine":27,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1715","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1716","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1717","line":36,"column":8,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1718","line":39,"column":8,"nodeType":"1587","messageId":"1588","endLine":39,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1622","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1719","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1721","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1722","line":46,"column":8,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1723","line":48,"column":8,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1646","line":147,"column":12,"nodeType":"1587","messageId":"1588","endLine":147,"endColumn":17},{"ruleId":"1631","severity":1,"message":"1724","line":198,"column":8,"nodeType":"1633","endLine":198,"endColumn":35,"suggestions":"1780"},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":36,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1781","line":5,"column":3,"nodeType":"1587","messageId":"1588","endLine":5,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1664","line":8,"column":3,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1694","line":10,"column":3,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1713","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1649","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1627","line":16,"column":3,"nodeType":"1587","messageId":"1588","endLine":16,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1782","line":17,"column":3,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1619","line":18,"column":3,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1783","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":20,"column":3,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1673","line":25,"column":8,"nodeType":"1587","messageId":"1588","endLine":25,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1721","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":44,"column":10,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1785","line":47,"column":8,"nodeType":"1587","messageId":"1588","endLine":47,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1779","line":48,"column":10,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1786","line":49,"column":8,"nodeType":"1587","messageId":"1588","endLine":49,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1777","line":52,"column":5,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1787","line":404,"column":7,"nodeType":"1587","messageId":"1588","endLine":404,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1646","line":496,"column":10,"nodeType":"1587","messageId":"1588","endLine":496,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":496,"column":17,"nodeType":"1587","messageId":"1588","endLine":496,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1788","line":503,"column":9,"nodeType":"1587","messageId":"1588","endLine":503,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1649","line":15,"column":3,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1627","line":18,"column":3,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1782","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1673","line":26,"column":8,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":35,"column":8,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1721","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":45,"column":10,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1789","line":52,"column":8,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1777","line":57,"column":5,"nodeType":"1587","messageId":"1588","endLine":57,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":277,"column":10,"nodeType":"1587","messageId":"1588","endLine":277,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1649","line":15,"column":3,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1627","line":18,"column":3,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1782","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1673","line":26,"column":8,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":36,"column":8,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1721","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":46,"column":10,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1777","line":60,"column":5,"nodeType":"1587","messageId":"1588","endLine":60,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":298,"column":10,"nodeType":"1587","messageId":"1588","endLine":298,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1790","line":302,"column":10,"nodeType":"1587","messageId":"1588","endLine":302,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1791","line":306,"column":10,"nodeType":"1587","messageId":"1588","endLine":306,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1792","line":352,"column":9,"nodeType":"1587","messageId":"1588","endLine":352,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1749","line":365,"column":9,"nodeType":"1587","messageId":"1588","endLine":365,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1793","line":371,"column":9,"nodeType":"1587","messageId":"1588","endLine":371,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1794","line":376,"column":9,"nodeType":"1587","messageId":"1588","endLine":376,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1795","line":407,"column":9,"nodeType":"1587","messageId":"1588","endLine":407,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1663","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1693","line":3,"column":18,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1664","line":3,"column":28,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1796","line":3,"column":46,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":52},{"ruleId":"1585","severity":1,"message":"1797","line":3,"column":54,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":67},{"ruleId":"1585","severity":1,"message":"1798","line":3,"column":69,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":80},{"ruleId":"1585","severity":1,"message":"1712","line":3,"column":82,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":89},{"ruleId":"1585","severity":1,"message":"1784","line":3,"column":91,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":102},{"ruleId":"1585","severity":1,"message":"1694","line":3,"column":104,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":120},{"ruleId":"1585","severity":1,"message":"1665","line":3,"column":128,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":132},{"ruleId":"1585","severity":1,"message":"1649","line":3,"column":134,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":144},{"ruleId":"1585","severity":1,"message":"1624","line":3,"column":162,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":166},{"ruleId":"1585","severity":1,"message":"1627","line":3,"column":180,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":188},{"ruleId":"1585","severity":1,"message":"1782","line":3,"column":197,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":203},{"ruleId":"1585","severity":1,"message":"1666","line":3,"column":205,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":212},{"ruleId":"1585","severity":1,"message":"1619","line":3,"column":214,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":220},{"ruleId":"1585","severity":1,"message":"1667","line":6,"column":8,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1668","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1669","line":9,"column":10,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1799","line":10,"column":10,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1670","line":10,"column":32,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":61},{"ruleId":"1585","severity":1,"message":"1800","line":11,"column":8,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1801","line":14,"column":8,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1802","line":17,"column":8,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1699","line":18,"column":8,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1803","line":20,"column":8,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1804","line":27,"column":10,"nodeType":"1587","messageId":"1588","endLine":27,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1805","line":28,"column":10,"nodeType":"1587","messageId":"1588","endLine":28,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1806","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1807","line":35,"column":3,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1671","line":36,"column":3,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1808","line":37,"column":3,"nodeType":"1587","messageId":"1588","endLine":37,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1672","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1673","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1674","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1809","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1810","line":46,"column":8,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1811","line":49,"column":8,"nodeType":"1587","messageId":"1588","endLine":49,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1812","line":54,"column":8,"nodeType":"1587","messageId":"1588","endLine":54,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1590","line":57,"column":8,"nodeType":"1587","messageId":"1588","endLine":57,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1813","line":265,"column":10,"nodeType":"1587","messageId":"1588","endLine":265,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1647","line":331,"column":17,"nodeType":"1587","messageId":"1588","endLine":331,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1675","line":335,"column":10,"nodeType":"1587","messageId":"1588","endLine":335,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1814","line":338,"column":10,"nodeType":"1587","messageId":"1588","endLine":338,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1815","line":340,"column":10,"nodeType":"1587","messageId":"1588","endLine":340,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1816","line":341,"column":9,"nodeType":"1587","messageId":"1588","endLine":341,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1676","line":349,"column":9,"nodeType":"1587","messageId":"1588","endLine":349,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1677","line":378,"column":11,"nodeType":"1587","messageId":"1588","endLine":378,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":410,"column":5,"nodeType":"1633","endLine":410,"endColumn":17,"suggestions":"1817"},{"ruleId":"1631","severity":1,"message":"1680","line":429,"column":5,"nodeType":"1633","endLine":429,"endColumn":13,"suggestions":"1818"},{"ruleId":"1631","severity":1,"message":"1678","line":436,"column":6,"nodeType":"1633","endLine":436,"endColumn":38,"suggestions":"1819"},{"ruleId":"1585","severity":1,"message":"1820","line":439,"column":9,"nodeType":"1587","messageId":"1588","endLine":439,"endColumn":35},{"ruleId":"1585","severity":1,"message":"1821","line":478,"column":10,"nodeType":"1587","messageId":"1588","endLine":478,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1822","line":480,"column":10,"nodeType":"1587","messageId":"1588","endLine":480,"endColumn":28},{"ruleId":"1585","severity":1,"message":"1823","line":481,"column":10,"nodeType":"1587","messageId":"1588","endLine":481,"endColumn":37},{"ruleId":"1585","severity":1,"message":"1643","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1624","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":6,"column":32,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":39},{"ruleId":"1585","severity":1,"message":"1824","line":52,"column":7,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1825","line":56,"column":7,"nodeType":"1587","messageId":"1588","endLine":56,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1625","line":11,"column":10,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1646","line":30,"column":10,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":30,"column":17,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1648","line":11,"column":29,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1649","line":11,"column":36,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":46},{"ruleId":"1585","severity":1,"message":"1650","line":14,"column":10,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":15},{"ruleId":"1631","severity":1,"message":"1651","line":134,"column":5,"nodeType":"1633","endLine":134,"endColumn":7,"suggestions":"1826"},{"ruleId":"1631","severity":1,"message":"1653","line":144,"column":8,"nodeType":"1633","endLine":144,"endColumn":33,"suggestions":"1827"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1631","severity":1,"message":"1660","line":86,"column":8,"nodeType":"1633","endLine":86,"endColumn":10,"suggestions":"1828"},{"ruleId":"1585","severity":1,"message":"1693","line":3,"column":18,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1664","line":3,"column":28,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1796","line":3,"column":46,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":52},{"ruleId":"1585","severity":1,"message":"1797","line":3,"column":54,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":67},{"ruleId":"1585","severity":1,"message":"1798","line":3,"column":69,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":80},{"ruleId":"1585","severity":1,"message":"1712","line":3,"column":82,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":89},{"ruleId":"1585","severity":1,"message":"1784","line":3,"column":91,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":102},{"ruleId":"1585","severity":1,"message":"1694","line":3,"column":104,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":120},{"ruleId":"1585","severity":1,"message":"1665","line":3,"column":128,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":132},{"ruleId":"1585","severity":1,"message":"1649","line":3,"column":134,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":144},{"ruleId":"1585","severity":1,"message":"1624","line":3,"column":162,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":166},{"ruleId":"1585","severity":1,"message":"1627","line":3,"column":180,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":188},{"ruleId":"1585","severity":1,"message":"1782","line":3,"column":197,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":203},{"ruleId":"1585","severity":1,"message":"1666","line":3,"column":205,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":212},{"ruleId":"1585","severity":1,"message":"1619","line":3,"column":214,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":220},{"ruleId":"1585","severity":1,"message":"1667","line":6,"column":8,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1668","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1669","line":9,"column":10,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1670","line":10,"column":32,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":61},{"ruleId":"1585","severity":1,"message":"1803","line":20,"column":8,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1804","line":27,"column":10,"nodeType":"1587","messageId":"1588","endLine":27,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1805","line":28,"column":10,"nodeType":"1587","messageId":"1588","endLine":28,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1806","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1807","line":35,"column":3,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1671","line":36,"column":3,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1808","line":37,"column":3,"nodeType":"1587","messageId":"1588","endLine":37,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1672","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1673","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1674","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1809","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1810","line":46,"column":8,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1829","line":50,"column":10,"nodeType":"1587","messageId":"1588","endLine":50,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1813","line":256,"column":10,"nodeType":"1587","messageId":"1588","endLine":256,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1647","line":314,"column":17,"nodeType":"1587","messageId":"1588","endLine":314,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1675","line":318,"column":10,"nodeType":"1587","messageId":"1588","endLine":318,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1815","line":323,"column":10,"nodeType":"1587","messageId":"1588","endLine":323,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1816","line":324,"column":9,"nodeType":"1587","messageId":"1588","endLine":324,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1676","line":332,"column":9,"nodeType":"1587","messageId":"1588","endLine":332,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1830","line":334,"column":9,"nodeType":"1587","messageId":"1588","endLine":334,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1677","line":356,"column":11,"nodeType":"1587","messageId":"1588","endLine":356,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":388,"column":5,"nodeType":"1633","endLine":388,"endColumn":17,"suggestions":"1831"},{"ruleId":"1631","severity":1,"message":"1680","line":412,"column":5,"nodeType":"1633","endLine":412,"endColumn":13,"suggestions":"1832"},{"ruleId":"1631","severity":1,"message":"1678","line":419,"column":6,"nodeType":"1633","endLine":419,"endColumn":38,"suggestions":"1833"},{"ruleId":"1585","severity":1,"message":"1664","line":4,"column":28,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1665","line":4,"column":128,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":132},{"ruleId":"1585","severity":1,"message":"1666","line":4,"column":205,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":212},{"ruleId":"1585","severity":1,"message":"1667","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1669","line":10,"column":10,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1670","line":11,"column":31,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1671","line":35,"column":3,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1647","line":635,"column":17,"nodeType":"1587","messageId":"1588","endLine":635,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1675","line":639,"column":10,"nodeType":"1587","messageId":"1588","endLine":639,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1676","line":654,"column":9,"nodeType":"1587","messageId":"1588","endLine":654,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1677","line":695,"column":11,"nodeType":"1587","messageId":"1588","endLine":695,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":729,"column":9,"nodeType":"1633","endLine":729,"endColumn":21,"suggestions":"1834"},{"ruleId":"1631","severity":1,"message":"1680","line":753,"column":7,"nodeType":"1633","endLine":753,"endColumn":15,"suggestions":"1835"},{"ruleId":"1631","severity":1,"message":"1682","line":760,"column":10,"nodeType":"1633","endLine":760,"endColumn":42,"suggestions":"1836"},{"ruleId":"1585","severity":1,"message":"1664","line":4,"column":28,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1665","line":4,"column":128,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":132},{"ruleId":"1585","severity":1,"message":"1666","line":4,"column":205,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":212},{"ruleId":"1585","severity":1,"message":"1669","line":10,"column":10,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1670","line":11,"column":31,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1837","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1838","line":35,"column":8,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":14},{"ruleId":"1585","severity":1,"message":"1671","line":39,"column":3,"nodeType":"1587","messageId":"1588","endLine":39,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1647","line":740,"column":17,"nodeType":"1587","messageId":"1588","endLine":740,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1675","line":744,"column":10,"nodeType":"1587","messageId":"1588","endLine":744,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1839","line":749,"column":9,"nodeType":"1587","messageId":"1588","endLine":749,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1676","line":763,"column":9,"nodeType":"1587","messageId":"1588","endLine":763,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1677","line":822,"column":11,"nodeType":"1587","messageId":"1588","endLine":822,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":856,"column":9,"nodeType":"1633","endLine":856,"endColumn":21,"suggestions":"1840"},{"ruleId":"1631","severity":1,"message":"1680","line":879,"column":7,"nodeType":"1633","endLine":879,"endColumn":15,"suggestions":"1841"},{"ruleId":"1631","severity":1,"message":"1682","line":886,"column":10,"nodeType":"1633","endLine":886,"endColumn":42,"suggestions":"1842"},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1727","line":9,"column":3,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1728","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1696","line":18,"column":10,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1667","line":21,"column":8,"nodeType":"1587","messageId":"1588","endLine":21,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1668","line":22,"column":8,"nodeType":"1587","messageId":"1588","endLine":22,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1729","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1697","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1730","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1589","line":46,"column":8,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1699","line":48,"column":8,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1731","line":50,"column":8,"nodeType":"1587","messageId":"1588","endLine":50,"endColumn":28},{"ruleId":"1585","severity":1,"message":"1732","line":51,"column":10,"nodeType":"1587","messageId":"1588","endLine":51,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1733","line":52,"column":8,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1734","line":399,"column":10,"nodeType":"1587","messageId":"1588","endLine":399,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1735","line":399,"column":18,"nodeType":"1587","messageId":"1588","endLine":399,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1736","line":401,"column":10,"nodeType":"1587","messageId":"1588","endLine":401,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1737","line":402,"column":10,"nodeType":"1587","messageId":"1588","endLine":402,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1700","line":404,"column":10,"nodeType":"1587","messageId":"1588","endLine":404,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1738","line":404,"column":28,"nodeType":"1587","messageId":"1588","endLine":404,"endColumn":47},{"ruleId":"1585","severity":1,"message":"1739","line":405,"column":10,"nodeType":"1587","messageId":"1588","endLine":405,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1740","line":406,"column":10,"nodeType":"1587","messageId":"1588","endLine":406,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1741","line":408,"column":10,"nodeType":"1587","messageId":"1588","endLine":408,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1742","line":410,"column":10,"nodeType":"1587","messageId":"1588","endLine":410,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1743","line":441,"column":10,"nodeType":"1587","messageId":"1588","endLine":441,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1744","line":445,"column":10,"nodeType":"1587","messageId":"1588","endLine":445,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1701","line":447,"column":10,"nodeType":"1587","messageId":"1588","endLine":447,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1745","line":447,"column":31,"nodeType":"1587","messageId":"1588","endLine":447,"endColumn":53},{"ruleId":"1585","severity":1,"message":"1746","line":450,"column":10,"nodeType":"1587","messageId":"1588","endLine":450,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1747","line":450,"column":25,"nodeType":"1587","messageId":"1588","endLine":450,"endColumn":41},{"ruleId":"1585","severity":1,"message":"1748","line":488,"column":9,"nodeType":"1587","messageId":"1588","endLine":488,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1749","line":493,"column":9,"nodeType":"1587","messageId":"1588","endLine":493,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1750","line":498,"column":9,"nodeType":"1587","messageId":"1588","endLine":498,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1751","line":510,"column":9,"nodeType":"1587","messageId":"1588","endLine":510,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1698","line":690,"column":9,"nodeType":"1587","messageId":"1588","endLine":690,"endColumn":32},{"ruleId":"1585","severity":1,"message":"1752","line":703,"column":9,"nodeType":"1587","messageId":"1588","endLine":703,"endColumn":32},{"ruleId":"1585","severity":1,"message":"1753","line":716,"column":9,"nodeType":"1587","messageId":"1588","endLine":716,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1754","line":721,"column":9,"nodeType":"1587","messageId":"1588","endLine":721,"endColumn":26},{"ruleId":"1631","severity":1,"message":"1706","line":744,"column":6,"nodeType":"1633","endLine":744,"endColumn":44,"suggestions":"1843"},{"ruleId":"1585","severity":1,"message":"1756","line":752,"column":9,"nodeType":"1587","messageId":"1588","endLine":752,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1757","line":766,"column":9,"nodeType":"1587","messageId":"1588","endLine":766,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1758","line":792,"column":9,"nodeType":"1587","messageId":"1588","endLine":792,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1759","line":805,"column":9,"nodeType":"1587","messageId":"1588","endLine":805,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1760","line":818,"column":9,"nodeType":"1587","messageId":"1588","endLine":818,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1761","line":834,"column":9,"nodeType":"1587","messageId":"1588","endLine":834,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1765","line":160,"column":12,"nodeType":"1587","messageId":"1588","endLine":160,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1766","line":160,"column":21,"nodeType":"1587","messageId":"1588","endLine":160,"endColumn":31},{"ruleId":"1585","severity":1,"message":"1767","line":162,"column":12,"nodeType":"1587","messageId":"1588","endLine":162,"endColumn":18},{"ruleId":"1631","severity":1,"message":"1844","line":237,"column":8,"nodeType":"1633","endLine":237,"endColumn":52,"suggestions":"1845"},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":10,"column":3,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1649","line":18,"column":3,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1627","line":21,"column":3,"nodeType":"1587","messageId":"1588","endLine":21,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1782","line":22,"column":3,"nodeType":"1587","messageId":"1588","endLine":22,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1673","line":29,"column":8,"nodeType":"1587","messageId":"1588","endLine":29,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":38,"column":8,"nodeType":"1587","messageId":"1588","endLine":38,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":46,"column":8,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1646","line":268,"column":10,"nodeType":"1587","messageId":"1588","endLine":268,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":268,"column":17,"nodeType":"1587","messageId":"1588","endLine":268,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1846","line":274,"column":10,"nodeType":"1587","messageId":"1588","endLine":274,"endColumn":19},{"ruleId":"1631","severity":1,"message":"1847","line":317,"column":6,"nodeType":"1633","endLine":317,"endColumn":26,"suggestions":"1848"},{"ruleId":"1585","severity":1,"message":"1849","line":335,"column":9,"nodeType":"1587","messageId":"1588","endLine":335,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1850","line":361,"column":9,"nodeType":"1587","messageId":"1588","endLine":361,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":10,"column":3,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1713","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1649","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1627","line":16,"column":3,"nodeType":"1587","messageId":"1588","endLine":16,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1782","line":17,"column":3,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1619","line":18,"column":3,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1625","line":20,"column":3,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1673","line":25,"column":8,"nodeType":"1587","messageId":"1588","endLine":25,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1721","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":44,"column":10,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1779","line":48,"column":10,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1777","line":52,"column":5,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1787","line":210,"column":7,"nodeType":"1587","messageId":"1588","endLine":210,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1646","line":302,"column":10,"nodeType":"1587","messageId":"1588","endLine":302,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":36,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1781","line":5,"column":3,"nodeType":"1587","messageId":"1588","endLine":5,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1664","line":8,"column":3,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1694","line":10,"column":3,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1713","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1649","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1627","line":16,"column":3,"nodeType":"1587","messageId":"1588","endLine":16,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1782","line":17,"column":3,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1619","line":18,"column":3,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1783","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":20,"column":3,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1673","line":25,"column":8,"nodeType":"1587","messageId":"1588","endLine":25,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1721","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":44,"column":10,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1779","line":48,"column":10,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1777","line":52,"column":5,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1787","line":404,"column":7,"nodeType":"1587","messageId":"1588","endLine":404,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1646","line":496,"column":10,"nodeType":"1587","messageId":"1588","endLine":496,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":496,"column":17,"nodeType":"1587","messageId":"1588","endLine":496,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1788","line":503,"column":9,"nodeType":"1587","messageId":"1588","endLine":503,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":5,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1712","line":11,"column":5,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1694","line":12,"column":5,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1713","line":14,"column":5,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1649","line":15,"column":5,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1624","line":16,"column":5,"nodeType":"1587","messageId":"1588","endLine":16,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1627","line":18,"column":5,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1782","line":19,"column":5,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1619","line":20,"column":5,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1673","line":27,"column":8,"nodeType":"1587","messageId":"1588","endLine":27,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":36,"column":8,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1721","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":46,"column":10,"nodeType":"1587","messageId":"1588","endLine":46,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1785","line":49,"column":8,"nodeType":"1587","messageId":"1588","endLine":49,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1779","line":50,"column":10,"nodeType":"1587","messageId":"1588","endLine":50,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1777","line":59,"column":5,"nodeType":"1587","messageId":"1588","endLine":59,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1787","line":218,"column":7,"nodeType":"1587","messageId":"1588","endLine":218,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1646","line":310,"column":12,"nodeType":"1587","messageId":"1588","endLine":310,"endColumn":17},{"ruleId":"1631","severity":1,"message":"1851","line":384,"column":8,"nodeType":"1633","endLine":384,"endColumn":35,"suggestions":"1852"},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":36,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1623","line":3,"column":8,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1693","line":6,"column":3,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":9,"column":3,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1624","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1783","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1714","line":17,"column":10,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1589","line":19,"column":8,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1646","line":191,"column":10,"nodeType":"1587","messageId":"1588","endLine":191,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":191,"column":17,"nodeType":"1587","messageId":"1588","endLine":191,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1663","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1623","line":5,"column":8,"nodeType":"1587","messageId":"1588","endLine":5,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1853","line":19,"column":7,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":16},{"ruleId":"1631","severity":1,"message":"1854","line":99,"column":8,"nodeType":"1633","endLine":99,"endColumn":15,"suggestions":"1855"},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":36,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1623","line":3,"column":8,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1781","line":5,"column":5,"nodeType":"1587","messageId":"1588","endLine":5,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":5,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1664","line":8,"column":5,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":5,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1713","line":13,"column":5,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1624","line":15,"column":5,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1783","line":19,"column":5,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":14},{"ruleId":"1585","severity":1,"message":"1625","line":20,"column":5,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1714","line":23,"column":10,"nodeType":"1587","messageId":"1588","endLine":23,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1673","line":25,"column":8,"nodeType":"1587","messageId":"1588","endLine":25,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1856","line":36,"column":8,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1718","line":37,"column":8,"nodeType":"1587","messageId":"1588","endLine":37,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1622","line":38,"column":8,"nodeType":"1587","messageId":"1588","endLine":38,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1719","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1721","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":44,"column":10,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1722","line":45,"column":8,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1857","line":255,"column":11,"nodeType":"1587","messageId":"1588","endLine":255,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1646","line":257,"column":12,"nodeType":"1587","messageId":"1588","endLine":257,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1647","line":257,"column":19,"nodeType":"1587","messageId":"1588","endLine":257,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1649","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1625","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1717","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1721","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1777","line":47,"column":5,"nodeType":"1587","messageId":"1588","endLine":47,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":265,"column":10,"nodeType":"1587","messageId":"1588","endLine":265,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1649","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1625","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1717","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1721","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1777","line":47,"column":5,"nodeType":"1587","messageId":"1588","endLine":47,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":265,"column":10,"nodeType":"1587","messageId":"1588","endLine":265,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1624","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":6,"column":32,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":39},{"ruleId":"1585","severity":1,"message":"1824","line":52,"column":7,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1825","line":56,"column":7,"nodeType":"1587","messageId":"1588","endLine":56,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1693","line":10,"column":18,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1694","line":10,"column":28,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1624","line":10,"column":46,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":50},{"ruleId":"1585","severity":1,"message":"1695","line":11,"column":8,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1696","line":13,"column":9,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":23},{"ruleId":"1585","severity":1,"message":"1667","line":17,"column":8,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1668","line":18,"column":8,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1697","line":23,"column":8,"nodeType":"1587","messageId":"1588","endLine":23,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1698","line":583,"column":10,"nodeType":"1587","messageId":"1588","endLine":583,"endColumn":33},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1767","line":120,"column":12,"nodeType":"1587","messageId":"1588","endLine":120,"endColumn":18},{"ruleId":"1631","severity":1,"message":"1858","line":182,"column":8,"nodeType":"1633","endLine":182,"endColumn":17,"suggestions":"1859"},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1713","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1625","line":20,"column":3,"nodeType":"1587","messageId":"1588","endLine":20,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1673","line":25,"column":8,"nodeType":"1587","messageId":"1588","endLine":25,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":34,"column":8,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":40,"column":8,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1721","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":44,"column":10,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1779","line":48,"column":10,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1777","line":52,"column":5,"nodeType":"1587","messageId":"1588","endLine":52,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":302,"column":10,"nodeType":"1587","messageId":"1588","endLine":302,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1623","line":5,"column":8,"nodeType":"1587","messageId":"1588","endLine":5,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1853","line":19,"column":7,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":16},{"ruleId":"1631","severity":1,"message":"1854","line":99,"column":8,"nodeType":"1633","endLine":99,"endColumn":15,"suggestions":"1860"},{"ruleId":"1585","severity":1,"message":"1857","line":48,"column":11,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1861","line":55,"column":11,"nodeType":"1587","messageId":"1588","endLine":55,"endColumn":24},{"ruleId":"1631","severity":1,"message":"1862","line":109,"column":8,"nodeType":"1633","endLine":109,"endColumn":27,"suggestions":"1863"},{"ruleId":"1585","severity":1,"message":"1864","line":6,"column":8,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1865","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1625","line":11,"column":10,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1646","line":34,"column":10,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":34,"column":17,"nodeType":"1587","messageId":"1588","endLine":34,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1637","line":36,"column":9,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1643","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1646","line":36,"column":12,"nodeType":"1587","messageId":"1588","endLine":36,"endColumn":17},{"ruleId":"1631","severity":1,"message":"1660","line":77,"column":8,"nodeType":"1633","endLine":77,"endColumn":10,"suggestions":"1866"},{"ruleId":"1585","severity":1,"message":"1663","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1624","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":6,"column":32,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":39},{"ruleId":"1585","severity":1,"message":"1663","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1649","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1624","line":14,"column":3,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1625","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1717","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1721","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1777","line":47,"column":5,"nodeType":"1587","messageId":"1588","endLine":47,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1646","line":264,"column":10,"nodeType":"1587","messageId":"1588","endLine":264,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":36,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1693","line":6,"column":3,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":8,"column":3,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1624","line":10,"column":3,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":7},{"ruleId":"1585","severity":1,"message":"1783","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1625","line":13,"column":3,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1646","line":217,"column":10,"nodeType":"1587","messageId":"1588","endLine":217,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":217,"column":17,"nodeType":"1587","messageId":"1588","endLine":217,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1696","line":18,"column":10,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1668","line":22,"column":8,"nodeType":"1587","messageId":"1588","endLine":22,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1699","line":48,"column":8,"nodeType":"1587","messageId":"1588","endLine":48,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1700","line":378,"column":10,"nodeType":"1587","messageId":"1588","endLine":378,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1701","line":421,"column":10,"nodeType":"1587","messageId":"1588","endLine":421,"endColumn":29},{"ruleId":"1631","severity":1,"message":"1708","line":442,"column":6,"nodeType":"1633","endLine":442,"endColumn":33,"suggestions":"1867"},{"ruleId":"1585","severity":1,"message":"1702","line":444,"column":9,"nodeType":"1587","messageId":"1588","endLine":444,"endColumn":35},{"ruleId":"1585","severity":1,"message":"1703","line":454,"column":9,"nodeType":"1587","messageId":"1588","endLine":454,"endColumn":32},{"ruleId":"1631","severity":1,"message":"1868","line":487,"column":6,"nodeType":"1633","endLine":487,"endColumn":20,"suggestions":"1869"},{"ruleId":"1585","severity":1,"message":"1748","line":525,"column":9,"nodeType":"1587","messageId":"1588","endLine":525,"endColumn":23},{"ruleId":"1631","severity":1,"message":"1706","line":781,"column":6,"nodeType":"1633","endLine":781,"endColumn":44,"suggestions":"1870"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1801","line":9,"column":8,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1765","line":332,"column":10,"nodeType":"1587","messageId":"1588","endLine":332,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1766","line":332,"column":19,"nodeType":"1587","messageId":"1588","endLine":332,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1767","line":334,"column":10,"nodeType":"1587","messageId":"1588","endLine":334,"endColumn":16},{"ruleId":"1631","severity":1,"message":"1768","line":443,"column":6,"nodeType":"1633","endLine":443,"endColumn":50,"suggestions":"1871"},{"ruleId":"1585","severity":1,"message":"1872","line":475,"column":9,"nodeType":"1587","messageId":"1588","endLine":475,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1771","line":155,"column":7,"nodeType":"1587","messageId":"1588","endLine":155,"endColumn":27},{"ruleId":"1585","severity":1,"message":"1772","line":156,"column":7,"nodeType":"1587","messageId":"1588","endLine":156,"endColumn":28},{"ruleId":"1585","severity":1,"message":"1773","line":157,"column":7,"nodeType":"1587","messageId":"1588","endLine":157,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1774","line":158,"column":7,"nodeType":"1587","messageId":"1588","endLine":158,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1767","line":177,"column":10,"nodeType":"1587","messageId":"1588","endLine":177,"endColumn":16},{"ruleId":"1631","severity":1,"message":"1858","line":238,"column":6,"nodeType":"1633","endLine":238,"endColumn":15,"suggestions":"1873"},{"ruleId":"1585","severity":1,"message":"1776","line":590,"column":9,"nodeType":"1587","messageId":"1588","endLine":590,"endColumn":30},{"ruleId":"1585","severity":1,"message":"1624","line":6,"column":8,"nodeType":"1587","messageId":"1588","endLine":6,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1630","line":15,"column":8,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1874","line":19,"column":3,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1875","line":30,"column":22,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1626","line":33,"column":8,"nodeType":"1587","messageId":"1588","endLine":33,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1876","line":40,"column":10,"nodeType":"1587","messageId":"1588","endLine":40,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1646","line":155,"column":10,"nodeType":"1587","messageId":"1588","endLine":155,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1877","line":156,"column":9,"nodeType":"1587","messageId":"1588","endLine":156,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1625","line":11,"column":10,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1646","line":30,"column":10,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":30,"column":17,"nodeType":"1587","messageId":"1588","endLine":30,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1648","line":11,"column":29,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1649","line":11,"column":36,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":46},{"ruleId":"1585","severity":1,"message":"1650","line":14,"column":10,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":15},{"ruleId":"1631","severity":1,"message":"1651","line":134,"column":5,"nodeType":"1633","endLine":134,"endColumn":7,"suggestions":"1878"},{"ruleId":"1631","severity":1,"message":"1653","line":144,"column":8,"nodeType":"1633","endLine":144,"endColumn":33,"suggestions":"1879"},{"ruleId":"1585","severity":1,"message":"1643","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1670","line":14,"column":31,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1646","line":26,"column":10,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":15},{"ruleId":"1631","severity":1,"message":"1678","line":58,"column":9,"nodeType":"1633","endLine":58,"endColumn":18,"suggestions":"1880"},{"ruleId":"1631","severity":1,"message":"1678","line":66,"column":7,"nodeType":"1633","endLine":66,"endColumn":9,"suggestions":"1881"},{"ruleId":"1585","severity":1,"message":"1623","line":3,"column":8,"nodeType":"1587","messageId":"1588","endLine":3,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1882","line":5,"column":46,"nodeType":"1587","messageId":"1588","endLine":5,"endColumn":50},{"ruleId":"1585","severity":1,"message":"1625","line":5,"column":124,"nodeType":"1587","messageId":"1588","endLine":5,"endColumn":131},{"ruleId":"1585","severity":1,"message":"1883","line":9,"column":20,"nodeType":"1587","messageId":"1588","endLine":9,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1884","line":90,"column":9,"nodeType":"1587","messageId":"1588","endLine":90,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1696","line":19,"column":10,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1668","line":23,"column":8,"nodeType":"1587","messageId":"1588","endLine":23,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1699","line":49,"column":8,"nodeType":"1587","messageId":"1588","endLine":49,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1700","line":388,"column":10,"nodeType":"1587","messageId":"1588","endLine":388,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1738","line":388,"column":28,"nodeType":"1587","messageId":"1588","endLine":388,"endColumn":47},{"ruleId":"1585","severity":1,"message":"1701","line":429,"column":10,"nodeType":"1587","messageId":"1588","endLine":429,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1745","line":429,"column":31,"nodeType":"1587","messageId":"1588","endLine":429,"endColumn":53},{"ruleId":"1631","severity":1,"message":"1704","line":459,"column":6,"nodeType":"1633","endLine":459,"endColumn":20,"suggestions":"1885"},{"ruleId":"1631","severity":1,"message":"1706","line":748,"column":6,"nodeType":"1633","endLine":748,"endColumn":44,"suggestions":"1886"},{"ruleId":"1631","severity":1,"message":"1708","line":883,"column":6,"nodeType":"1633","endLine":883,"endColumn":33,"suggestions":"1887"},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1767","line":121,"column":12,"nodeType":"1587","messageId":"1588","endLine":121,"endColumn":18},{"ruleId":"1631","severity":1,"message":"1858","line":183,"column":8,"nodeType":"1633","endLine":183,"endColumn":17,"suggestions":"1888"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1765","line":186,"column":12,"nodeType":"1587","messageId":"1588","endLine":186,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1766","line":186,"column":21,"nodeType":"1587","messageId":"1588","endLine":186,"endColumn":31},{"ruleId":"1585","severity":1,"message":"1767","line":188,"column":12,"nodeType":"1587","messageId":"1588","endLine":188,"endColumn":18},{"ruleId":"1631","severity":1,"message":"1768","line":265,"column":8,"nodeType":"1633","endLine":265,"endColumn":52,"suggestions":"1889"},{"ruleId":"1585","severity":1,"message":"1710","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":34},{"ruleId":"1585","severity":1,"message":"1693","line":7,"column":5,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1712","line":10,"column":5,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1694","line":11,"column":5,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1713","line":13,"column":5,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1649","line":14,"column":5,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1624","line":15,"column":5,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":9},{"ruleId":"1585","severity":1,"message":"1627","line":17,"column":5,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1782","line":18,"column":5,"nodeType":"1587","messageId":"1588","endLine":18,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1619","line":19,"column":5,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":11},{"ruleId":"1585","severity":1,"message":"1625","line":21,"column":5,"nodeType":"1587","messageId":"1588","endLine":21,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1673","line":26,"column":8,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1717","line":35,"column":8,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1719","line":41,"column":8,"nodeType":"1587","messageId":"1588","endLine":41,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1720","line":42,"column":8,"nodeType":"1587","messageId":"1588","endLine":42,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1784","line":43,"column":8,"nodeType":"1587","messageId":"1588","endLine":43,"endColumn":19},{"ruleId":"1585","severity":1,"message":"1721","line":44,"column":8,"nodeType":"1587","messageId":"1588","endLine":44,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1778","line":45,"column":10,"nodeType":"1587","messageId":"1588","endLine":45,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1779","line":49,"column":10,"nodeType":"1587","messageId":"1588","endLine":49,"endColumn":18},{"ruleId":"1585","severity":1,"message":"1890","line":61,"column":7,"nodeType":"1587","messageId":"1588","endLine":61,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1777","line":63,"column":5,"nodeType":"1587","messageId":"1588","endLine":63,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1787","line":222,"column":7,"nodeType":"1587","messageId":"1588","endLine":222,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1792","line":344,"column":11,"nodeType":"1587","messageId":"1588","endLine":344,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1891","line":7,"column":3,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":8},{"ruleId":"1585","severity":1,"message":"1712","line":8,"column":3,"nodeType":"1587","messageId":"1588","endLine":8,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1728","line":10,"column":3,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":13},{"ruleId":"1585","severity":1,"message":"1892","line":11,"column":3,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1625","line":12,"column":3,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":10},{"ruleId":"1585","severity":1,"message":"1893","line":15,"column":16,"nodeType":"1587","messageId":"1588","endLine":15,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1894","line":17,"column":8,"nodeType":"1587","messageId":"1588","endLine":17,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1895","line":19,"column":10,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1896","line":19,"column":18,"nodeType":"1587","messageId":"1588","endLine":19,"endColumn":30},{"ruleId":"1631","severity":1,"message":"1897","line":96,"column":6,"nodeType":"1633","endLine":96,"endColumn":30,"suggestions":"1898"},{"ruleId":"1585","severity":1,"message":"1664","line":4,"column":28,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":44},{"ruleId":"1585","severity":1,"message":"1665","line":4,"column":128,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":132},{"ruleId":"1585","severity":1,"message":"1666","line":4,"column":205,"nodeType":"1587","messageId":"1588","endLine":4,"endColumn":212},{"ruleId":"1585","severity":1,"message":"1667","line":7,"column":8,"nodeType":"1587","messageId":"1588","endLine":7,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1669","line":10,"column":10,"nodeType":"1587","messageId":"1588","endLine":10,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1670","line":11,"column":31,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1671","line":35,"column":3,"nodeType":"1587","messageId":"1588","endLine":35,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1647","line":637,"column":17,"nodeType":"1587","messageId":"1588","endLine":637,"endColumn":25},{"ruleId":"1585","severity":1,"message":"1675","line":641,"column":10,"nodeType":"1587","messageId":"1588","endLine":641,"endColumn":21},{"ruleId":"1585","severity":1,"message":"1676","line":656,"column":9,"nodeType":"1587","messageId":"1588","endLine":656,"endColumn":20},{"ruleId":"1585","severity":1,"message":"1677","line":697,"column":11,"nodeType":"1587","messageId":"1588","endLine":697,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":731,"column":9,"nodeType":"1633","endLine":731,"endColumn":21,"suggestions":"1899"},{"ruleId":"1631","severity":1,"message":"1680","line":755,"column":7,"nodeType":"1633","endLine":755,"endColumn":15,"suggestions":"1900"},{"ruleId":"1631","severity":1,"message":"1682","line":762,"column":10,"nodeType":"1633","endLine":762,"endColumn":42,"suggestions":"1901"},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1902","line":11,"column":8,"nodeType":"1587","messageId":"1588","endLine":11,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1732","line":12,"column":10,"nodeType":"1587","messageId":"1588","endLine":12,"endColumn":24},{"ruleId":"1585","severity":1,"message":"1765","line":184,"column":10,"nodeType":"1587","messageId":"1588","endLine":184,"endColumn":17},{"ruleId":"1585","severity":1,"message":"1766","line":184,"column":19,"nodeType":"1587","messageId":"1588","endLine":184,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1767","line":186,"column":10,"nodeType":"1587","messageId":"1588","endLine":186,"endColumn":16},{"ruleId":"1631","severity":1,"message":"1768","line":285,"column":6,"nodeType":"1633","endLine":285,"endColumn":50,"suggestions":"1903"},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1726","line":1,"column":17,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":26},{"ruleId":"1585","severity":1,"message":"1659","line":1,"column":28,"nodeType":"1587","messageId":"1588","endLine":1,"endColumn":36},{"ruleId":"1585","severity":1,"message":"1624","line":2,"column":8,"nodeType":"1587","messageId":"1588","endLine":2,"endColumn":12},{"ruleId":"1585","severity":1,"message":"1669","line":13,"column":10,"nodeType":"1587","messageId":"1588","endLine":13,"endColumn":22},{"ruleId":"1585","severity":1,"message":"1799","line":14,"column":9,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":29},{"ruleId":"1585","severity":1,"message":"1670","line":14,"column":31,"nodeType":"1587","messageId":"1588","endLine":14,"endColumn":60},{"ruleId":"1585","severity":1,"message":"1857","line":25,"column":9,"nodeType":"1587","messageId":"1588","endLine":25,"endColumn":16},{"ruleId":"1585","severity":1,"message":"1646","line":26,"column":10,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":15},{"ruleId":"1585","severity":1,"message":"1647","line":26,"column":17,"nodeType":"1587","messageId":"1588","endLine":26,"endColumn":25},{"ruleId":"1631","severity":1,"message":"1678","line":58,"column":9,"nodeType":"1633","endLine":58,"endColumn":18,"suggestions":"1904"},{"ruleId":"1631","severity":1,"message":"1678","line":72,"column":7,"nodeType":"1633","endLine":72,"endColumn":9,"suggestions":"1905"},"no-unused-vars","'EventNoteIcon' is defined but never used.","Identifier","unusedVar","'SendIcon' is defined but never used.","'DoneAllIcon' is defined but never used.","'FindByRef' is defined but never used.","'BookingTable' is defined but never used.","'DashboardPreview' is defined but never used.","'UnmatchedRecords' is defined but never used.","'PCRCalendarView' is defined but never used.","'GynaeBookingTable' is defined but never used.","'GynaeDashboardPreview' is defined but never used.","'GynaeFindByRef' is defined but never used.","'GynaeCalendarView' is defined but never used.","'GPBookingTable' is defined but never used.","'GPDashboardPreview' is defined but never used.","'GPFindByRef' is defined but never used.","'GPCalendarView' is defined but never used.","'STDBookingTable' is defined but never used.","'STDDashboardPreview' is defined but never used.","'STDFindByRef' is defined but never used.","'STDCalendarView' is defined but never used.","'OVBookingTable' is defined but never used.","'OVCalendarView' is defined but never used.","'PatientsTable' is defined but never used.","no-native-reassign",["1906"],"no-negated-in-lhs",["1907"],"'Fragment' is defined but never used.","'Suspense' is defined but never used.","'lazy' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.",["1906"],["1907"],"'Box' is defined but never used.","'Typography' is defined but never used.","'Link' is defined but never used.","'Tooltip' is defined but never used.","'Copyright' is defined but never used.","'MenuItem' is defined but never used.","'dateformat' is defined but never used.","'getRole' is defined but never used.","'logoImage' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'setState' and 'state.role'. Either include them or remove the dependency array.","ArrayExpression",["1908"],"React Hook useEffect has a missing dependency: 'isMobile'. Either include it or remove the dependency array.",["1909"],"'fixedHeightPaper' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'HourglassEmptyIcon' is defined but never used.",["1906"],["1907"],"'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'Input' is defined but never used.","'InputLabel' is defined but never used.","'width' is defined but never used.","React Hook useEffect has a missing dependency: 'setState'. Either include it or remove the dependency array.",["1910"],"React Hook useEffect has missing dependencies: 'setState' and 'state.ref'. Either include them or remove the dependency array.",["1911"],["1912"],["1913"],["1906"],["1907"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'removeFilter' and 'setState'. Either include them or remove the dependency array.",["1914"],["1915"],"'axiosRetry' is defined but never used.","'CircularProgress' is defined but never used.","'Icon' is defined but never used.","'SvgIcon' is defined but never used.","'CheckIcon' is defined but never used.","'CloseIcon' is defined but never used.","'getMenuIndex' is defined but never used.","'FormatDateFromStringShortYear' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'BusinessIcon' is defined but never used.","'CreditCardIcon' is defined but never used.","'LocalAtmIcon' is defined but never used.","'selectedRow' is assigned a value but never used.","'lastPromise' is assigned a value but never used.","'currentPromise' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["1916"],"React Hook useEffect has a missing dependency: 'data.cachedBookings'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setData' needs the current value of 'data.cachedBookings'.",["1917"],"React Hook useEffect has missing dependencies: 'loadData' and 'topCount'. Either include them or remove the dependency array.",["1918"],["1919"],["1920"],["1921"],["1922"],["1923"],["1924"],["1925"],["1926"],["1927"],"'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'PDFService' is defined but never used.","'calculatePrice' is defined but never used.","'PrintIcon' is defined but never used.","'changeBackToBookingMade' is assigned a value but never used.","'HistoryIcon' is defined but never used.","'openResendDialog' is assigned a value but never used.","'openTimeStampDialog' is assigned a value but never used.","'handleCloseTimeStampDialog' is assigned a value but never used.","'handleCloseResendDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'booking', 'bookingDate', 'bookingTime', 'email', 'fullname', 'notes', 'service', and 'tel'. Either include them or remove the dependency array.",["1928"],"React Hook useEffect has missing dependencies: 'props.booking' and 'setState'. Either include them or remove the dependency array.",["1929"],"React Hook React.useEffect has a missing dependency: 'fetchInvoice'. Either include it or remove the dependency array.",["1930"],"'useRef' is defined but never used.","'BookService' is defined but never used.","'Divider' is defined but never used.","'InputAdornment' is defined but never used.","'withStyles' is defined but never used.","'Draggable' is defined but never used.","'Paper' is defined but never used.","'Alert' is defined but never used.","'LinearProgress' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormLabel' is defined but never used.","'NumberFormat' is defined but never used.","'AccessAlarmsIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'props.name' and 'props.surname'. Either include them or remove the dependency array. If 'setPatient' needs the current value of 'props.name', you can also switch to useReducer instead of useState and read 'props.name' in the reducer.",["1931"],"'useEffect' is defined but never used.","'DialogContentText' is defined but never used.","'IconButton' is defined but never used.","'PayDialog' is defined but never used.","'UndoIcon' is defined but never used.","'FileCopyOutlinedIcon' is defined but never used.","'CalendarColors' is defined but never used.","'InvoiceDialog' is defined but never used.","'copied' is assigned a value but never used.","'setCopied' is assigned a value but never used.","'emailSent' is assigned a value but never used.","'emailSentInvoice' is assigned a value but never used.","'setOpenResendDialog' is assigned a value but never used.","'openPayDialog' is assigned a value but never used.","'openRefundDialog' is assigned a value but never used.","'openInvoiceDialog' is assigned a value but never used.","'selectedBooking' is assigned a value but never used.","'recordChanged' is assigned a value but never used.","'openUndoPayDialog' is assigned a value but never used.","'setOpenTimeStampDialog' is assigned a value but never used.","'invoiceLoaded' is assigned a value but never used.","'setInvoiceLoaded' is assigned a value but never used.","'serviceChanged' is assigned a value but never used.","'notesChanged' is assigned a value but never used.","'getStatusLabel' is assigned a value but never used.","'handleEditModeChanged' is assigned a value but never used.","'changeToPatientAttended' is assigned a value but never used.","'Pay' is assigned a value but never used.","'OpenInvoiceDialog' is assigned a value but never used.",["1932"],"'undoPaymentClicked' is assigned a value but never used.","'refundPaymentClicked' is assigned a value but never used.","'downloadRegForm' is assigned a value but never used.","'downloadInvoice' is assigned a value but never used.","'sendRegForm' is assigned a value but never used.","'sendInvoiceEmail' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setState' and 'state.AdminCalendarCache'. Either include them or remove the dependency array.",["1933"],["1934"],"'refresh' is assigned a value but never used.","'setRefresh' is assigned a value but never used.","'isPast' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'openDialog', 'openDialogAddNew', 'setState', and 'state.AdminCalendarCache'. Either include them or remove the dependency array.",["1935"],"'MAX_BOOKING_COUNT_PCR' is assigned a value but never used.","'MAX_BOOKING_COUNT_GP' is assigned a value but never used.","'MAX_BOOKING_COUNT_STD' is assigned a value but never used.","'MAX_BOOKING_COUNT_GYNAE' is assigned a value but never used.","'MAX_BOOKING_COUNT_BLOOD' is assigned a value but never used.",["1936"],"'getBookingsCountGauge' is assigned a value but never used.","'interval' is defined but never used.","'corporates' is defined but never used.","'validate' is defined but never used.",["1937"],"'Backdrop' is defined but never used.","'Select' is defined but never used.","'TextField' is defined but never used.","'FormControl' is defined but never used.","'AddIcon' is defined but never used.","'DateRangeIcon' is defined but never used.","'Packages' is assigned a value but never used.","'timeDisabled' is assigned a value but never used.","'DoneOutlineIcon' is defined but never used.","'amountError' is assigned a value but never used.","'fullnameError' is assigned a value but never used.","'fullnameChanged' is assigned a value but never used.","'descriptionChanged' is assigned a value but never used.","'amountChanged' is assigned a value but never used.","'createLinkClicked' is assigned a value but never used.","'Dialog' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'FormatDateFromString' is defined but never used.","'AccessibilityIcon' is defined but never used.","'BookingDialog' is defined but never used.","'NewReleasesIcon' is defined but never used.","'DescriptionIcon' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faFileExcel' is defined but never used.","'DateFnsUtils' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'ReactHTMLTableToExcel' is defined but never used.","'PriceCalculator' is defined but never used.","'PatientDialog' is defined but never used.","'DoneIcon' is defined but never used.","'PaperComponent' is defined but never used.","'seeDetailsDialogOpen' is assigned a value but never used.","'corporate' is assigned a value but never used.","'corporateChanged' is assigned a value but never used.",["1938"],["1939"],["1940"],"'handleCloseSeeDetaisDialog' is assigned a value but never used.","'selectedPatient' is assigned a value but never used.","'patientDialogTitle' is assigned a value but never used.","'patientDialogSaveButtonText' is assigned a value but never used.","'isThursday' is assigned a value but never used.","'isFriday' is assigned a value but never used.",["1941"],["1942"],["1943"],"'set' is defined but never used.","'formatTimeStamp' is assigned a value but never used.",["1944"],["1945"],["1946"],["1947"],["1948"],["1949"],"'MomentUtils' is defined but never used.","'moment' is defined but never used.","'dateFormatter' is assigned a value but never used.",["1950"],["1951"],["1952"],["1953"],"React Hook useEffect has missing dependencies: 'openDialog', 'setState', and 'state.AdminCalendarCache'. Either include them or remove the dependency array.",["1954"],"'codeError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.invoice'. Either include it or remove the dependency array.",["1955"],"'codeChanged' is assigned a value but never used.","'codeLeft' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'props.clinic', 'props.date', and 'props.time'. Either include them or remove the dependency array. If 'setDate' needs the current value of 'props.date', you can also switch to useReducer instead of useState and read 'props.date' in the reducer.",["1956"],"'useStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'resetDate'. Either include it or remove the dependency array.",["1957"],"'PropTypes' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'disableDay', 'setState', and 'state.AdminCalendarCache'. Either include them or remove the dependency array.",["1958"],["1959"],"'handleSignOut' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'history' and 'setState'. Either include them or remove the dependency array.",["1960"],"'Chart' is defined but never used.","'CurrentVisits' is defined but never used.",["1961"],["1962"],"React Hook useEffect has missing dependencies: 'booking', 'bookingDate', 'bookingTime', 'email', 'fullname', 'notes', and 'tel'. Either include them or remove the dependency array.",["1963"],["1964"],["1965"],"'getBookingBorderClass' is assigned a value but never used.",["1966"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'borderRadius' is defined but never used.","'isMobile' is assigned a value but never used.",["1967"],["1968"],["1969"],["1970"],"'Grid' is defined but never used.","'Sector' is defined but never used.","'current' is assigned a value but never used.",["1971"],["1972"],["1973"],["1974"],["1975"],"'filter' is assigned a value but never used.","'Badge' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'border' is defined but never used.","'borderBottom' is defined but never used.","React Hook useEffect has a missing dependency: 'updateShouldRefundsCount'. Either include it or remove the dependency array.",["1976"],["1977"],["1978"],["1979"],"'clsx' is defined but never used.",["1980"],["1981"],["1982"],"no-global-assign","no-unsafe-negation",{"desc":"1983","fix":"1984"},{"desc":"1985","fix":"1986"},{"desc":"1987","fix":"1988"},{"desc":"1989","fix":"1990"},{"desc":"1987","fix":"1991"},{"desc":"1989","fix":"1992"},{"desc":"1993","fix":"1994"},{"desc":"1993","fix":"1995"},{"desc":"1996","fix":"1997"},{"desc":"1998","fix":"1999"},{"desc":"2000","fix":"2001"},{"desc":"1996","fix":"2002"},{"desc":"1998","fix":"2003"},{"desc":"2000","fix":"2004"},{"desc":"2005","fix":"2006"},{"desc":"2007","fix":"2008"},{"desc":"2005","fix":"2009"},{"desc":"2007","fix":"2010"},{"desc":"2005","fix":"2011"},{"desc":"2007","fix":"2012"},{"desc":"2013","fix":"2014"},{"desc":"2015","fix":"2016"},{"desc":"2017","fix":"2018"},{"desc":"2019","fix":"2020"},{"desc":"2015","fix":"2021"},{"desc":"2022","fix":"2023"},{"desc":"2022","fix":"2024"},{"desc":"2025","fix":"2026"},{"desc":"2022","fix":"2027"},{"desc":"2019","fix":"2028"},{"desc":"1996","fix":"2029"},{"desc":"1998","fix":"2030"},{"desc":"2031","fix":"2032"},{"desc":"1987","fix":"2033"},{"desc":"1989","fix":"2034"},{"desc":"1993","fix":"2035"},{"desc":"1996","fix":"2036"},{"desc":"1998","fix":"2037"},{"desc":"2038","fix":"2039"},{"desc":"1996","fix":"2040"},{"desc":"1998","fix":"2041"},{"desc":"2000","fix":"2042"},{"desc":"1996","fix":"2043"},{"desc":"1998","fix":"2044"},{"desc":"2000","fix":"2045"},{"desc":"2015","fix":"2046"},{"desc":"2047","fix":"2048"},{"desc":"2049","fix":"2050"},{"desc":"2051","fix":"2052"},{"desc":"2053","fix":"2054"},{"desc":"2055","fix":"2056"},{"desc":"2053","fix":"2057"},{"desc":"2058","fix":"2059"},{"desc":"1993","fix":"2060"},{"desc":"2017","fix":"2061"},{"desc":"2062","fix":"2063"},{"desc":"2015","fix":"2064"},{"desc":"2025","fix":"2065"},{"desc":"2055","fix":"2066"},{"desc":"1987","fix":"2067"},{"desc":"1989","fix":"2068"},{"desc":"2005","fix":"2069"},{"desc":"2007","fix":"2070"},{"desc":"2013","fix":"2071"},{"desc":"2015","fix":"2072"},{"desc":"2017","fix":"2073"},{"desc":"2055","fix":"2074"},{"desc":"2025","fix":"2075"},{"desc":"2076","fix":"2077"},{"desc":"1996","fix":"2078"},{"desc":"1998","fix":"2079"},{"desc":"2000","fix":"2080"},{"desc":"2025","fix":"2081"},{"desc":"2005","fix":"2082"},{"desc":"2007","fix":"2083"},"Update the dependencies array to be: [location, setState, state.role]",{"range":"2084","text":"2085"},"Update the dependencies array to be: [isMobile, state.currentMenuIndex]",{"range":"2086","text":"2087"},"Update the dependencies array to be: [setState]",{"range":"2088","text":"2089"},"Update the dependencies array to be: [setState, state.RefreshPersonInfo, state.ref]",{"range":"2090","text":"2091"},{"range":"2092","text":"2089"},{"range":"2093","text":"2091"},"Update the dependencies array to be: [removeFilter, setState]",{"range":"2094","text":"2095"},{"range":"2096","text":"2095"},"Update the dependencies array to be: [loadData, props.date]",{"range":"2097","text":"2098"},"Update the dependencies array to be: [data.cachedBookings, filter]",{"range":"2099","text":"2100"},"Update the dependencies array to be: [loadData, state.bookingDialogDataChanged, topCount]",{"range":"2101","text":"2102"},{"range":"2103","text":"2098"},{"range":"2104","text":"2100"},{"range":"2105","text":"2102"},"Update the dependencies array to be: [loadData, refresh]",{"range":"2106","text":"2107"},"Update the dependencies array to be: [loadData]",{"range":"2108","text":"2109"},{"range":"2110","text":"2107"},{"range":"2111","text":"2109"},{"range":"2112","text":"2107"},{"range":"2113","text":"2109"},"Update the dependencies array to be: [booking, bookingDate, bookingTime, email, fieldChanged, fullname, notes, service, tel]",{"range":"2114","text":"2115"},"Update the dependencies array to be: [props.booking, refreshData, setState, state.bookingPayChanged]",{"range":"2116","text":"2117"},"Update the dependencies array to be: [fetchInvoice, props.booking, props.open]",{"range":"2118","text":"2119"},"Update the dependencies array to be: [props.patient, props.open, props.name, props.surname]",{"range":"2120","text":"2121"},{"range":"2122","text":"2117"},"Update the dependencies array to be: [date, setState, state.AdminCalendarCache, time]",{"range":"2123","text":"2124"},{"range":"2125","text":"2124"},"Update the dependencies array to be: [date, time, state.bookingDialogDataChanged, openDialog, openDialogAddNew, state.AdminCalendarCache, setState]",{"range":"2126","text":"2127"},{"range":"2128","text":"2124"},{"range":"2129","text":"2121"},{"range":"2130","text":"2098"},{"range":"2131","text":"2100"},"Update the dependencies array to be: [loadData, state.paymentDialogDataChanged]",{"range":"2132","text":"2133"},{"range":"2134","text":"2089"},{"range":"2135","text":"2091"},{"range":"2136","text":"2095"},{"range":"2137","text":"2098"},{"range":"2138","text":"2100"},"Update the dependencies array to be: [loadData, state.patientDialogDataChanged]",{"range":"2139","text":"2140"},{"range":"2141","text":"2098"},{"range":"2142","text":"2100"},{"range":"2143","text":"2102"},{"range":"2144","text":"2098"},{"range":"2145","text":"2100"},{"range":"2146","text":"2102"},{"range":"2147","text":"2117"},"Update the dependencies array to be: [date, time, state.bookingDialogDataChanged, openDialog, state.AdminCalendarCache, setState]",{"range":"2148","text":"2149"},"Update the dependencies array to be: [props.defaultCodes, props.invoice]",{"range":"2150","text":"2151"},"Update the dependencies array to be: [props.open, props.booking, props.date, props.time, props.clinic]",{"range":"2152","text":"2153"},"Update the dependencies array to be: [resetDate, value]",{"range":"2154","text":"2155"},"Update the dependencies array to be: [dateStr, disableDay, setState, state.AdminCalendarCache]",{"range":"2156","text":"2157"},{"range":"2158","text":"2155"},"Update the dependencies array to be: [history, location.pathname, setState]",{"range":"2159","text":"2160"},{"range":"2161","text":"2095"},{"range":"2162","text":"2119"},"Update the dependencies array to be: [booking, bookingDate, bookingTime, email, fieldChanged, fullname, notes, tel]",{"range":"2163","text":"2164"},{"range":"2165","text":"2117"},{"range":"2166","text":"2127"},{"range":"2167","text":"2157"},{"range":"2168","text":"2089"},{"range":"2169","text":"2091"},{"range":"2170","text":"2107"},{"range":"2171","text":"2109"},{"range":"2172","text":"2115"},{"range":"2173","text":"2117"},{"range":"2174","text":"2119"},{"range":"2175","text":"2157"},{"range":"2176","text":"2127"},"Update the dependencies array to be: [state.currentMenuIndex, updateShouldRefundsCount]",{"range":"2177","text":"2178"},{"range":"2179","text":"2098"},{"range":"2180","text":"2100"},{"range":"2181","text":"2102"},{"range":"2182","text":"2127"},{"range":"2183","text":"2107"},{"range":"2184","text":"2109"},[8806,8816],"[location, setState, state.role]",[9000,9024],"[isMobile, state.currentMenuIndex]",[3015,3017],"[setState]",[3243,3268],"[setState, state.RefreshPersonInfo, state.ref]",[2969,2971],[3197,3222],[2423,2425],"[removeFilter, setState]",[2423,2425],[16053,16065],"[loadData, props.date]",[16608,16616],"[data.cachedBookings, filter]",[16688,16720],"[loadData, state.bookingDialogDataChanged, topCount]",[19349,19361],[20002,20010],[20082,20114],[1790,1799],"[loadData, refresh]",[2020,2022],"[loadData]",[1790,1799],[2020,2022],[1790,1799],[2020,2022],[9970,9984],"[booking, bookingDate, bookingTime, email, fieldChanged, fullname, notes, service, tel]",[17089,17127],"[props.booking, refreshData, setState, state.bookingPayChanged]",[19789,19816],"[fetchInvoice, props.booking, props.open]",[5455,5482],"[props.patient, props.open, props.name, props.surname]",[16912,16950],[3764,3776],"[date, setState, state.AdminCalendarCache, time]",[3874,3886],[6681,6725],"[date, time, state.bookingDialogDataChanged, openDialog, openDialogAddNew, state.AdminCalendarCache, setState]",[5096,5108],[5455,5482],[11230,11242],[11713,11721],[11768,11800],"[loadData, state.paymentDialogDataChanged]",[3015,3017],[3243,3268],[2972,2974],[10243,10255],[10906,10914],[10961,10993],"[loadData, state.patientDialogDataChanged]",[19349,19361],[20002,20010],[20082,20114],[24034,24046],[24776,24784],[24856,24888],[16912,16950],[6590,6634],"[date, time, state.bookingDialogDataChanged, openDialog, state.AdminCalendarCache, setState]",[6898,6918],"[props.defaultCodes, props.invoice]",[9897,9924],"[props.open, props.booking, props.date, props.time, props.clinic]",[2407,2414],"[resetDate, value]",[4685,4694],"[dateStr, disableDay, setState, state.AdminCalendarCache]",[2407,2414],[2827,2846],"[history, location.pathname, setState]",[2423,2425],[9677,9704],[10767,10781],"[booking, bookingDate, bookingTime, email, fieldChanged, fullname, notes, tel]",[17967,18005],[9977,10021],[5225,5234],[3015,3017],[3243,3268],[1788,1797],[1931,1933],[9933,9947],[17044,17082],[20447,20474],[4712,4721],[7230,7274],[2130,2154],"[state.currentMenuIndex, updateShouldRefundsCount]",[19471,19483],[20124,20132],[20204,20236],[6775,6819],[1825,1834],[2055,2057]]